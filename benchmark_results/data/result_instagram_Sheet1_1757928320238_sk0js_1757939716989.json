{
  "id": "instagram_Sheet1_1757928320238_sk0js_1757939716989",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320238_sk0js",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the feed/posts container to appear\n    await page.waitForSelector('.posts', { timeout: 5000 });\n\n    // Wait for the first post to be visible\n    const firstPostSelector = '.posts .post:first-child';\n    await page.waitForSelector(firstPostSelector, { timeout: 5000 });\n\n    // Locate the like button icon inside the first post\n    // The like button is expected to be: .post:first-child .like-btn i\n    const likeBtnIconSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(likeBtnIconSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Get the class list of the heart icon before clicking\n    const heartClassBefore = await page.$eval(likeBtnIconSelector, el => el.className);\n\n    // Click the like button (click the parent button for robustness)\n    const likeBtnButtonSelector = '.posts .post:first-child .like-btn';\n    await page.waitForSelector(likeBtnButtonSelector, { timeout: 5000 });\n    await page.click(likeBtnButtonSelector);\n\n    // Wait for the heart icon to change (become filled)\n    // We'll poll for a class change for up to 2 seconds\n    let heartClassAfter = heartClassBefore;\n    let filled = false;\n    for (let i = 0; i < 10; i++) {\n      await page.waitForTimeout(200);\n      heartClassAfter = await page.$eval(likeBtnIconSelector, el => el.className);\n      // Commonly, filled heart is 'fas fa-heart', outline is 'far fa-heart'\n      if (\n        heartClassAfter.includes('fas') &&\n        heartClassAfter.includes('fa-heart') &&\n        !heartClassAfter.includes('far')\n      ) {\n        filled = true;\n        break;\n      }\n    }\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Prepare extracted data for verification\n    const extractedData = {\n      heartClassBefore,\n      heartClassAfter,\n      heartIconFilled: filled\n    };\n\n    return {\n      success: filled,\n      action: \"Clicked like button on the first post and verified the heart icon became filled.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 12282,
      "timestamp": "2025-09-15T12:35:16.989Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post's like button to be available\n    // Use alternative selector: locate the first .post, then its .like-btn i (heart icon)\n    const firstPostLikeIconSelector = '.posts .post:nth-child(1) .like-btn i';\n    await page.waitForSelector(firstPostLikeIconSelector, { timeout: 5000 });\n\n    // Before clicking, extract the heart icon class (to check if it's filled later)\n    const heartClassesBefore = await page.$eval(firstPostLikeIconSelector, el => el.className);\n\n    // Click the like button using its parent (.like-btn), in case the icon is not clickable directly\n    const firstPostLikeBtnSelector = '.posts .post:nth-child(1) .like-btn';\n    await page.waitForSelector(firstPostLikeBtnSelector, { timeout: 5000 });\n    await page.click(firstPostLikeBtnSelector);\n\n    // Wait for the heart icon to change class (filled)\n    // Heuristically, wait for the class to include 'fas' (solid) instead of 'far' (regular)\n    await page.waitForFunction(\n      (selector, prevClass) => {\n        const el = document.querySelector(selector);\n        if (!el) return false;\n        return (\n          el.classList.contains('fas') &&\n          !el.classList.contains('far') &&\n          el.className !== prevClass\n        );\n      },\n      firstPostLikeIconSelector,\n      heartClassesBefore,\n      { timeout: 3000 }\n    );\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_liked.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_liked.png'));\n\n    // Extract the heart icon class after clicking\n    const heartClassesAfter = await page.$eval(firstPostLikeIconSelector, el => el.className);\n\n    // Determine success: heart icon should now be filled (contains 'fas', not 'far')\n    const isHeartFilled = heartClassesAfter.includes('fas') && !heartClassesAfter.includes('far');\n\n    return {\n      success: isHeartFilled,\n      action: \"Clicked like button on the first post and verified the heart icon became filled.\",\n      extractedData: {\n        heartClassesBefore,\n        heartClassesAfter,\n        isHeartFilled\n      },\n      screenshots,\n      error: isHeartFilled ? null : \"Heart icon did not become filled after clicking like.\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 26914,
      "timestamp": "2025-09-15T12:35:29.271Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post to be visible using a flexible selector strategy\n    // Try to locate the first post by using the .posts container then the first .post child\n    const postsContainer = await page.waitForSelector('.posts', { timeout: 5000 });\n    const firstPost = await postsContainer.$(':scope > .post');\n    if (!firstPost) {\n      throw new Error('First post not found in feed');\n    }\n\n    // Find the like button inside the first post\n    // Try alternative strategies: icon by aria-label, or by class\n    let likeButton = await firstPost.$('.like-btn');\n    if (!likeButton) {\n      // Try to find by button role or by text/icon\n      likeButton = await firstPost.$('button:has(i.fa-heart)');\n    }\n    if (!likeButton) {\n      // Try by XPath as a fallback (find any button with a heart icon inside)\n      const [btn] = await firstPost.$$('xpath=.//button[.//i[contains(@class,\"fa-heart\")]]');\n      likeButton = btn || null;\n    }\n    if (!likeButton) {\n      throw new Error('Like button not found in the first post');\n    }\n\n    // Check if the heart icon is outlined before clicking (not liked)\n    const heartIcon = await likeButton.$('i');\n    if (!heartIcon) {\n      throw new Error('Heart icon inside like button not found');\n    }\n    const heartClassBefore = await heartIcon.getAttribute('class');\n    const wasFilledBefore = heartClassBefore && (heartClassBefore.includes('fa-solid') || heartClassBefore.includes('fa-heart') && !heartClassBefore.includes('fa-regular'));\n    \n    // Screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button\n    await likeButton.click();\n\n    // Wait for the heart icon to become filled (fa-solid or similar)\n    // Try polling the class for up to 3 seconds\n    let heartClassAfter = heartClassBefore;\n    let isFilled = wasFilledBefore;\n    for (let i = 0; i < 15; i++) {\n      await page.waitForTimeout(200);\n      const currentClass = await heartIcon.getAttribute('class');\n      if (currentClass && (currentClass.includes('fa-solid') || (currentClass.includes('fa-heart') && !currentClass.includes('fa-regular')))) {\n        heartClassAfter = currentClass;\n        isFilled = true;\n        break;\n      }\n    }\n\n    // Screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Verify that the heart is filled after clicking\n    if (!isFilled) {\n      throw new Error('Heart icon did not become filled after liking');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked like button on the first post and verified heart icon is filled (liked).\",\n      extractedData: {\n        heartClassBefore,\n        heartClassAfter,\n        wasFilledBefore,\n        isFilledAfter: isFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17800,
      "timestamp": "2025-09-15T12:35:56.185Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 56996,
  "timestamp": "2025-09-15T12:35:16.989Z",
  "savedAt": "2025-09-15T12:36:13.985Z",
  "version": "1.0"
}