{
  "id": "reddit_Sheet1_1757928320243_2asyw_1757938376025",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320243_2asyw",
    "description": 8,
    "objective": "Regular",
    "expectedResult": "Save first post",
    "difficulty": "Easy",
    "category": "Click save button on first post and verify it's marked as saved",
    "tags": [
      ".post:first-child .post-action.saved"
    ],
    "notes": "toggleSavePost() saveDataToStorage()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the posts list to appear (assume posts are rendered in main content, look for post container)\n    // Try to find a post by heading or by post card class\n    // Let's use an xpath to find the first post's container by heading\n    // Wait for the first post title to appear\n    const firstPostTitle = await page.waitForSelector('xpath=//div[contains(@class, \"post\") or contains(@class, \"Post\") or contains(@class, \"post-card\") or contains(@class, \"post-container\") or //h3]', { timeout: 5000 });\n\n    // Try to locate the \"Save\" button for the first post\n    // On Reddit-like UIs, the save button is typically a button with text \"Save\" or an icon with a tooltip\n    // Let's find the first post container, then its Save button\n    // Try to find all post containers, then work with the first\n    let firstPost;\n    const postSelectors = [\n      '[data-testid=\"post-container\"]',\n      '.post',\n      '.Post',\n      '.post-card',\n      '.post-container',\n      'article'\n    ];\n    for (const sel of postSelectors) {\n      const posts = await page.$$(sel);\n      if (posts.length > 0) {\n        firstPost = posts[0];\n        break;\n      }\n    }\n    // If we couldn't find by class, fallback to heading structure\n    if (!firstPost) {\n      // Try to find the first post title, then go up to its container\n      const h3s = await page.$$('main h3');\n      if (h3s.length > 0) {\n        firstPost = await h3s[0].evaluateHandle(node => node.closest('div'));\n      }\n    }\n\n    if (!firstPost) throw new Error('Could not locate the first post container');\n\n    // Try to find the Save button inside the first post\n    // Try by button text \"Save\"\n    let saveButton = await firstPost.$('button:has-text(\"Save\")');\n    if (!saveButton) {\n      // Try aria-label or title\n      saveButton = await firstPost.$('button[aria-label*=\"Save\"], button[title*=\"Save\"]');\n    }\n    if (!saveButton) {\n      // Try for a bookmark icon (FontAwesome or SVG)\n      saveButton = await firstPost.$('button:has(svg[aria-label*=\"Save\"]), button:has(i.fa-bookmark)');\n    }\n    if (!saveButton) {\n      // Try for a button with a tooltip\n      const buttons = await firstPost.$$('button');\n      for (const btn of buttons) {\n        const text = await btn.innerText().catch(() => '');\n        if (text && /save/i.test(text)) {\n          saveButton = btn;\n          break;\n        }\n      }\n    }\n\n    if (!saveButton) throw new Error('Could not locate Save button on the first post');\n\n    // Take screenshot before saving\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_save.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_save.png'));\n\n    // Click the Save button\n    await saveButton.click();\n\n    // Wait for the Save button to reflect the saved state\n    // This could be a text change to \"Saved\", a color change, or an icon change\n    // Try to wait for button text to change to \"Saved\"\n    let savedState = false;\n    try {\n      await page.waitForFunction(\n        (el) => el.innerText.trim().toLowerCase() === 'saved',\n        saveButton,\n        { timeout: 3000 }\n      );\n      savedState = true;\n    } catch {\n      // If not, try to see if the button gets an \"active\" or \"saved\" class\n      const className = await saveButton.getAttribute('class');\n      if (className && /saved|active/i.test(className)) {\n        savedState = true;\n      }\n    }\n\n    // Take screenshot after saving\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_save.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_save.png'));\n\n    // Extract the post title for reporting\n    let postTitle = '';\n    // Try to find a heading inside the first post\n    const titleEl = await firstPost.$('h3');\n    if (titleEl) {\n      postTitle = await titleEl.innerText();\n    }\n\n    return {\n      success: savedState,\n      action: \"Clicked save button on the first post and verified it is marked as saved\",\n      extractedData: {\n        postTitle,\n        savedState\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 29212,
      "timestamp": "2025-09-15T12:12:56.025Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the posts feed to appear by targeting a post container\n    // Try to detect a post by text content unique to the first post, fallback to a generic card selector\n    // We'll use the title of the first post from the JS: \"Just built my first React app! What do you think?\"\n    const firstPostTitle = \"Just built my first React app! What do you think?\";\n    await page.waitForSelector(`text=\"${firstPostTitle}\"`, { timeout: 5000 });\n\n    // Locate the post container of the first post using XPath to find the nearest ancestor (div, article, etc.)\n    // Find the post's container based on the heading text\n    const [firstPostContainer] = await page.$x(\n      `//h3[contains(normalize-space(.), \"${firstPostTitle}\")]/ancestor::*[self::div or self::article][1]`\n    );\n    if (!firstPostContainer) throw new Error(\"First post container not found\");\n\n    // Try to find the Save button within the first post container.\n    // The Save button might have an icon (fa-bookmark) or text \"Save\"\n    // Use a flexible XPath: look for a button with an aria-label or containing text\n    const [saveBtn] = await firstPostContainer.$x(\n      './/button[contains(@aria-label, \"Save\") or contains(., \"Save\") or .//i[contains(@class,\"fa-bookmark\")]]'\n    );\n    if (!saveBtn) throw new Error(\"Save button on first post not found\");\n\n    // Take a screenshot before clicking Save\n    const step2 = path.join(screenshotsDir, 'step_2_before_save.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the Save button\n    await saveBtn.click();\n\n    // Wait for the saved state to change\n    // Often, the Save button changes to \"Saved\" or the icon changes (e.g., filled bookmark)\n    // We'll look for the button text to change to \"Saved\" within the same post container\n    await page.waitForTimeout(500); // Small wait to let UI update\n\n    // Try to find the \"Saved\" state within the post container\n    const [savedBtn] = await firstPostContainer.$x(\n      './/button[contains(@aria-label, \"Saved\") or contains(., \"Saved\") or .//i[contains(@class,\"fa-bookmark\") and contains(@class,\"saved\")]]'\n    );\n\n    // Extract button text for verification\n    let savedBtnText = \"\";\n    if (savedBtn) {\n      savedBtnText = (await savedBtn.textContent())?.trim();\n    } else {\n      // As fallback, check if the Save button's text has changed\n      savedBtnText = (await saveBtn.textContent())?.trim();\n    }\n\n    // Take screenshot after saving\n    const step3 = path.join(screenshotsDir, 'step_3_after_save.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Prepare extracted data for verification\n    const extractedData = {\n      firstPostTitle,\n      savedBtnText,\n      saved: (savedBtnText.toLowerCase().includes(\"saved\"))\n    };\n\n    if (!extractedData.saved) {\n      throw new Error('Save button did not update to \"Saved\" after clicking');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked save on the first post and verified it is marked as saved\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19562,
      "timestamp": "2025-09-15T12:13:25.237Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post card to appear (find using role and heading)\n    // Try to find the first post by its title (should be \"Just built my first React app! What do you think?\")\n    const firstPostTitle = \"Just built my first React app! What do you think?\";\n    await page.waitForSelector(`text=\"${firstPostTitle}\"`, { timeout: 4000 });\n\n    // Locate the post card container using the post title as anchor (xpath)\n    const [postCard] = await page.$x(`//h3[contains(text(), \"${firstPostTitle}\")]/ancestor::*[contains(@class, \"post-card\")]`);\n    let postContainer;\n    if (postCard) {\n      postContainer = postCard;\n    } else {\n      // fallback: look for section/article containing this title\n      const postHeader = await page.$(`h3:text(\"${firstPostTitle}\")`);\n      postContainer = postHeader\n        ? await postHeader.evaluateHandle(el => el.closest('.post-card, article, section'))\n        : null;\n    }\n    if (!postContainer) throw new Error('First post container not found');\n\n    // Within the post card, find the save button (look for button with \"Save\" text or aria-label)\n    // Try multiple strategies:\n    // 1. Button with text \"Save\"\n    let saveBtn = await postContainer.$('button:has-text(\"Save\")');\n    // 2. Button with aria-label containing \"save\"\n    if (!saveBtn) saveBtn = await postContainer.$('button[aria-label*=\"save\" i]');\n    // 3. Button with a data attribute or icon\n    if (!saveBtn) {\n      // Try to find a button with an icon (fa-bookmark) or similar\n      saveBtn = await postContainer.$('button i.fa-bookmark');\n      if (saveBtn) saveBtn = await saveBtn.evaluateHandle(el => el.closest('button'));\n    }\n    if (!saveBtn) throw new Error('Save button for first post not found');\n\n    // Take screenshot before saving\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_save.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_save.png'));\n\n    // Click the save button\n    await saveBtn.click();\n\n    // Wait for UI to update: button text changes to \"Saved\" or aria-pressed, or visual indicator\n    // Wait for button to reflect saved state (try multiple strategies)\n    let savedStateDetected = false;\n    for (let i = 0; i < 10; ++i) {\n      // 1. Button text \"Saved\"\n      const savedBtn = await postContainer.$('button:has-text(\"Saved\")');\n      if (savedBtn) { savedStateDetected = true; break; }\n      // 2. Button aria-pressed=\"true\" or aria-label contains \"saved\"\n      const ariaPressed = await postContainer.$('button[aria-pressed=\"true\"]');\n      if (ariaPressed) { savedStateDetected = true; break; }\n      const ariaLabelSaved = await postContainer.$('button[aria-label*=\"saved\" i]');\n      if (ariaLabelSaved) { savedStateDetected = true; break; }\n      // 3. Icon changes (fa-bookmark, fa-bookmark-solid, etc)\n      const savedIcon = await postContainer.$('button i.fa-bookmark, button i.fa-bookmark-solid');\n      if (savedIcon) {\n        // Optionally check for a \"saved\" class\n        const className = await savedIcon.evaluate(el => el.className);\n        if (className && /saved|active|solid/i.test(className)) {\n          savedStateDetected = true;\n          break;\n        }\n      }\n      await page.waitForTimeout(300);\n    }\n\n    // Take screenshot after saving\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_save.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_save.png'));\n\n    // Extract state for reporting\n    let saveButtonText = '';\n    let saveButtonAriaPressed = '';\n    let saveButtonAriaLabel = '';\n    if (saveBtn) {\n      saveButtonText = await saveBtn.innerText();\n      saveButtonAriaPressed = await saveBtn.getAttribute('aria-pressed');\n      saveButtonAriaLabel = await saveBtn.getAttribute('aria-label');\n    }\n\n    return {\n      success: savedStateDetected,\n      action: \"Clicked save on the first post and verified it is marked as saved.\",\n      extractedData: {\n        saveButtonText,\n        saveButtonAriaPressed,\n        saveButtonAriaLabel,\n        firstPostTitle,\n        savedStateDetected\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 26149,
      "timestamp": "2025-09-15T12:13:44.799Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 74923,
  "timestamp": "2025-09-15T12:12:56.025Z",
  "savedAt": "2025-09-15T12:14:10.948Z",
  "version": "1.0"
}