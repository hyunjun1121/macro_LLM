{
  "id": "Airbnb_TASK_006_1757928513291",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun's first listing's favorite button to be visible\n    // Selector: [data-listing-id='jun_1'] .listing-favorite\n    const favBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favBtnSelector, { state: 'visible', timeout: 5000 });\n\n    // Get initial favorite button state (e.g., aria-pressed, class, or innerHTML)\n    const initialBtnState = await page.$eval(favBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent\n      };\n    });\n\n    // Get initial localStorage favorites (if available)\n    const initialLocalStorage = await page.evaluate(() => {\n      try {\n        return JSON.parse(localStorage.getItem('airbnb_favorites') || '[]');\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Click the favorite button\n    await page.click(favBtnSelector);\n\n    // Wait for button state to change (e.g., aria-pressed toggled, class changed, or icon/text changes)\n    await page.waitForTimeout(500); // Allow UI to update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_favorite_clicked.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_favorite_clicked.png'));\n\n    // Get new favorite button state\n    const newBtnState = await page.$eval(favBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent\n      };\n    });\n\n    // Get updated localStorage favorites\n    const updatedLocalStorage = await page.evaluate(() => {\n      try {\n        return JSON.parse(localStorage.getItem('airbnb_favorites') || '[]');\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Prepare extracted data for verification\n    const extractedData = {\n      initialBtnState,\n      newBtnState,\n      initialLocalStorage,\n      updatedLocalStorage,\n      jun1WasInitiallyFavorited: initialLocalStorage ? initialLocalStorage.includes('jun_1') : null,\n      jun1IsNowFavorited: updatedLocalStorage ? updatedLocalStorage.includes('jun_1') : null\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼, 확인 버튼 상태 변화 및 localStorage 업데이트\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 12577,
      "timestamp": "2025-09-15T09:28:33.291Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file and wait for network to be idle\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // 3. Wait for the Jun's 숙소 card to appear using data-listing-id attribute\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 7000 });\n\n    // 4. Find and focus the favorite button inside Jun's listing\n    // Try direct descendant first, then fallback to nested search by aria-label or icon\n    let favBtn = await page.$(`${listingSelector} .listing-favorite`);\n    if (!favBtn) {\n      // Try with button that might be the favorite (e.g., by aria-label or icon)\n      favBtn = await page.$(`${listingSelector} button[aria-label*=\"favorite\"], ${listingSelector} button:has(.fa-heart)`);\n    }\n    if (!favBtn) {\n      throw new Error(\"Favorite button for Jun's listing not found by direct selectors\");\n    }\n\n    // 5. Take screenshot before clicking the favorite button\n    const beforeClickScreenshot = path.join(screenshotsDir, 'step_2_before_favorite_click.png');\n    await page.screenshot({ path: beforeClickScreenshot });\n    screenshots.push(beforeClickScreenshot);\n\n    // 6. Get the button state/class before clicking (for visual and programmatic check)\n    const btnClassBefore = await favBtn.getAttribute('class');\n    const btnTextBefore = await favBtn.textContent();\n\n    // 7. Click the favorite button (simulate user interaction)\n    await favBtn.click();\n\n    // 8. Wait for possible visual state change (class, icon, etc)\n    await page.waitForTimeout(800);\n\n    // 9. Take screenshot after clicking the favorite button\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_3_after_favorite_click.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // 10. Get the button state/class after clicking\n    const btnClassAfter = await favBtn.getAttribute('class');\n    const btnTextAfter = await favBtn.textContent();\n\n    // 11. Check if the class or text changed (indicating favorite status changed)\n    const buttonStateChanged = btnClassBefore !== btnClassAfter || btnTextBefore !== btnTextAfter;\n\n    // 12. Check localStorage for favorites update (run in page context)\n    const localStorageFavorites = await page.evaluate(() => {\n      // Try possible keys for favorites\n      const keys = Object.keys(window.localStorage);\n      let favs = null;\n      for (const key of keys) {\n        if (key.toLowerCase().includes('favorite')) {\n          try {\n            const parsed = JSON.parse(window.localStorage.getItem(key));\n            if (Array.isArray(parsed)) {\n              favs = parsed;\n              break;\n            }\n          } catch (e) {}\n        }\n      }\n      return favs;\n    });\n\n    // 13. Verify if 'jun_1' is present or absent after clicking (state should have toggled)\n    let jun1InFavorites = false;\n    if (Array.isArray(localStorageFavorites)) {\n      jun1InFavorites = localStorageFavorites.includes('jun_1');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun's first listing (jun_1) favorite button, verified state change and localStorage update.\",\n      extractedData: {\n        buttonClassBefore: btnClassBefore,\n        buttonClassAfter: btnClassAfter,\n        buttonTextBefore: btnTextBefore,\n        buttonTextAfter: btnTextAfter,\n        buttonStateChanged,\n        localStorageFavorites,\n        jun1InFavorites\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 30024,
      "timestamp": "2025-09-15T09:28:45.868Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file and wait for full load\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Wait for the listings section to appear (use a general selector to ensure content)\n    await page.waitForSelector('[data-listing-id]', { timeout: 5000 });\n\n    // 3. Take an initial screenshot of the page\n    const step1Path = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1Path });\n    screenshots.push(step1Path);\n\n    // 4. Locate Jun의 첫 번째 숙소(jun_1) favorite button using attribute selector\n    // Try to be robust: first locate the listing card, then the favorite button within\n    const junListingSelector = '[data-listing-id=\"jun_1\"]';\n    await page.waitForSelector(junListingSelector, { timeout: 4000 });\n\n    // Wait for the favorite button to be attached in the DOM within the listing\n    const favoriteBtnSelector = `${junListingSelector} .listing-favorite`;\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 4000 });\n\n    // 5. Check favorite button's initial state (e.g., aria-pressed, class, icon, etc.)\n    const favoriteBtn = await page.$(favoriteBtnSelector);\n    let initialBtnState = await page.evaluate(el => {\n      // Try to extract visual state and text/icon\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        html: el.innerHTML,\n        isFavorited: el.classList.contains('favorited') || el.classList.contains('active') // guess\n      };\n    }, favoriteBtn);\n\n    // 6. Take a screenshot before clicking\n    const step2Path = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: step2Path });\n    screenshots.push(step2Path);\n\n    // 7. Click the favorite button\n    await favoriteBtn.click();\n\n    // 8. Wait for the button state to change (e.g., class, aria-pressed, etc.)\n    // Poll for a class change or aria-pressed attribute flip for up to 2s\n    let newBtnState = null;\n    await page.waitForFunction(\n      (selector, initialState) => {\n        const btn = document.querySelector(selector);\n        if (!btn) return false;\n        // Detect changed aria-pressed or classList\n        return (\n          btn.getAttribute('aria-pressed') !== initialState.ariaPressed ||\n          btn.className !== initialState.class ||\n          btn.classList.contains('favorited') !== initialState.isFavorited ||\n          btn.classList.contains('active') !== initialState.isFavorited\n        );\n      },\n      favoriteBtnSelector,\n      initialBtnState,\n      { timeout: 2000 }\n    );\n\n    // 9. Get the new state of the button\n    newBtnState = await page.evaluate(el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        html: el.innerHTML,\n        isFavorited: el.classList.contains('favorited') || el.classList.contains('active')\n      };\n    }, favoriteBtn);\n\n    // 10. Take a screenshot after clicking\n    const step3Path = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: step3Path });\n    screenshots.push(step3Path);\n\n    // 11. Check localStorage for favorites (run in browser context)\n    // Try common keys: favorites, airbnb_favorites, etc. If not present, extract all keys\n    const localStorageData = await page.evaluate(() => {\n      const keys = Object.keys(window.localStorage);\n      let favoritesKey = keys.find(k =>\n        k.toLowerCase().includes('favorite')\n      );\n      if (favoritesKey) {\n        try {\n          return {\n            favoritesKey,\n            favoritesValue: window.localStorage.getItem(favoritesKey),\n            parsed: JSON.parse(window.localStorage.getItem(favoritesKey))\n          };\n        } catch (e) {\n          return {\n            favoritesKey,\n            favoritesValue: window.localStorage.getItem(favoritesKey),\n            parsed: null\n          };\n        }\n      }\n      // Otherwise, dump all keys/values\n      return {\n        favoritesKey: null,\n        all: Object.fromEntries(keys.map(k => [k, window.localStorage.getItem(k)]))\n      };\n    });\n\n    // 12. Check if 'jun_1' is present in the favorites (array or object)\n    let isInFavorites = false;\n    if (localStorageData.parsed && Array.isArray(localStorageData.parsed)) {\n      isInFavorites = localStorageData.parsed.includes('jun_1');\n    } else if (\n      localStorageData.parsed &&\n      typeof localStorageData.parsed === 'object' &&\n      localStorageData.parsed !== null\n    ) {\n      isInFavorites = Object.values(localStorageData.parsed).includes('jun_1');\n    } else if (\n      typeof localStorageData.favoritesValue === 'string' &&\n      localStorageData.favoritesValue.includes('jun_1')\n    ) {\n      isInFavorites = true;\n    }\n\n    // 13. Compose summary data\n    const extractedData = {\n      initialBtnState,\n      newBtnState,\n      localStorage: localStorageData,\n      isJun1InFavorites: isInFavorites\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) favorite button, detected button state change and verified localStorage update.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 40511,
      "timestamp": "2025-09-15T09:29:15.892Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 83112,
  "timestamp": "2025-09-15T09:28:33.291Z",
  "savedAt": "2025-09-15T09:29:56.403Z",
  "version": "1.0"
}