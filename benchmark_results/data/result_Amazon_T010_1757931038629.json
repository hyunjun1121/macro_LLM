{
  "id": "Amazon_T010_1757931038629",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Open the first product detail modal (assume clicking the card opens modal)\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the modal/dialog to appear (look for .product-modal or a modal with product details)\n    // Try common selectors for modals\n    let modalSelector = '.product-modal, .modal, .product-detail-modal';\n    await page.waitForSelector(modalSelector, { timeout: 5000 });\n\n    // Take screenshot of the opened modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // Find and click the 'Add to Wish List' button inside the modal\n    // Try several selector strategies\n    let addToWishlistBtn = await page.$(`${modalSelector} .add-to-wishlist`);\n    if (!addToWishlistBtn) {\n      // Try by text content\n      addToWishlistBtn = await page.$(`${modalSelector} button:has-text(\"Add to Wish List\")`);\n    }\n    if (!addToWishlistBtn) {\n      // Try xpath as fallback\n      const [btnByXpath] = await page.$x(`//button[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'add to wish list')]`);\n      if (btnByXpath) addToWishlistBtn = btnByXpath;\n    }\n    if (!addToWishlistBtn) throw new Error('Add to Wish List button not found in modal');\n\n    await addToWishlistBtn.click();\n\n    // Wait for a confirmation or UI feedback (e.g., success message, icon change)\n    // Try to detect a toast, alert, or button state change\n    let confirmationText = '';\n    try {\n      // Wait for a toast or confirmation message\n      await page.waitForSelector('.toast-success, .wishlist-success, .alert-success, .wishlist-added', { timeout: 3000 });\n      const confirmationEl = await page.$('.toast-success, .wishlist-success, .alert-success, .wishlist-added');\n      if (confirmationEl) {\n        confirmationText = (await confirmationEl.textContent())?.trim() || '';\n      }\n    } catch (e) {\n      // If no toast, check if the button changed state (e.g., to \"Added\" or disabled)\n      const btnText = (await addToWishlistBtn.textContent())?.toLowerCase() || '';\n      if (btnText.includes('added') || btnText.includes('in wish list')) {\n        confirmationText = btnText;\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_add_to_wishlist.png'));\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      const titleEl = await page.$(`${modalSelector} .product-title, ${modalSelector} h2, ${modalSelector} h1`);\n      if (titleEl) {\n        productTitle = (await titleEl.textContent())?.trim() || '';\n      }\n    } catch (e) {}\n\n    return {\n      success: true,\n      action: \"Opened first product modal and clicked 'Add to Wish List' button.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51241,
      "timestamp": "2025-09-15T10:10:38.629Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear (robust selector: by class and nth-child)\n    const productCardSelector = '.product-card, .product-listing, [data-testid=\"product-card\"]';\n    // Use a fallback: try first matched product card by class, or fallback to a generic card if needed\n    let productCardHandle = await page.$('.product-card');\n    if (!productCardHandle) {\n      // Try alternative selectors if .product-card is not present\n      productCardHandle = await page.$('.product-listing');\n    }\n    if (!productCardHandle) {\n      // As a last resort, try a card with alt/title attributes (for robustness)\n      productCardHandle = await page.$('div[title], div[alt]');\n    }\n\n    if (!productCardHandle) {\n      throw new Error('Could not find product card on the page.');\n    }\n\n    // Scroll into view and hover to ensure any overlays/buttons render\n    await productCardHandle.scrollIntoViewIfNeeded();\n    await productCardHandle.hover();\n\n    // Take screenshot after hovering over product card\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_card_hovered.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_card_hovered.png'));\n\n    // Try to click to open product detail modal/dialog\n    // Try clicking the first image or first \"View\" button inside the card\n    let modalOpened = false;\n    try {\n      const imageInCard = await productCardHandle.$('img');\n      if (imageInCard) {\n        await imageInCard.click();\n        modalOpened = true;\n      }\n    } catch {}\n\n    if (!modalOpened) {\n      // Try clicking a button or the card itself\n      try {\n        const viewBtn = await productCardHandle.$('button, .view-details, [role=\"button\"]');\n        if (viewBtn) {\n          await viewBtn.click();\n          modalOpened = true;\n        }\n      } catch {}\n    }\n\n    if (!modalOpened) {\n      // As final fallback, click the entire card\n      await productCardHandle.click();\n    }\n\n    // Wait for modal/dialog to appear: look for a generic modal/dialog or product detail content\n    // Try some robust selectors and fallback strategies\n    const modalSelectorOptions = [\n      '.modal-content',\n      '.product-detail-modal',\n      '[role=\"dialog\"]',\n      '.product-modal',\n      '.product-details',\n      '.modal.show'\n    ];\n    let modalFound = false;\n    for (const sel of modalSelectorOptions) {\n      try {\n        await page.waitForSelector(sel, { timeout: 2500 });\n        modalFound = true;\n        break;\n      } catch {}\n    }\n    // As a last fallback, wait for a new \"Add to Wish List\" button to appear\n    if (!modalFound) {\n      try {\n        await page.waitForSelector('.add-to-wishlist', { timeout: 2500 });\n        modalFound = true;\n      } catch {}\n    }\n\n    // Take screenshot after opening modal/detail\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n\n    // Find the \"Add to Wish List\" button (use multiple selector strategies)\n    let wishlistBtn = await page.$('.add-to-wishlist');\n    if (!wishlistBtn) {\n      wishlistBtn = await page.$('button:has-text(\"Wish List\")');\n    }\n    if (!wishlistBtn) {\n      wishlistBtn = await page.$('//button[contains(translate(.,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"abcdefghijklmnopqrstuvwxyz\"), \"wish list\")]');\n    }\n    if (!wishlistBtn) {\n      // Try text selector for edge cases\n      wishlistBtn = await page.$(':text(\"Add to Wish List\")');\n    }\n    if (!wishlistBtn) {\n      throw new Error('Could not find \"Add to Wish List\" button in product modal.');\n    }\n\n    // Click the \"Add to Wish List\" button\n    await wishlistBtn.click();\n\n    // Wait for confirmation (e.g., toast, notification, or button text change)\n    // Try to detect a feedback message, icon, or button disabled state\n    let confirmationText = '';\n    let confirmationFound = false;\n    const confirmSelectors = [\n      '.wishlist-success', '.toast-message', '.notification-success',\n      '.add-to-wishlist.added', '.wishlist-confirmation'\n    ];\n    for (const sel of confirmSelectors) {\n      try {\n        await page.waitForSelector(sel, { timeout: 2500 });\n        const el = await page.$(sel);\n        if (el) {\n          confirmationText = (await el.innerText()).trim();\n          confirmationFound = true;\n          break;\n        }\n      } catch {}\n    }\n    // As fallback, check if the button is now disabled or has changed text\n    if (!confirmationFound) {\n      const btnText = (await wishlistBtn.innerText()).trim().toLowerCase();\n      if (btnText.includes('added') || btnText.includes('in wish')) {\n        confirmationText = btnText;\n        confirmationFound = true;\n      }\n    }\n\n    // Take screenshot after adding to wish list\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_wishlist_added.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_wishlist_added.png'));\n\n    // Try to extract product title from modal for verification\n    let productTitle = '';\n    try {\n      const titleEl = await page.$('.modal-content h2, .product-detail-modal h2, .product-details h2, .product-title, h2');\n      if (titleEl) {\n        productTitle = (await titleEl.innerText()).trim();\n      }\n    } catch {}\n\n    return {\n      success: true,\n      action: 'Opened first product detail modal and added product to wish list using robust selectors and dynamic waits.',\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 56439,
      "timestamp": "2025-09-15T10:11:29.870Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card using a robust selector (CSS :nth-of-type)\n    await page.waitForSelector('.product-card:nth-of-type(1)', { timeout: 5000 });\n\n    // Scroll to the first product card to ensure it's in view\n    await page.evaluate(() => {\n      const product = document.querySelector('.product-card:nth-of-type(1)');\n      if (product) product.scrollIntoView({ behavior: 'instant', block: 'center' });\n    });\n\n    // Take screenshot of product in view\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_in_view.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_in_view.png'));\n\n    // Try to open the product detail modal:\n    // Sometimes modals are opened by clicking the image, sometimes the whole card, sometimes a button.\n    // We'll first try clicking the product image.\n    let modalOpened = false;\n    const productCard = await page.$('.product-card:nth-of-type(1)');\n    if (productCard) {\n      // Try clicking the image inside the product card\n      const productImg = await productCard.$('img');\n      if (productImg) {\n        await productImg.click();\n        // Wait for a modal/dialog to appear (look for a generic .modal or dialog role)\n        try {\n          await page.waitForSelector('.modal, [role=\"dialog\"], .product-modal', { timeout: 2500 });\n          modalOpened = true;\n        } catch {}\n      }\n    }\n\n    // If modal didn't open, try clicking the card itself\n    if (!modalOpened && productCard) {\n      await productCard.click();\n      try {\n        await page.waitForSelector('.modal, [role=\"dialog\"], .product-modal', { timeout: 2500 });\n        modalOpened = true;\n      } catch {}\n    }\n\n    // Wait a bit for modal animation if any\n    if (modalOpened) {\n      await page.waitForTimeout(400);\n    }\n\n    // Take screenshot after opening modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n\n    // Find the \"Add to Wish List\" button inside the modal or card\n    // Try several selectors:\n    // - Button or element with class .add-to-wishlist\n    // - Button with text \"Add to Wish List\"\n    // - aria-label or title attributes\n    let wishlistBtn = null;\n\n    // Prefer inside modal if open\n    if (modalOpened) {\n      const modalHandle = await page.$('.modal, [role=\"dialog\"], .product-modal');\n      if (modalHandle) {\n        wishlistBtn = await modalHandle.$('.add-to-wishlist');\n        if (!wishlistBtn) {\n          wishlistBtn = await modalHandle.$('button:has-text(\"Add to Wish List\")');\n        }\n        if (!wishlistBtn) {\n          // Try XPath as a fallback\n          const btns = await modalHandle.$$('button, a');\n          for (const btn of btns) {\n            const text = await btn.innerText();\n            if (text && text.trim().toLowerCase().includes('wish')) {\n              wishlistBtn = btn;\n              break;\n            }\n          }\n        }\n      }\n    }\n    // If not found in modal, try product card itself\n    if (!wishlistBtn && productCard) {\n      wishlistBtn = await productCard.$('.add-to-wishlist');\n      if (!wishlistBtn) {\n        wishlistBtn = await productCard.$('button:has-text(\"Add to Wish List\")');\n      }\n      if (!wishlistBtn) {\n        // Try XPath as a fallback\n        const btns = await productCard.$$('button, a');\n        for (const btn of btns) {\n          const text = await btn.innerText();\n          if (text && text.trim().toLowerCase().includes('wish')) {\n            wishlistBtn = btn;\n            break;\n          }\n        }\n      }\n    }\n    if (!wishlistBtn) {\n      throw new Error('Could not find \"Add to Wish List\" button using multiple strategies.');\n    }\n\n    // Click the wishlist button\n    await wishlistBtn.click();\n\n    // Wait for visual feedback (like a toast, icon change, or button disabled)\n    // Try waiting for a success toast, or a change in button state\n    let wishSuccess = false;\n    try {\n      // Look for a success message or change (simulate possible feedbacks)\n      await page.waitForSelector('.toast-success, .wishlist-added, .add-to-wishlist[disabled]', { timeout: 3500 });\n      wishSuccess = true;\n    } catch {\n      // If no toast, check if button text changes (e.g. \"Added\" or \"In Wish List\")\n      const btnText = await wishlistBtn.innerText();\n      if (btnText && (btnText.toLowerCase().includes('added') || btnText.toLowerCase().includes('in wish'))) {\n        wishSuccess = true;\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_wishlist.png'));\n\n    // Extract product title and success status for verification\n    let productTitle = '';\n    if (modalOpened) {\n      const modalHandle = await page.$('.modal, [role=\"dialog\"], .product-modal');\n      if (modalHandle) {\n        // Try a heading or title\n        const titleEl = await modalHandle.$('h2, h1, .product-title, .modal-title');\n        if (titleEl) {\n          productTitle = (await titleEl.innerText()).trim();\n        }\n      }\n    }\n    if (!productTitle && productCard) {\n      const titleEl = await productCard.$('h2, h3, .product-title');\n      if (titleEl) {\n        productTitle = (await titleEl.innerText()).trim();\n      }\n    }\n\n    return {\n      success: wishSuccess,\n      action: `Opened first product modal and clicked 'Add to Wish List' button${wishSuccess ? ' (verified visual feedback)' : ''}`,\n      extractedData: {\n        productTitle,\n        wishlistAdded: wishSuccess\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 56905,
      "timestamp": "2025-09-15T10:12:26.309Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 164585,
  "timestamp": "2025-09-15T10:10:38.629Z",
  "savedAt": "2025-09-15T10:13:23.214Z",
  "version": "1.0"
}