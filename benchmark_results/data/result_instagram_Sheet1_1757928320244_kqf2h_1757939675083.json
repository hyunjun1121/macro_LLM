{
  "id": "instagram_Sheet1_1757928320244_kqf2h_1757939675083",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320244_kqf2h",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the feed/posts container to be visible\n    await page.waitForSelector('.posts', { timeout: 5000 });\n\n    // Wait for the first post to be present\n    const firstPostSelector = '.posts .post:first-child';\n    await page.waitForSelector(firstPostSelector, { timeout: 5000 });\n\n    // Wait for the like button (heart icon) inside the first post\n    const likeBtnSelector = '.posts .post:first-child .like-btn';\n    await page.waitForSelector(likeBtnSelector, { timeout: 5000 });\n\n    // Take a screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Find the heart icon element inside the like button\n    const heartIconSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(heartIconSelector, { timeout: 5000 });\n\n    // Extract the heart icon's class before clicking\n    const heartClassBefore = await page.$eval(heartIconSelector, el => el.className);\n\n    // Click the like button\n    await page.click(likeBtnSelector);\n\n    // Wait for the heart icon to become filled (class changes)\n    // Assume filled heart uses 'fas' (solid), unfilled uses 'far' (regular)\n    await page.waitForFunction(\n      (selector, prevClass) => {\n        const el = document.querySelector(selector);\n        return el && el.className !== prevClass && el.className.includes('fas');\n      },\n      heartIconSelector,\n      heartClassBefore,\n      { timeout: 4000 }\n    );\n\n    // Take a screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract the heart icon's class after clicking\n    const heartClassAfter = await page.$eval(heartIconSelector, el => el.className);\n\n    // Verification: heart icon class should now include 'fas' (filled/solid)\n    const heartFilled = heartClassAfter.includes('fas') && !heartClassAfter.includes('far');\n\n    return {\n      success: heartFilled,\n      action: \"Clicked like button on the first post and verified the heart icon became filled.\",\n      extractedData: {\n        heartClassBefore,\n        heartClassAfter,\n        heartFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 14838,
      "timestamp": "2025-09-15T12:34:35.083Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file and wait for network to be idle\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Take initial screenshot\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // 3. Wait for the first post's like button to be visible\n    // Using alternative selector: locate the first '.post' via xpath, then find its '.like-btn' inside\n    const firstPostLikeBtnXPath = '(//div[contains(@class,\"post\")])[1]//button[contains(@class,\"like-btn\")]';\n    await page.waitForSelector(firstPostLikeBtnXPath, { timeout: 5000 });\n\n    // 4. Also wait for the heart icon inside the like button to be visible (FontAwesome icon)\n    const firstPostHeartIconXPath = '(//div[contains(@class,\"post\")])[1]//button[contains(@class,\"like-btn\")]//i';\n    await page.waitForSelector(firstPostHeartIconXPath, { timeout: 5000 });\n\n    // 5. Check the heart icon class BEFORE clicking (should NOT be 'fas fa-heart' if unliked)\n    const preClickClass = await page.$eval(firstPostHeartIconXPath, el => el.className);\n\n    // 6. Click the like button (use the button to avoid clicking just the icon)\n    const likeBtn = await page.$(firstPostLikeBtnXPath);\n    await likeBtn.click();\n\n    // 7. Wait for the heart icon to change (class should now include \"fas fa-heart\")\n    await page.waitForFunction((xpath) => {\n      const el = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n      return el && el.className.includes('fas') && el.className.includes('fa-heart');\n    }, {}, firstPostHeartIconXPath);\n\n    // 8. Take a screenshot after clicking\n    const step2 = path.join(screenshotsDir, 'step_2_after_like.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // 9. Extract the heart icon class AFTER clicking\n    const postClickClass = await page.$eval(firstPostHeartIconXPath, el => el.className);\n\n    // 10. Determine if the heart is filled (FontAwesome: 'fas fa-heart' indicates filled, 'far fa-heart' is outline)\n    const isHeartFilled = postClickClass.includes('fas') && postClickClass.includes('fa-heart');\n\n    return {\n      success: isHeartFilled,\n      action: \"Clicked like button on the first post in feed and verified heart icon becomes filled\",\n      extractedData: {\n        preClickHeartClass: preClickClass,\n        postClickHeartClass: postClickClass,\n        isHeartFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18158,
      "timestamp": "2025-09-15T12:34:49.921Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the feed/posts to appear using a broad selector\n    await page.waitForSelector('.posts', { timeout: 5000 });\n\n    // Find the first post using XPath as an alternative strategy\n    // This targets the first .post element inside .posts\n    const firstPostHandle = await page.$('xpath=//div[contains(@class, \"posts\")]/div[contains(@class, \"post\")][1]');\n    if (!firstPostHandle) {\n      throw new Error('First post not found in feed.');\n    }\n\n    // Wait for the like button inside the first post\n    // Use a deep descendant selector to be resilient\n    const likeBtnSelector = '.like-btn';\n    const likeIconSelector = '.like-btn i';\n\n    // Scope all queries to the first post\n    const likeBtn = await firstPostHandle.$(likeBtnSelector);\n    if (!likeBtn) {\n      throw new Error('Like button not found in the first post.');\n    }\n\n    // Take screenshot before clicking like\n    await firstPostHandle.screenshot({ path: path.join(screenshotsDir, 'step_2_first_post_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_first_post_before_like.png'));\n\n    // Get the like icon element and its classes before clicking\n    const likeIcon = await firstPostHandle.$(likeIconSelector);\n    if (!likeIcon) {\n      throw new Error('Like icon not found in the first post.');\n    }\n\n    // Extract initial classes and aria-label for verification\n    const beforeLikeClass = await likeIcon.getAttribute('class');\n    const beforeLikeAria = await likeIcon.getAttribute('aria-label');\n\n    // Click the like button using the button element (not the icon)\n    await likeBtn.click();\n\n    // Wait for the icon to change - filled heart usually has a different class or attribute\n    // Try to wait for class change or a new attribute (\"liked\" or \"fa-solid\" etc)\n    await page.waitForFunction(\n      (el, beforeClass) => {\n        return !el.className.includes('fa-regular') || el.className !== beforeClass;\n      },\n      likeIcon,\n      beforeLikeClass\n    );\n\n    // Take screenshot after clicking like\n    await firstPostHandle.screenshot({ path: path.join(screenshotsDir, 'step_3_first_post_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_first_post_after_like.png'));\n\n    // Extract new class and aria-label\n    const afterLikeClass = await likeIcon.getAttribute('class');\n    const afterLikeAria = await likeIcon.getAttribute('aria-label');\n\n    // Verification: check that the icon now shows filled/solid heart\n    // FontAwesome filled heart is fa-solid fa-heart, outlined is fa-regular fa-heart\n    const isFilledHeart = afterLikeClass && afterLikeClass.includes('fa-solid') && afterLikeClass.includes('fa-heart');\n    const wasOutlinedHeart = beforeLikeClass && beforeLikeClass.includes('fa-regular') && beforeLikeClass.includes('fa-heart');\n\n    // Compose extracted data for reporting\n    const extractedData = {\n      beforeLikeClass,\n      beforeLikeAria,\n      afterLikeClass,\n      afterLikeAria,\n      wasOutlinedHeart,\n      isFilledHeart\n    };\n\n    let action;\n    if (wasOutlinedHeart && isFilledHeart) {\n      action = \"Clicked like on the first post and verified heart icon is filled (liked)\";\n    } else {\n      action = \"Clicked like but could not verify filled heart icon\";\n    }\n\n    return {\n      success: isFilledHeart,\n      action,\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 31195,
      "timestamp": "2025-09-15T12:35:08.079Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 64191,
  "timestamp": "2025-09-15T12:34:35.083Z",
  "savedAt": "2025-09-15T12:35:39.275Z",
  "version": "1.0"
}