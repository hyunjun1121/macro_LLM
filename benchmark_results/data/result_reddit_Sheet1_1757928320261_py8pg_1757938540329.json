{
  "id": "reddit_Sheet1_1757928320261_py8pg_1757938540329",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320261_py8pg",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus body to start keyboard navigation\n    await page.focus('body');\n\n    // Helper to get the currently focused element's info\n    async function getFocusedInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return { tag: null, id: null, class: null, name: null, placeholder: null, ariaLabel: null, role: null };\n        return {\n          tag: el.tagName,\n          id: el.id || null,\n          class: el.className || null,\n          name: el.getAttribute('name') || null,\n          placeholder: el.getAttribute('placeholder') || null,\n          ariaLabel: el.getAttribute('aria-label') || null,\n          role: el.getAttribute('role') || null,\n          text: el.innerText || el.value || null\n        };\n      });\n    }\n\n    // List to store focus order\n    const focusOrder = [];\n\n    // We'll tab through at least 10 elements or until we loop back to the first focusable\n    let lastFocused = null;\n    let loopDetected = false;\n    for (let i = 0; i < 12; i++) {\n      // Press Tab (use Shift+Tab if you want to test backwards)\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(200); // Give time for focus to move\n\n      const focused = await getFocusedInfo();\n      focusOrder.push(focused);\n\n      // Take a screenshot at each step\n      const shotName = `step_${i + 2}_tab_${i + 1}_${(focused.tag || 'none').toLowerCase()}_${(focused.id || focused.class || focused.name || i)}.png`;\n      await page.screenshot({ path: path.join(screenshotsDir, shotName) });\n      screenshots.push(path.join(screenshotsDir, shotName));\n\n      // Detect loop: if we focus the same element as the first after 2+ tabs, break\n      if (i > 1 && lastFocused && focused.tag === focusOrder[0].tag && focused.id === focusOrder[0].id && focused.class === focusOrder[0].class) {\n        loopDetected = true;\n        break;\n      }\n      lastFocused = focused;\n    }\n\n    // Extract a summary of focusable elements and their order\n    const focusSummary = focusOrder.map((f, idx) => ({\n      step: idx + 1,\n      tag: f.tag,\n      id: f.id,\n      class: f.class,\n      name: f.name,\n      placeholder: f.placeholder,\n      ariaLabel: f.ariaLabel,\n      role: f.role,\n      text: f.text\n    }));\n\n    // Check if all major interactive elements are reachable by tab\n    const foundSearch = focusOrder.some(f => f.id === 'searchInput' || f.placeholder === 'Search Reddit');\n    const foundCreatePostBtn = focusOrder.some(f => f.class && f.class.includes('create-post-btn'));\n    const foundThemeToggle = focusOrder.some(f => f.class && f.class.includes('theme-toggle-btn'));\n    const foundCommunityLink = focusOrder.some(f => f.class && f.class.includes('community-link'));\n    const foundPostTitle = focusOrder.some(f => f.id === 'postTitle' || f.placeholder === 'An interesting title');\n    const foundDropdown = focusOrder.some(f => f.tag === 'SELECT');\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation using Tab key. Recorded focus order and verified focus reaches all major interactive elements.\",\n      extractedData: {\n        focusOrder: focusSummary,\n        foundSearchInput: foundSearch,\n        foundCreatePostButton: foundCreatePostBtn,\n        foundThemeToggleButton: foundThemeToggle,\n        foundCommunityLink: foundCommunityLink,\n        foundPostTitleInput: foundPostTitle,\n        foundCommunityDropdown: foundDropdown,\n        loopDetected\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19442,
      "timestamp": "2025-09-15T12:15:40.329Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus body to ensure keyboard navigation starts from the top\n    await page.focus('body');\n\n    // Helper to get currently focused element's description\n    async function getActiveElementInfo() {\n      return await page.evaluate(() => {\n        const ae = document.activeElement;\n        if (!ae) return null;\n        let desc = '';\n        if (ae.id) desc += `#${ae.id} `;\n        if (ae.className) desc += `.${ae.className} `;\n        desc += `tag:${ae.tagName}`;\n        if (ae.getAttribute('placeholder')) desc += ` placeholder=\"${ae.getAttribute('placeholder')}\"`;\n        if (ae.getAttribute('aria-label')) desc += ` aria-label=\"${ae.getAttribute('aria-label')}\"`;\n        if (ae.type) desc += ` type=\"${ae.type}\"`;\n        if (ae.innerText && ae.innerText.trim()) desc += ` text=\"${ae.innerText.trim()}\"`;\n        return desc.trim();\n      });\n    }\n\n    // Store focus info as we tab through elements\n    const focusSequence = [];\n    let foundFirstFocusable = false;\n\n    // Try to tab through first 10 focusable elements, collecting info and taking screenshots\n    for (let i = 1; i <= 10; ++i) {\n      // Press Tab (no modifiers)\n      await page.keyboard.press('Tab');\n      // Wait a bit for focus to move\n      await page.waitForTimeout(200);\n      // Get active element info\n      const info = await getActiveElementInfo();\n      focusSequence.push(info);\n\n      // For the first focusable element, take a screenshot\n      if (!foundFirstFocusable && info) {\n        await page.screenshot({ path: path.join(screenshotsDir, `step_2_first_focusable.png`) });\n        screenshots.push(path.join(screenshotsDir, `step_2_first_focusable.png`));\n        foundFirstFocusable = true;\n      }\n\n      // Take screenshot on key focus elements\n      // If focus lands on search input, create post button, or community link, take additional screenshot\n      if (\n        info &&\n        (info.includes('placeholder=\"Search Reddit\"') ||\n         info.includes('create-post-btn') ||\n         info.includes('community-link'))\n      ) {\n        const fname = `step_focus_${i}_${(info.match(/#(\\w+)/) || ['','nofocus'])[1]}.png`;\n        await page.screenshot({ path: path.join(screenshotsDir, fname) });\n        screenshots.push(path.join(screenshotsDir, fname));\n      }\n    }\n\n    // Also check Shift+Tab (reverse navigation)\n    await page.keyboard.down('Shift');\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const reverseFocusInfo = await getActiveElementInfo();\n    await page.keyboard.up('Shift');\n    await page.screenshot({ path: path.join(screenshotsDir, `step_reverse_tab.png`) });\n    screenshots.push(path.join(screenshotsDir, `step_reverse_tab.png`));\n\n    // Extract the unique focusable elements in order\n    const uniqueFocusSequence = focusSequence.filter(\n      (v, i, a) => v && a.indexOf(v) === i\n    );\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus changes in order. Screenshots taken at key steps.\",\n      extractedData: {\n        focusSequence: uniqueFocusSequence,\n        reverseFocus: reverseFocusInfo\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 36471,
      "timestamp": "2025-09-15T12:15:59.772Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Step 1: Initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the main interactive header input (search)\n    await page.waitForSelector('input[placeholder=\"Search Reddit\"]');\n\n    // Focus should start on the document body\n    await page.keyboard.press('Tab');\n    // After first Tab: Should focus the search input\n    const active1 = await page.evaluate(() => document.activeElement && document.activeElement.getAttribute('placeholder'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_focused.png'));\n\n    // Tab 2: Move to user menu (using aria-label)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active2 = await page.evaluate(() => document.activeElement && document.activeElement.getAttribute('aria-label'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_user_menu_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_user_menu_focused.png'));\n\n    // Tab 3: Theme toggle button (aria-label: Toggle between light and dark theme)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active3 = await page.evaluate(() => document.activeElement && document.activeElement.getAttribute('aria-label'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_theme_toggle_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_theme_toggle_focused.png'));\n\n    // Tab 4: Create button (aria-label: Create a new post)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active4 = await page.evaluate(() => document.activeElement && document.activeElement.getAttribute('aria-label'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_create_btn_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_create_btn_focused.png'));\n\n    // Tab 5: Sidebar - First community button (programming)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    // Try to find the visible text on the active element (community name)\n    const active5 = await page.evaluate(() => {\n      const el = document.activeElement;\n      if (!el) return null;\n      // Try to find .community-name inside the button\n      const nameEl = el.querySelector && el.querySelector('.community-name');\n      return nameEl ? nameEl.textContent : el.textContent.trim();\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_6_sidebar_community1_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_6_sidebar_community1_focused.png'));\n\n    // Tab 6: Sidebar - Second community button (webdev)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active6 = await page.evaluate(() => {\n      const el = document.activeElement;\n      const nameEl = el.querySelector && el.querySelector('.community-name');\n      return nameEl ? nameEl.textContent : el.textContent.trim();\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_7_sidebar_community2_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_7_sidebar_community2_focused.png'));\n\n    // Tab 7: Sidebar - Third community button (javascript)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active7 = await page.evaluate(() => {\n      const el = document.activeElement;\n      const nameEl = el.querySelector && el.querySelector('.community-name');\n      return nameEl ? nameEl.textContent : el.textContent.trim();\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_8_sidebar_community3_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_8_sidebar_community3_focused.png'));\n\n    // Tab 8: Sidebar - Fourth community button (reactjs)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active8 = await page.evaluate(() => {\n      const el = document.activeElement;\n      const nameEl = el.querySelector && el.querySelector('.community-name');\n      return nameEl ? nameEl.textContent : el.textContent.trim();\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_9_sidebar_community4_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_9_sidebar_community4_focused.png'));\n\n    // Tab 9: Main content input (post title)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active9 = await page.evaluate(() => document.activeElement && document.activeElement.getAttribute('placeholder'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_10_post_title_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_10_post_title_focused.png'));\n\n    // Tab 10: Community select\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(250);\n    const active10 = await page.evaluate(() => document.activeElement && document.activeElement.tagName && document.activeElement.tagName.toLowerCase());\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_11_post_community_select_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_11_post_community_select_focused.png'));\n\n    // Prepare extracted data\n    const extractedData = {\n      focusOrder: [\n        { step: 1, description: 'Search input', value: active1 },\n        { step: 2, description: 'User menu', value: active2 },\n        { step: 3, description: 'Theme toggle button', value: active3 },\n        { step: 4, description: 'Create button', value: active4 },\n        { step: 5, description: 'Sidebar community 1', value: active5 },\n        { step: 6, description: 'Sidebar community 2', value: active6 },\n        { step: 7, description: 'Sidebar community 3', value: active7 },\n        { step: 8, description: 'Sidebar community 4', value: active8 },\n        { step: 9, description: 'Post title input', value: active9 },\n        { step: 10, description: 'Post community select', value: active10 }\n      ]\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through all major interactive elements and verified focus order with screenshots and data extraction.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 49909,
      "timestamp": "2025-09-15T12:16:36.243Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 105823,
  "timestamp": "2025-09-15T12:15:40.329Z",
  "savedAt": "2025-09-15T12:17:26.152Z",
  "version": "1.0"
}