{
  "id": "Airbnb_TASK_006_1757928532882",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun의 첫 번째 숙소 listing to appear\n    // Use [data-listing-id='jun_1'] as selector\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Wait for the favorite button inside the listing\n    const favoriteBtnSelector = `${listingSelector} .listing-favorite`;\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get initial favorite button state (e.g., aria-pressed, class, or innerHTML)\n    const initialFavoriteState = await page.$eval(\n      favoriteBtnSelector,\n      el => ({\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.innerText\n      })\n    );\n\n    // Get localStorage favorites before click\n    const initialLocalStorageFavorites = await page.evaluate(() => {\n      // Try common keys for favorites\n      const keys = Object.keys(localStorage);\n      let favorites = null;\n      for (const key of keys) {\n        if (key.toLowerCase().includes('favorite')) {\n          try {\n            favorites = JSON.parse(localStorage.getItem(key));\n            break;\n          } catch {}\n        }\n      }\n      return favorites;\n    });\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // Wait for the button state to change (e.g., aria-pressed toggled, class change, etc)\n    await page.waitForTimeout(500); // Give time for UI update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get updated favorite button state\n    const updatedFavoriteState = await page.$eval(\n      favoriteBtnSelector,\n      el => ({\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.innerText\n      })\n    );\n\n    // Get localStorage favorites after click\n    const updatedLocalStorageFavorites = await page.evaluate(() => {\n      const keys = Object.keys(localStorage);\n      let favorites = null;\n      for (const key of keys) {\n        if (key.toLowerCase().includes('favorite')) {\n          try {\n            favorites = JSON.parse(localStorage.getItem(key));\n            break;\n          } catch {}\n        }\n      }\n      return favorites;\n    });\n\n    // Check if 'jun_1' is present in updated favorites\n    let jun1InFavorites = false;\n    if (Array.isArray(updatedLocalStorageFavorites)) {\n      jun1InFavorites = updatedLocalStorageFavorites.includes('jun_1');\n    } else if (updatedLocalStorageFavorites && typeof updatedLocalStorageFavorites === 'object') {\n      jun1InFavorites = Object.values(updatedLocalStorageFavorites).includes('jun_1') || updatedLocalStorageFavorites['jun_1'] === true;\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) favorite button, verified button state change and localStorage update.\",\n      extractedData: {\n        initialFavoriteState,\n        updatedFavoriteState,\n        initialLocalStorageFavorites,\n        updatedLocalStorageFavorites,\n        jun1InFavorites\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18099,
      "timestamp": "2025-09-15T09:28:52.882Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the listing for Jun's 첫 번째 숙소 (jun_1) to be present\n    // Try using a robust selector: [data-listing-id=\"jun_1\"] .listing-favorite\n    await page.waitForSelector('[data-listing-id=\"jun_1\"] .listing-favorite', { timeout: 5000 });\n\n    // Get the favorite button element handle\n    const favoriteButton = await page.$('[data-listing-id=\"jun_1\"] .listing-favorite');\n    if (!favoriteButton) {\n      throw new Error('Favorite button for jun_1 not found');\n    }\n\n    // Take screenshot before click\n    const beforeClickScreenshot = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: beforeClickScreenshot });\n    screenshots.push(beforeClickScreenshot);\n\n    // Get button state BEFORE click (e.g., aria-pressed, class, or innerHTML)\n    const buttonStateBefore = await page.evaluate(el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        className: el.className,\n        innerHTML: el.innerHTML\n      };\n    }, favoriteButton);\n\n    // Click the favorite button\n    await favoriteButton.click();\n\n    // Wait for possible button state change (e.g., class or aria-pressed toggles)\n    // We'll wait for either aria-pressed or className to change, up to 2s\n    await page.waitForFunction(\n      (selector, prevState) => {\n        const btn = document.querySelector(selector);\n        if (!btn) return false;\n        return (\n          btn.getAttribute('aria-pressed') !== prevState.ariaPressed ||\n          btn.className !== prevState.className ||\n          btn.innerHTML !== prevState.innerHTML\n        );\n      },\n      '[data-listing-id=\"jun_1\"] .listing-favorite',\n      buttonStateBefore,\n      { timeout: 2000 }\n    ).catch(() => {}); // Don't throw if it times out, just in case\n\n    // Take screenshot after click\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // Get button state AFTER click\n    const favoriteButtonAfter = await page.$('[data-listing-id=\"jun_1\"] .listing-favorite');\n    const buttonStateAfter = await page.evaluate(el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        className: el.className,\n        innerHTML: el.innerHTML\n      };\n    }, favoriteButtonAfter);\n\n    // Check localStorage for favorites info\n    // Try to find the key or data structure for favorites\n    // We'll grab all localStorage for inspection\n    const localStorageData = await page.evaluate(() => {\n      const data = {};\n      for (let i = 0; i < localStorage.length; ++i) {\n        const key = localStorage.key(i);\n        data[key] = localStorage.getItem(key);\n      }\n      return data;\n    });\n\n    // See if jun_1 is present in any value in localStorage (usually in a favorites array)\n    let favoritesKey = null;\n    let favoritesArray = [];\n    for (const [key, value] of Object.entries(localStorageData)) {\n      try {\n        const parsed = JSON.parse(value);\n        if (Array.isArray(parsed) && parsed.includes('jun_1')) {\n          favoritesKey = key;\n          favoritesArray = parsed;\n          break;\n        }\n      } catch (e) {\n        // not JSON, skip\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Clicked the favorite button for Jun의 첫 번째 숙소 (jun_1), verified button state change and checked localStorage for favorites update.\",\n      extractedData: {\n        buttonStateBefore,\n        buttonStateAfter,\n        localStorageData,\n        favoritesKey,\n        favoritesArray\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 20198,
      "timestamp": "2025-09-15T09:29:10.981Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the Jun's first listing favorite button\n    // Use attribute selector for data-listing-id and descendant .listing-favorite\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Additional: Ensure the listing is visible (scroll into view)\n    await page.$eval(\"[data-listing-id='jun_1']\", el => el.scrollIntoView());\n\n    // Get pre-click button state (e.g., aria-pressed or class for 'active')\n    const beforeStatus = await page.$eval(\n      favoriteBtnSelector,\n      btn => ({\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        class: btn.className,\n        text: btn.innerText.trim()\n      })\n    );\n\n    // Get pre-click favorites from localStorage\n    const beforeFavorites = await page.evaluate(() => {\n      // Try common keys for favorites in localStorage\n      let favs = null;\n      try {\n        favs = localStorage.getItem('favorites') || localStorage.getItem('airbnb_favorites');\n        if (favs) return JSON.parse(favs);\n      } catch {}\n      // Play with possible window variables\n      if (window.airbnbData && window.airbnbData.currentUser && window.airbnbData.currentUser.favorites) {\n        return window.airbnbData.currentUser.favorites;\n      }\n      return null;\n    });\n\n    // Take screenshot before clicking the button\n    const step2 = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the favorite button (try direct click, then fallback to force)\n    const favBtn = await page.$(favoriteBtnSelector);\n    if (!favBtn) throw new Error(\"Favorite button for jun_1 not found!\");\n    await favBtn.click({ force: true });\n\n    // Wait for button state to change (e.g., class or aria-pressed toggled)\n    await page.waitForTimeout(800); // Wait for UI animation\n    await page.waitForFunction(\n      (selector, prev) => {\n        const btn = document.querySelector(selector);\n        if (!btn) return false;\n        // Check for aria-pressed toggle or className change\n        return btn.getAttribute('aria-pressed') !== prev.ariaPressed ||\n               btn.className !== prev.class;\n      },\n      favoriteBtnSelector,\n      beforeStatus\n    );\n\n    // Take screenshot after clicking\n    const step3 = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Get post-click button state\n    const afterStatus = await page.$eval(\n      favoriteBtnSelector,\n      btn => ({\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        class: btn.className,\n        text: btn.innerText.trim()\n      })\n    );\n\n    // Get post-click favorites from localStorage\n    const afterFavorites = await page.evaluate(() => {\n      let favs = null;\n      try {\n        favs = localStorage.getItem('favorites') || localStorage.getItem('airbnb_favorites');\n        if (favs) return JSON.parse(favs);\n      } catch {}\n      if (window.airbnbData && window.airbnbData.currentUser && window.airbnbData.currentUser.favorites) {\n        return window.airbnbData.currentUser.favorites;\n      }\n      return null;\n    });\n\n    // Compile extracted data for return\n    const extractedData = {\n      beforeButtonState: beforeStatus,\n      afterButtonState: afterStatus,\n      beforeFavorites,\n      afterFavorites,\n      favoritesChanged: JSON.stringify(beforeFavorites) !== JSON.stringify(afterFavorites),\n      buttonStateChanged: JSON.stringify(beforeStatus) !== JSON.stringify(afterStatus),\n      jun_1_in_favorites_before: beforeFavorites && beforeFavorites.includes ? beforeFavorites.includes('jun_1') : null,\n      jun_1_in_favorites_after: afterFavorites && afterFavorites.includes ? afterFavorites.includes('jun_1') : null\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼, 상태 변화와 localStorage 업데이트를 확인함\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 26661,
      "timestamp": "2025-09-15T09:29:31.179Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 64958,
  "timestamp": "2025-09-15T09:28:52.882Z",
  "savedAt": "2025-09-15T09:29:57.840Z",
  "version": "1.0"
}