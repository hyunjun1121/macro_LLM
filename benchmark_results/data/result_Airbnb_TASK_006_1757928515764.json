{
  "id": "Airbnb_TASK_006_1757928515764",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun's first listing's favorite button to be visible\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Get the initial state of the favorite button (e.g., aria-pressed, class, icon, etc.)\n    const initialBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        dataFavorited: el.getAttribute('data-favorited')\n      };\n    });\n\n    // Get initial localStorage favorites (if available)\n    const initialLocalStorage = await page.evaluate(() => {\n      try {\n        // Try common keys for favorites\n        const keys = Object.keys(localStorage);\n        let favoritesKey = keys.find(k => k.toLowerCase().includes('favorite'));\n        if (favoritesKey) {\n          return JSON.parse(localStorage.getItem(favoritesKey));\n        }\n        // Try airbnbData.storageUtils if available\n        if (window.airbnbData && window.airbnbData.storageUtils && window.airbnbData.storageUtils.getFavorites) {\n          return window.airbnbData.storageUtils.getFavorites();\n        }\n      } catch (e) {}\n      return null;\n    });\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n    // Wait for possible UI update (button state change, animation, etc.)\n    await page.waitForTimeout(800);\n\n    // Take screenshot after clicking\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_favorite_click.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_favorite_click.png'));\n\n    // Get the state of the favorite button after click\n    const afterBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        dataFavorited: el.getAttribute('data-favorited')\n      };\n    });\n\n    // Get localStorage favorites after click\n    const afterLocalStorage = await page.evaluate(() => {\n      try {\n        // Try common keys for favorites\n        const keys = Object.keys(localStorage);\n        let favoritesKey = keys.find(k => k.toLowerCase().includes('favorite'));\n        if (favoritesKey) {\n          return JSON.parse(localStorage.getItem(favoritesKey));\n        }\n        // Try airbnbData.storageUtils if available\n        if (window.airbnbData && window.airbnbData.storageUtils && window.airbnbData.storageUtils.getFavorites) {\n          return window.airbnbData.storageUtils.getFavorites();\n        }\n      } catch (e) {}\n      return null;\n    });\n\n    // Extract whether 'jun_1' is in the favorites before and after\n    const wasFavoritedBefore = Array.isArray(initialLocalStorage) && initialLocalStorage.includes('jun_1');\n    const isFavoritedAfter = Array.isArray(afterLocalStorage) && afterLocalStorage.includes('jun_1');\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼, 확인 버튼 상태 변화 및 localStorage 업데이트\",\n      extractedData: {\n        initialBtnState,\n        afterBtnState,\n        initialLocalStorage,\n        afterLocalStorage,\n        wasFavoritedBefore,\n        isFavoritedAfter\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17156,
      "timestamp": "2025-09-15T09:28:35.764Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the listing with data-listing-id='jun_1' to be visible\n    await page.waitForSelector(\"[data-listing-id='jun_1']\", { timeout: 5000 });\n    // Use a combination of attribute and descendant selector for the favorite button\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Get the initial state of the button (check for \"active\" class or aria-pressed, or inner icon)\n    const initialState = await page.$eval(\n      favoriteBtnSelector,\n      btn => ({\n        class: btn.className,\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        innerHTML: btn.innerHTML\n      })\n    );\n\n    // Get initial localStorage favorites (try both direct and via window object)\n    const initialLocalStorage = await page.evaluate(() => {\n      try {\n        return {\n          favorites: JSON.parse(localStorage.getItem('favorites')),\n          airbnbData: window.airbnbData && window.airbnbData.storageUtils\n            ? window.airbnbData.storageUtils.getFavorites()\n            : null\n        };\n      } catch (e) {\n        return { favorites: null, airbnbData: null };\n      }\n    });\n\n    // Screenshot before clicking the favorite button\n    const preClickScreenshot = path.join(screenshotsDir, 'step_2_pre_click.png');\n    await page.screenshot({ path: preClickScreenshot });\n    screenshots.push(preClickScreenshot);\n\n    // Click the favorite button (use force in case of hover dependencies)\n    await page.click(favoriteBtnSelector, { force: true });\n\n    // Wait for possible UI update: class or aria-pressed changes, or heart icon updates\n    await page.waitForTimeout(800);\n\n    // Get the state of the button after clicking\n    const afterState = await page.$eval(\n      favoriteBtnSelector,\n      btn => ({\n        class: btn.className,\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        innerHTML: btn.innerHTML\n      })\n    );\n\n    // Screenshot after clicking\n    const postClickScreenshot = path.join(screenshotsDir, 'step_3_post_click.png');\n    await page.screenshot({ path: postClickScreenshot });\n    screenshots.push(postClickScreenshot);\n\n    // Get localStorage after clicking\n    const afterLocalStorage = await page.evaluate(() => {\n      try {\n        return {\n          favorites: JSON.parse(localStorage.getItem('favorites')),\n          airbnbData: window.airbnbData && window.airbnbData.storageUtils\n            ? window.airbnbData.storageUtils.getFavorites()\n            : null\n        };\n      } catch (e) {\n        return { favorites: null, airbnbData: null };\n      }\n    });\n\n    // Determine if the button state has changed (e.g., active class toggled or aria-pressed switched)\n    const stateChanged =\n      initialState.class !== afterState.class ||\n      initialState.ariaPressed !== afterState.ariaPressed ||\n      initialState.innerHTML !== afterState.innerHTML;\n\n    // Determine if localStorage was updated (e.g., jun_1 removed from favorites)\n    const initialFavoritesArr =\n      (initialLocalStorage.favorites && Array.isArray(initialLocalStorage.favorites))\n        ? initialLocalStorage.favorites\n        : (initialLocalStorage.airbnbData || []);\n    const afterFavoritesArr =\n      (afterLocalStorage.favorites && Array.isArray(afterLocalStorage.favorites))\n        ? afterLocalStorage.favorites\n        : (afterLocalStorage.airbnbData || []);\n\n    const jun1WasFavoritedInitially = initialFavoritesArr.includes('jun_1');\n    const jun1IsFavoritedNow = afterFavoritesArr.includes('jun_1');\n\n    return {\n      success: stateChanged && jun1WasFavoritedInitially && !jun1IsFavoritedNow,\n      action:\n        \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, 버튼 상태 변화와 localStorage 업데이트를 확인함\",\n      extractedData: {\n        initialButtonState: initialState,\n        afterButtonState: afterState,\n        initialFavorites: initialFavoritesArr,\n        afterFavorites: afterFavoritesArr,\n        jun1WasFavoritedInitially,\n        jun1IsFavoritedNow,\n        stateChanged\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 30332,
      "timestamp": "2025-09-15T09:28:52.920Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for the listing with data-listing-id 'jun_1' to be present\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Wait for the favorite button inside the listing\n    // Try alternative selector: favoriting button may have aria-label or be a button or <span> with heart icon\n    const favoriteBtnSelector = `${listingSelector} .listing-favorite, ${listingSelector} [aria-label*=\"avorite\"], ${listingSelector} button[title*=\"avorite\"], ${listingSelector} .fa-heart`;\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Get the favorite button element handle\n    const favoriteBtn = await page.$(favoriteBtnSelector);\n\n    // Take screenshot before clicking favorite\n    const preClickShot = path.join(screenshotsDir, 'step_2_pre_favorite_click.png');\n    await page.screenshot({ path: preClickShot });\n    screenshots.push(preClickShot);\n\n    // Extract the favorite button state BEFORE click (e.g., class or aria-pressed)\n    const preFavState = await page.evaluate(el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerHTML: el.innerHTML\n      };\n    }, favoriteBtn);\n\n    // Click the favorite button\n    await favoriteBtn.click();\n\n    // Wait for the button state to change (either className/aria-pressed/innerHTML)\n    await page.waitForFunction(\n      (selector, prevClass, prevAria, prevInner) => {\n        const btn = document.querySelector(selector);\n        if (!btn) return false;\n        return (\n          btn.className !== prevClass ||\n          btn.getAttribute('aria-pressed') !== prevAria ||\n          btn.innerHTML !== prevInner\n        );\n      },\n      {},\n      favoriteBtnSelector,\n      preFavState.class,\n      preFavState.ariaPressed,\n      preFavState.innerHTML\n    );\n\n    // Take screenshot after clicking favorite\n    const postClickShot = path.join(screenshotsDir, 'step_3_post_favorite_click.png');\n    await page.screenshot({ path: postClickShot });\n    screenshots.push(postClickShot);\n\n    // Extract the favorite button state AFTER click\n    const postFavState = await page.evaluate(selector => {\n      const btn = document.querySelector(selector);\n      if (!btn) return null;\n      return {\n        class: btn.className,\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        innerHTML: btn.innerHTML\n      };\n    }, favoriteBtnSelector);\n\n    // Check localStorage for favorites\n    // Try extracting several possible key names\n    const favoritesKeys = [\n      'favorites',\n      'airbnb-favorites',\n      'userFavorites',\n      'favoriteListings'\n    ];\n\n    let localStorageFavorites = null;\n    for (const key of favoritesKeys) {\n      // eslint-disable-next-line no-await-in-loop\n      const val = await page.evaluate(k => window.localStorage.getItem(k), key);\n      if (val) {\n        localStorageFavorites = { key, value: val };\n        break;\n      }\n    }\n\n    // Also try extracting favorites via site code if available (window.airbnbData, etc)\n    let airbnbDataFavorites = null;\n    if (!localStorageFavorites) {\n      airbnbDataFavorites = await page.evaluate(() => {\n        if (window.airbnbData && window.airbnbData.currentUser && window.airbnbData.currentUser.favorites) {\n          return window.airbnbData.currentUser.favorites;\n        }\n        return null;\n      });\n    }\n\n    // Final extracted favorites array\n    let extractedFavorites = null;\n    if (localStorageFavorites) {\n      try {\n        extractedFavorites = JSON.parse(localStorageFavorites.value);\n      } catch {\n        extractedFavorites = localStorageFavorites.value;\n      }\n    } else if (airbnbDataFavorites) {\n      extractedFavorites = airbnbDataFavorites;\n    }\n\n    // Check if 'jun_1' is present in the favorites after toggling\n    const isJun1Favorited = Array.isArray(extractedFavorites)\n      ? extractedFavorites.includes('jun_1')\n      : (typeof extractedFavorites === 'string' && extractedFavorites.includes('jun_1'));\n\n    // Compose the result\n    return {\n      success: true,\n      action: \"Clicked the favorite button for Jun의 첫 번째 숙소 (jun_1) and verified button state change and favorites update in localStorage or site state.\",\n      extractedData: {\n        favoriteBtnPreClick: preFavState,\n        favoriteBtnPostClick: postFavState,\n        localStorageFavorites,\n        airbnbDataFavorites,\n        extractedFavorites,\n        isJun1Favorited\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 39356,
      "timestamp": "2025-09-15T09:29:23.252Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 86844,
  "timestamp": "2025-09-15T09:28:35.764Z",
  "savedAt": "2025-09-15T09:30:02.608Z",
  "version": "1.0"
}