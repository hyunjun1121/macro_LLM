{
  "id": "Amazon_T010_1757931009906",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to be visible\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n    // Open the first product detail modal (assume clicking the card opens modal)\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the product detail modal to appear\n    // Try common modal selectors\n    let modalSelector = '.modal, .product-modal, .product-detail-modal, .modal-content';\n    await page.waitForSelector(modalSelector, { timeout: 5000 });\n\n    // Take screenshot after modal opens\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // Wait for the 'Add to Wish List' button inside the modal\n    // Try several selector strategies\n    let addToWishlistButton = await page.$('.add-to-wishlist');\n    if (!addToWishlistButton) {\n      // Try button with text\n      addToWishlistButton = await page.$('button:has-text(\"Add to Wish List\")');\n    }\n    if (!addToWishlistButton) {\n      // Try xpath as fallback\n      const [btn] = await page.$x(\"//button[contains(., 'Wish List') or contains(., 'wishlist')]\");\n      addToWishlistButton = btn;\n    }\n    if (!addToWishlistButton) throw new Error(\"Add to Wish List button not found in modal\");\n\n    // Click the 'Add to Wish List' button\n    await addToWishlistButton.click();\n\n    // Wait for some visual confirmation (e.g., success message, button disabled, etc.)\n    // Try to detect a toast, confirmation, or button state change\n    let confirmationText = '';\n    try {\n      // Wait for a toast or confirmation message\n      await page.waitForSelector('.toast, .wishlist-confirmation, .alert-success', { timeout: 3000 });\n      const confirmationEl = await page.$('.toast, .wishlist-confirmation, .alert-success');\n      if (confirmationEl) {\n        confirmationText = await confirmationEl.textContent();\n      }\n    } catch (e) {\n      // If no toast, check if button changed (e.g., disabled or text changed)\n      const btnText = await addToWishlistButton.textContent();\n      if (btnText && btnText.toLowerCase().includes('added')) {\n        confirmationText = btnText.trim();\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_added_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_added_to_wishlist.png'));\n\n    // Extract the product title from the modal for verification\n    let productTitle = '';\n    try {\n      // Try common selectors for title in modal\n      const titleEl = await page.$('.modal h2, .modal .product-title, .product-detail-modal h2, .modal-content h2');\n      if (titleEl) {\n        productTitle = (await titleEl.textContent())?.trim() || '';\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 54218,
      "timestamp": "2025-09-15T10:10:09.907Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1Path = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1Path });\n    screenshots.push(step1Path);\n\n    // Wait for first product card to be visible (use alternative selector strategies)\n    // Try to find by product image alt text (iPhone) or fallback to .product-card\n    let productCard;\n    try {\n      // Try locating by product image alt attribute (contains \"iPhone\" for the first product)\n      await page.waitForSelector('img[alt*=\"iPhone\"]', { timeout: 3500 });\n      productCard = await page.$('img[alt*=\"iPhone\"]');\n    } catch {\n      // Fallback: first .product-card\n      await page.waitForSelector('.product-card', { timeout: 3500 });\n      productCard = (await page.$$('.product-card'))[0];\n    }\n\n    // Scroll into view and click to open product detail modal/dialog (try clicking image or card)\n    if (productCard) {\n      await productCard.scrollIntoViewIfNeeded();\n      await productCard.click({ force: true });\n    } else {\n      throw new Error(\"Could not locate first product card\");\n    }\n\n    // Wait for the modal/dialog to appear (look for dialog with product title or close ('Ã—') button)\n    await page.waitForSelector('div[role=\"dialog\"], .modal, .modal-content, text=\"Apple iPhone 15 Pro Max\"', { timeout: 5000 });\n\n    // Take screenshot after modal opens\n    const step2Path = path.join(screenshotsDir, 'step_2_product_modal.png');\n    await page.screenshot({ path: step2Path });\n    screenshots.push(step2Path);\n\n    // Locate the \"Add to Wish List\" button inside modal/dialog\n    // Try various selectors: text, aria-label, or class\n    let wishlistBtn = null;\n    const candidateSelectors = [\n      // Exact text\n      'button:has-text(\"Add to Wish List\")',\n      // Partial text\n      'button:has-text(\"Wish List\")',\n      // Class-based (common naming)\n      '.add-to-wishlist',\n      // Aria-label\n      'button[aria-label*=\"wish\"]',\n      // XPath as fallback (button containing \"Wish\")\n      '//button[contains(., \"Wish\")]'\n    ];\n    for (const sel of candidateSelectors) {\n      try {\n        if (sel.startsWith('//')) {\n          wishlistBtn = await page.$(`xpath=${sel}`);\n        } else {\n          wishlistBtn = await page.$(sel);\n        }\n        if (wishlistBtn) break;\n      } catch (e) {}\n    }\n    if (!wishlistBtn) throw new Error(\"Could not find 'Add to Wish List' button in modal\");\n\n    // Scroll into view and click the button\n    await wishlistBtn.scrollIntoViewIfNeeded();\n    await wishlistBtn.click();\n\n    // Wait for confirmation/feedback (\"Added to Wish List\" or icon state change)\n    // Try for a toast, success message, or button state change\n    let wishlistFeedback = \"\";\n    try {\n      // Look for a confirmation message near the button or in modal\n      await page.waitForSelector('text=Added to Wish List, .wishlist-confirmation, .toast-success, .wishlist-added', { timeout: 4000 });\n      wishlistFeedback = await page.textContent('text=Added to Wish List, .wishlist-confirmation, .toast-success, .wishlist-added');\n    } catch {\n      // If no message, check if the button changed (e.g., to \"Added\")\n      try {\n        const btnText = await wishlistBtn.textContent();\n        if (btnText && btnText.toLowerCase().includes('added')) {\n          wishlistFeedback = btnText.trim();\n        }\n      } catch {}\n    }\n\n    // Take screenshot after adding to wishlist\n    const step3Path = path.join(screenshotsDir, 'step_3_added_to_wishlist.png');\n    await page.screenshot({ path: step3Path });\n    screenshots.push(step3Path);\n\n    // Extracted data to verify\n    const extractedData = {\n      wishlistFeedback: wishlistFeedback ? wishlistFeedback : null\n    };\n\n    return {\n      success: true,\n      action: \"Opened the first product modal and clicked 'Add to Wish List' using alternative selectors and confirmed feedback.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51523,
      "timestamp": "2025-09-15T10:11:04.125Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear (try attribute-based selector)\n    const productCardSelector = '[class*=product-card]';\n    await page.waitForSelector(productCardSelector, { timeout: 5000 });\n\n    // Take screenshot before interacting with products\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_cards_visible.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_cards_visible.png'));\n\n    // Find the first product card using XPath for robustness\n    const [firstProduct] = await page.$x(\"(//*[contains(@class, 'product-card')])[1]\");\n    if (!firstProduct) throw new Error(\"No product card found\");\n\n    // Click the first product card to open its modal/detail\n    await firstProduct.click();\n\n    // Wait for the product detail modal/dialog (try modal by role or aria-label as well)\n    // Try to find a visible modal/dialog that appears after clicking\n    let modalSelector;\n    // Common modal patterns\n    const modalSelectors = [\n      '[role=\"dialog\"]',\n      '.modal',\n      '.product-modal',\n      '.product-detail-modal',\n      '[aria-modal=\"true\"]'\n    ];\n    for (const sel of modalSelectors) {\n      if (await page.$(sel)) {\n        modalSelector = sel;\n        break;\n      }\n    }\n    if (!modalSelector) {\n      // Fallback: wait for any new visible element containing \"Add to Wish List\"\n      await page.waitForSelector(\"text='Add to Wish List'\", { timeout: 4000 });\n      modalSelector = \"text='Add to Wish List'\";\n    } else {\n      await page.waitForSelector(modalSelector, { timeout: 4000 });\n    }\n\n    // Take screenshot after opening modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n\n    // Locate the 'Add to Wish List' button using alternative strategies:\n    // Try button with text, then with class\n    let wishlistBtn = await page.$(\"button:has-text('Add to Wish List')\");\n    if (!wishlistBtn) {\n      wishlistBtn = await page.$(\".add-to-wishlist\");\n    }\n    // Fallback: try XPath with button containing the wish text\n    if (!wishlistBtn) {\n      const [btn] = await page.$x(\"//button[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'wish')]\");\n      wishlistBtn = btn;\n    }\n\n    if (!wishlistBtn) throw new Error(\"Could not find 'Add to Wish List' button\");\n\n    // Click the 'Add to Wish List' button\n    await wishlistBtn.click();\n\n    // Wait for a confirmation of addition (could be a toast, alert, or button state change)\n    // Try to find a success message, or check if button gets disabled, or its text changes\n    let confirmationText = '';\n    const possibleConfirmSelectors = [\n      \"text='Added to Wish List'\",\n      \".wishlist-confirmation\",\n      \".toast-success\",\n      \".alert-success\"\n    ];\n    let confirmationFound = false;\n    for (const sel of possibleConfirmSelectors) {\n      try {\n        await page.waitForSelector(sel, { timeout: 2500 });\n        confirmationText = await page.$eval(sel, el => el.textContent);\n        confirmationFound = true;\n        break;\n      } catch (e) { /* Not found, try next */ }\n    }\n    if (!confirmationFound) {\n      // Fallback: check if button text changed or became disabled\n      const btnText = await wishlistBtn.textContent();\n      const btnDisabled = await wishlistBtn.getAttribute('disabled');\n      if (btnText && btnText.toLowerCase().includes('added')) {\n        confirmationText = btnText;\n        confirmationFound = true;\n      } else if (btnDisabled !== null) {\n        confirmationText = 'Button disabled after click';\n        confirmationFound = true;\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_wishlist_added.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_wishlist_added.png'));\n\n    // Extract product title from modal (for verification)\n    let productTitle = '';\n    // Try common modal header selectors\n    const titleSelectors = [\n      `${modalSelector} h1`,\n      `${modalSelector} h2`,\n      `${modalSelector} .product-title`,\n      \"h1.product-title\",\n      \".modal h1\",\n      \".modal h2\"\n    ];\n    for (const sel of titleSelectors) {\n      try {\n        productTitle = await page.$eval(sel, el => el.textContent.trim());\n        if (productTitle) break;\n      } catch (e) { /* Try next */ }\n    }\n    // Fallback: extract title from product card before click\n    if (!productTitle) {\n      try {\n        productTitle = await firstProduct.$eval('h2', el => el.textContent.trim());\n      } catch (e) { /* Ignore */ }\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product's detail modal and added it to the wish list using robust selectors and confirmation detection.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51716,
      "timestamp": "2025-09-15T10:11:55.648Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 157458,
  "timestamp": "2025-09-15T10:10:09.906Z",
  "savedAt": "2025-09-15T10:12:47.364Z",
  "version": "1.0"
}