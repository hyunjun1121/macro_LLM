{
  "id": "reddit_Sheet1_1757928345657_xz6pr_1757935646047",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345657_xz6pr",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field using Tab key\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab');\n    await page.waitForSelector('#postTitle');\n    \n    // Take screenshot after focusing on the post title input\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_post_title_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_post_title_focused.png'));\n\n    // Focus on the post title input field\n    await page.focus('#postTitle');\n    await page.keyboard.press('Tab');\n    await page.waitForSelector('.create-post-btn');\n\n    // Take screenshot after focusing on the create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_post_button_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_create_post_button_focused.png'));\n\n    // Verify focus on the create post button\n    const isCreatePostButtonFocused = await page.evaluate(() => {\n      const button = document.querySelector('.create-post-btn');\n      return document.activeElement === button;\n    });\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: { isCreatePostButtonFocused },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15230,
      "timestamp": "2025-09-15T11:27:26.047Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field and check navigation\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab'); // Navigate to the create post button\n    await page.waitForSelector('.create-post-btn');\n    \n    // Take a screenshot after focusing on create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_focus_create_post.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_focus_create_post.png'));\n\n    // Verify the focus is on the create post button\n    const isCreatePostButtonFocused = await page.evaluate(() => document.activeElement.classList.contains('create-post-btn'));\n    \n    // Navigate through community buttons\n    await page.keyboard.press('Tab'); // Navigate to first community button\n    for (let i = 0; i < 5; i++) { // Navigate through a few community buttons\n      await page.keyboard.press('Tab');\n    }\n    await page.waitForSelector('.community-link');\n    \n    // Take a screenshot after navigating through community buttons\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_focus_community_buttons.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_focus_community_buttons.png'));\n\n    // Verify focus on community button\n    const isCommunityButtonFocused = await page.evaluate(() => document.activeElement.classList.contains('community-link'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus.\",\n      extractedData: {\n        isCreatePostButtonFocused,\n        isCommunityButtonFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16368,
      "timestamp": "2025-09-15T11:27:41.277Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the Search input field and take a screenshot\n    await page.waitForSelector('#searchInput');\n    await page.click('#searchInput');\n    await page.keyboard.press('Tab');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_focus.png'));\n\n    // Focus on the Create Post button and take a screenshot\n    await page.waitForSelector('button.create-post-btn');\n    await page.keyboard.press('Tab');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_post_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_create_post_focus.png'));\n\n    // Focus on the community buttons and take a screenshot\n    const communityButtons = await page.$$('.community-link');\n    for (let i = 0; i < communityButtons.length; i++) {\n      await page.keyboard.press('Tab');\n      await page.screenshot({ path: path.join(screenshotsDir, `step_4_community_focus_${i + 1}.png`) });\n      screenshots.push(path.join(screenshotsDir, `step_4_community_focus_${i + 1}.png`));\n    }\n\n    // Validate focus on last button and take screenshot\n    await page.keyboard.press('Tab');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_final_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_final_focus.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18234,
      "timestamp": "2025-09-15T11:27:57.645Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 49832,
  "timestamp": "2025-09-15T11:27:26.047Z",
  "savedAt": "2025-09-15T11:28:15.879Z",
  "version": "1.0"
}