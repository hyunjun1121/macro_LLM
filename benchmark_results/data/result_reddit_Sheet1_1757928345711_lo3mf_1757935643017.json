{
  "id": "reddit_Sheet1_1757928345711_lo3mf_1757935643017",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345711_lo3mf",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the search input and focus on it\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab');\n\n    // Verify focus moves to the theme toggle button\n    await page.waitForSelector('button.theme-toggle-btn');\n    const themeToggleButton = await page.$('button.theme-toggle-btn');\n    const isFocused = await themeToggleButton.evaluate(el => document.activeElement === el);\n    if (isFocused) {\n      await page.screenshot({ path: path.join(screenshotsDir, 'step_2_theme_toggle_focused.png') });\n      screenshots.push(path.join(screenshotsDir, 'step_2_theme_toggle_focused.png'));\n    }\n\n    // Press Tab to navigate to the create post button\n    await page.keyboard.press('Tab');\n\n    // Verify focus moves to the create post button\n    await page.waitForSelector('button.create-post-btn');\n    const createPostButton = await page.$('button.create-post-btn');\n    const isCreatePostFocused = await createPostButton.evaluate(el => document.activeElement === el);\n    if (isCreatePostFocused) {\n      await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_post_focused.png') });\n      screenshots.push(path.join(screenshotsDir, 'step_3_create_post_focused.png'));\n    }\n\n    // Continue navigating through community buttons\n    const communityButtons = await page.$$('button.community-link');\n    for (let button of communityButtons) {\n      await page.keyboard.press('Tab');\n      const isFocused = await button.evaluate(el => document.activeElement === el);\n      if (isFocused) {\n        await page.screenshot({ path: path.join(screenshotsDir, 'step_4_community_button_focused.png') });\n        screenshots.push(path.join(screenshotsDir, 'step_4_community_button_focused.png'));\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19150,
      "timestamp": "2025-09-15T11:27:23.017Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Use Tab key to navigate through interactive elements\n    const interactiveElements = [\n      '#searchInput', // Search Input\n      '.theme-toggle-btn', // Theme Toggle Button\n      '.create-post-btn', // Create Post Button\n      '.community-link', // Community Links\n      '.quick-action-btn' // Quick Action Buttons\n    ];\n\n    for (const selector of interactiveElements) {\n      await page.waitForSelector(selector);\n      await page.focus(selector); // Focus on the element\n      await page.keyboard.press('Tab'); // Navigate to the next element\n      await page.screenshot({ path: path.join(screenshotsDir, `step_focused_on_${selector.replace('.', '')}.png`) });\n      screenshots.push(path.join(screenshotsDir, `step_focused_on_${selector.replace('.', '')}.png`));\n    }\n\n    // Final check to ensure focus is on last interactive element\n    const isFocused = await page.evaluate(() => document.activeElement.classList.contains('quick-action-btn'));\n    if (!isFocused) {\n      throw new Error('Failed to focus on the last interactive element.');\n    }\n\n    return {\n      success: true,\n      action: \"Successfully navigated through interactive elements using Tab key.\",\n      extractedData: { focusedElement: document.activeElement.outerHTML },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17118,
      "timestamp": "2025-09-15T11:27:42.167Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Use Tab key to navigate through interactive elements\n    // Focus on the search input field\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab');\n\n    // Verify focus on the theme toggle button\n    await page.waitForSelector('button.theme-toggle-btn');\n    const isThemeToggleFocused = await page.evaluate(() => document.activeElement.classList.contains('theme-toggle-btn'));\n    if (!isThemeToggleFocused) throw new Error('Theme toggle button not focused');\n\n    // Take screenshot after focusing on theme toggle button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_theme_toggle_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_theme_toggle_focused.png'));\n\n    // Press Tab to navigate to create post button\n    await page.keyboard.press('Tab');\n\n    // Verify focus on the create post button\n    await page.waitForSelector('button.create-post-btn');\n    const isCreatePostFocused = await page.evaluate(() => document.activeElement.classList.contains('create-post-btn'));\n    if (!isCreatePostFocused) throw new Error('Create post button not focused');\n\n    // Take screenshot after focusing on create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_post_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_create_post_focused.png'));\n\n    // Continue navigating through community buttons\n    const communityButtons = await page.$$('button.community-link');\n    for (const button of communityButtons) {\n      await button.focus();\n      await page.keyboard.press('Tab');\n      const isCommunityFocused = await page.evaluate(el => document.activeElement === el, button);\n      if (!isCommunityFocused) throw new Error('Community button not focused');\n    }\n\n    // Take final screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_final.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_final.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18893,
      "timestamp": "2025-09-15T11:27:59.285Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 55161,
  "timestamp": "2025-09-15T11:27:23.017Z",
  "savedAt": "2025-09-15T11:28:18.178Z",
  "version": "1.0"
}