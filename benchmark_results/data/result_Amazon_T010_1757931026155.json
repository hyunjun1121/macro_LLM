{
  "id": "Amazon_T010_1757931026155",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to be visible\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n    // Open the first product detail modal (simulate click)\n    const firstProduct = await page.$('.product-card');\n    if (!firstProduct) throw new Error('No product card found');\n    await firstProduct.click();\n\n    // Wait for the modal/dialog to appear (look for .modal or .product-modal or similar)\n    // Try several selectors for robustness\n    let modalSelector = null;\n    const possibleModalSelectors = [\n      '.modal',\n      '.product-modal',\n      '.product-detail-modal',\n      '.product-modal-content',\n      '[role=\"dialog\"]'\n    ];\n    for (const sel of possibleModalSelectors) {\n      if (await page.$(sel)) {\n        modalSelector = sel;\n        break;\n      }\n    }\n    if (!modalSelector) {\n      // Fallback: wait for .add-to-wishlist to appear (assume it's in the modal)\n      await page.waitForSelector('.add-to-wishlist', { timeout: 5000 });\n    } else {\n      await page.waitForSelector(modalSelector, { timeout: 5000 });\n    }\n\n    // Wait for the 'Add to Wish List' button to be visible\n    await page.waitForSelector('.add-to-wishlist', { timeout: 5000 });\n\n    // Take screenshot before clicking 'Add to Wish List'\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_modal_open.png'));\n\n    // Click the 'Add to Wish List' button\n    const wishlistBtn = await page.$('.add-to-wishlist');\n    if (!wishlistBtn) throw new Error('Add to Wish List button not found');\n    await wishlistBtn.click();\n\n    // Wait for some confirmation (e.g., button changes, toast, or wishlist count updates)\n    // Try to detect a success message or state change\n    let confirmationText = '';\n    let confirmationSelector = null;\n    // Common patterns: success message, button text changes, etc.\n    const possibleConfirmSelectors = [\n      '.wishlist-success',\n      '.toast-success',\n      '.add-to-wishlist.added',\n      '.wishlist-confirmation',\n      '.add-to-wishlist[disabled]',\n      '.add-to-wishlist:has-text(\"Added\")'\n    ];\n    for (const sel of possibleConfirmSelectors) {\n      try {\n        await page.waitForSelector(sel, { timeout: 3000 });\n        confirmationSelector = sel;\n        break;\n      } catch (e) {\n        // continue\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_added_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_added_to_wishlist.png'));\n\n    // Extract product title for verification\n    let productTitle = '';\n    // Try to get from modal or product detail\n    if (modalSelector) {\n      const titleEl = await page.$(`${modalSelector} .product-title`) || await page.$(`${modalSelector} h2`);\n      if (titleEl) {\n        productTitle = (await titleEl.textContent())?.trim();\n      }\n    }\n    if (!productTitle) {\n      // Fallback: from first product card\n      const titleEl = await firstProduct.$('.product-title') || await firstProduct.$('h2');\n      if (titleEl) {\n        productTitle = (await titleEl.textContent())?.trim();\n      }\n    }\n\n    // Try to extract confirmation message if available\n    if (confirmationSelector) {\n      const confirmEl = await page.$(confirmationSelector);\n      if (confirmEl) {\n        confirmationText = (await confirmEl.textContent())?.trim();\n      }\n    } else {\n      // Try to see if button text changed\n      const btnText = (await wishlistBtn.textContent())?.trim();\n      if (btnText && btnText.toLowerCase().includes('added')) {\n        confirmationText = btnText;\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        productTitle,\n        wishlistConfirmation: confirmationText || 'No explicit confirmation message found'\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 47871,
      "timestamp": "2025-09-15T10:10:26.155Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the first product card using a generic selector\n    // Try for '.product-card' or fallback to a possible grid/list item\n    let productCardSelector = '.product-card';\n    await page.waitForSelector(productCardSelector, { timeout: 5000 });\n\n    // Use nth-of-type to ensure first product (in case :first-child doesn't work)\n    const firstProduct = await page.$(`${productCardSelector}:nth-of-type(1)`);\n    if (!firstProduct) throw new Error('First product card not found');\n\n    // Try clicking on the product image or title to open modal\n    let detailTrigger = await firstProduct.$('.product-image, .card-img-top, img, .product-title, h2, h3, .title');\n    if (!detailTrigger) {\n      // Fallback: click the card itself\n      detailTrigger = firstProduct;\n    }\n    await detailTrigger.click();\n\n    // Wait for modal/dialog or detail overlay to appear\n    // Try common modal/dialog selectors\n    let detailModalSelector = '.modal, .product-modal, .product-detail, [role=\"dialog\"], .product-details-overlay';\n    await page.waitForSelector(detailModalSelector, { timeout: 5000 });\n\n    // Take screenshot after opening modal\n    const step2 = path.join(screenshotsDir, 'step_2_detail_modal.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Try to locate the \"Add to Wish List\" button using several strategies\n    // 1. Text content\n    let wishlistBtn = await page.$(`${detailModalSelector} button:has-text(\"Wish List\"), ${detailModalSelector} button:has-text(\"Add to Wish List\"), ${detailModalSelector} .add-to-wishlist, ${detailModalSelector} [aria-label*=\"wish\"], ${detailModalSelector} [title*=\"wish\"]`);\n    if (!wishlistBtn) {\n      // Fallback: Try any visible button with a heart icon\n      wishlistBtn = await page.$(`${detailModalSelector} button:has(i.fa-heart), ${detailModalSelector} button:has(svg[aria-label*=\"wish\"]), ${detailModalSelector} button[aria-label*=\"wish\"]`);\n    }\n    if (!wishlistBtn) throw new Error('Add to Wish List button not found in modal');\n\n    // Click the \"Add to Wish List\" button\n    await wishlistBtn.click();\n\n    // Wait for some confirmation (e.g., toast, button changed, or disabled)\n    // Try to locate a confirmation element\n    let confirmationText = '';\n    try {\n      // Wait for either a toast, a success message, or the button to become disabled/changed\n      await page.waitForTimeout(900); // slight delay for UI update\n      // Try to find a toast/alert\n      const toast = await page.$('.toast, .alert-success, .wishlist-confirmation, .notification-success');\n      if (toast) {\n        confirmationText = await toast.innerText();\n      } else {\n        // Or check if button changed to \"Added\" or is disabled\n        const btnText = await wishlistBtn.innerText();\n        if (/added|in wish/i.test(btnText)) confirmationText = btnText;\n        const isDisabled = await wishlistBtn.getAttribute('disabled');\n        if (isDisabled) confirmationText = 'Button disabled after click';\n      }\n    } catch (e) {\n      // Ignore confirmation failure, proceed\n    }\n\n    // Take screenshot after adding to wishlist\n    const step3 = path.join(screenshotsDir, 'step_3_added_to_wishlist.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    const titleElem = await page.$(`${detailModalSelector} .product-title, ${detailModalSelector} h2, ${detailModalSelector} h3, ${detailModalSelector} .title`);\n    if (titleElem) {\n      productTitle = (await titleElem.innerText()).trim();\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product's detail modal and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51200,
      "timestamp": "2025-09-15T10:11:14.026Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card (using alternative selector: [data-product-id], fallback to .product-card)\n    let firstProductHandle = await page.$('[data-product-id]');\n    if (!firstProductHandle) {\n      // fallback to .product-card\n      await page.waitForSelector('.product-card', { timeout: 5000 });\n      firstProductHandle = (await page.$$('.product-card'))[0];\n    }\n\n    if (!firstProductHandle) throw new Error('Could not locate first product card');\n\n    // Take screenshot before opening the modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_card.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_card.png'));\n\n    // Try clicking in multiple ways: click on image or quickview/details button if available\n    // Priority: image > button with \"Details\" or \"Quick\" text > whole card\n    let detailClicked = false;\n    const img = await firstProductHandle.$('img');\n    if (img) {\n      await img.click();\n      detailClicked = true;\n    } else {\n      // Try to find a button/link that opens modal\n      const quickViewBtn = await firstProductHandle.$('button:has-text(\"Details\"), button:has-text(\"Quick\"), a:has-text(\"Details\"), a:has-text(\"Quick\")');\n      if (quickViewBtn) {\n        await quickViewBtn.click();\n        detailClicked = true;\n      }\n    }\n    if (!detailClicked) {\n      // As last resort, click the whole card\n      await firstProductHandle.click();\n    }\n\n    // Wait for modal/dialog/expanded product to show\n    // Try multiple selectors for modal/drawer/dialog\n    let modalSelector = '.product-modal, .modal-content, .product-detail, .MuiDialog-root, .ant-modal-content, [role=\"dialog\"], .product-details-modal, .product-quickview';\n    await page.waitForSelector(modalSelector, { timeout: 7000 });\n\n    // Take screenshot of modal open\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_open.png'));\n\n    // Try to find the 'Add to Wish List' button in the modal/dialog\n    // Try text, aria-label, and class\n    const wishlistSelectors = [\n      'button:has-text(\"Wish List\")',\n      'button:has-text(\"Add to Wish List\")',\n      'button[aria-label*=\"Wish\"]',\n      '.add-to-wishlist',\n      'button[title*=\"Wish\"]',\n      'button[data-action*=\"wishlist\"]',\n      'button[aria-label*=\"wish\"]'\n    ];\n    let wishlistBtn = null;\n    for (const sel of wishlistSelectors) {\n      wishlistBtn = await page.$(`${modalSelector} ${sel}`);\n      if (wishlistBtn) break;\n    }\n    if (!wishlistBtn) {\n      // Fallback: global search\n      for (const sel of wishlistSelectors) {\n        wishlistBtn = await page.$(sel);\n        if (wishlistBtn) break;\n      }\n    }\n    if (!wishlistBtn) throw new Error('Could not locate Add to Wish List button');\n\n    // Click the wishlist button\n    await wishlistBtn.click();\n\n    // Wait for confirmation or UI change (try to find a confirmation message, icon change, or disabled state)\n    let confirmationText = null;\n    try {\n      await page.waitForSelector(\n        [\n          'text=Added to Wish List',\n          'text=Added!',\n          '.wishlist-confirmation',\n          '.wishlist-added',\n          '[aria-label*=\"added to wish\"]',\n          'button.add-to-wishlist[disabled]',\n          '.add-to-wishlist.added'\n        ].join(','),\n        { timeout: 4000 }\n      );\n      // Extract confirmation\n      const confirmationElement = await page.$(\n        [\n          '.wishlist-confirmation',\n          '.wishlist-added',\n          '[aria-label*=\"added to wish\"]',\n          'text=Added to Wish List',\n          'text=Added!'\n        ].join(',')\n      );\n      if (confirmationElement) {\n        confirmationText = await confirmationElement.innerText().catch(() => null);\n      }\n    } catch (e) {\n      // No explicit confirmation, try to infer from UI state (e.g., button disabled or changed class)\n      const btnClass = await page.evaluate(el => el.className, wishlistBtn);\n      if (btnClass && btnClass.toLowerCase().includes('added')) {\n        confirmationText = 'Wish list button changed state to added';\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_wishlist_added.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_wishlist_added.png'));\n\n    // Optionally, extract product title from the modal\n    let productTitle = null;\n    try {\n      const titleHandle = await page.$(\n        [\n          `${modalSelector} h1`,\n          `${modalSelector} .product-title`,\n          `${modalSelector} h2`,\n          `${modalSelector} [data-testid=\"product-title\"]`\n        ].join(',')\n      );\n      if (titleHandle) {\n        productTitle = await titleHandle.innerText();\n      }\n    } catch {}\n\n    return {\n      success: true,\n      action: \"Opened the detail modal for the first product and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        confirmation: confirmationText || 'No explicit confirmation found',\n        productTitle: productTitle || 'Not found'\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 53533,
      "timestamp": "2025-09-15T10:12:05.226Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 152604,
  "timestamp": "2025-09-15T10:10:26.155Z",
  "savedAt": "2025-09-15T10:12:58.759Z",
  "version": "1.0"
}