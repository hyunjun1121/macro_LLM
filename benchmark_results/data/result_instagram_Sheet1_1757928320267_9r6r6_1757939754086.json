{
  "id": "instagram_Sheet1_1757928320267_9r6r6_1757939754086",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320267_9r6r6",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post in the feed to be visible\n    // Try multiple selector strategies for robustness\n    const firstPostSelector = '.posts .post:first-child';\n    await page.waitForSelector(firstPostSelector, { timeout: 5000 });\n\n    // Find the like button icon within the first post\n    // The expected selector is: .post:first-child .like-btn i\n    // But let's ensure we find the button and icon robustly\n    const likeBtnIconSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(likeBtnIconSelector, { timeout: 5000 });\n\n    // Before clicking, check if the heart icon is NOT filled (i.e., not \"fas fa-heart\")\n    // We'll extract the classList before clicking\n    const heartBefore = await page.$eval(\n      likeBtnIconSelector,\n      el => el.className\n    );\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button (click the parent button if needed)\n    // Try to click the button, not just the icon\n    const likeBtnSelector = '.posts .post:first-child .like-btn';\n    await page.waitForSelector(likeBtnSelector, { timeout: 5000 });\n    await page.click(likeBtnSelector);\n\n    // Wait for the heart icon to become filled (class should include \"fas fa-heart\")\n    // We'll poll for the class change\n    let heartAfter = '';\n    await page.waitForFunction(\n      (selector, prevClass) => {\n        const el = document.querySelector(selector);\n        if (!el) return false;\n        // \"fas fa-heart\" means filled, \"far fa-heart\" means outline\n        return el.className !== prevClass && el.className.includes('fas') && el.className.includes('fa-heart');\n      },\n      likeBtnIconSelector,\n      heartBefore,\n      { timeout: 3000 }\n    );\n\n    // Get the class after clicking\n    heartAfter = await page.$eval(\n      likeBtnIconSelector,\n      el => el.className\n    );\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Prepare extracted data for verification\n    const extractedData = {\n      heartIconClass_before: heartBefore,\n      heartIconClass_after: heartAfter,\n      heartWasFilled: heartAfter.includes('fas') && heartAfter.includes('fa-heart'),\n      heartClassChanged: heartBefore !== heartAfter\n    };\n\n    return {\n      success: extractedData.heartWasFilled && extractedData.heartClassChanged,\n      action: \"Clicked like button on the first post and verified the heart icon became filled.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17981,
      "timestamp": "2025-09-15T12:35:54.086Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the first post to be visible (try using a more specific selector)\n    // Use XPath to select the first .post element in the .posts container\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n    const postHandles = await page.$$('.posts .post');\n    if (!postHandles || postHandles.length === 0) {\n      throw new Error(\"No posts found in feed\");\n    }\n    const firstPost = postHandles[0];\n\n    // Within the first post, find the like button (try using a descendant selector for .like-btn)\n    // Try to locate the button by icon: look for a <button> or <span> with .like-btn, or for the <i> inside\n    // Use XPath for robustness: the first .post's descendant with class 'like-btn'\n    const likeBtn = await firstPost.$('.like-btn');\n    if (!likeBtn) {\n      throw new Error(\"Like button not found in first post\");\n    }\n\n    // Check if the heart icon is not filled before clicking (by class)\n    // The <i> inside should have either 'far fa-heart' (not liked) or 'fas fa-heart' (liked)\n    const heartIcon = await likeBtn.$('i');\n    if (!heartIcon) {\n      throw new Error(\"Heart icon not found inside like button\");\n    }\n    let heartClass = await heartIcon.getAttribute('class');\n\n    // Take screenshot before clicking like\n    const beforeLikeScreenshot = path.join(screenshotsDir, 'step_2_before_like.png');\n    await page.screenshot({ path: beforeLikeScreenshot });\n    screenshots.push(beforeLikeScreenshot);\n\n    // Click the like button\n    await likeBtn.click();\n\n    // Wait for the heart icon to become filled (class to change to 'fas fa-heart')\n    await page.waitForFunction(\n      (el) => el.querySelector('i') && el.querySelector('i').classList.contains('fas') && el.querySelector('i').classList.contains('fa-heart'),\n      firstPost,\n      { timeout: 3000 }\n    );\n\n    // Take screenshot after liking\n    const afterLikeScreenshot = path.join(screenshotsDir, 'step_3_after_like.png');\n    await page.screenshot({ path: afterLikeScreenshot });\n    screenshots.push(afterLikeScreenshot);\n\n    // Extract the class of the heart icon after click\n    const heartIconAfter = await likeBtn.$('i');\n    const heartClassAfter = await heartIconAfter.getAttribute('class');\n\n    // Verify that the heart is now filled (should contain 'fas' and 'fa-heart', and NOT 'far')\n    const isFilled = heartClassAfter.includes('fas') && heartClassAfter.includes('fa-heart') && !heartClassAfter.includes('far');\n\n    return {\n      success: isFilled,\n      action: \"Clicked like button on first post and verified heart icon becomes filled\",\n      extractedData: {\n        heartIconClassBefore: heartClass,\n        heartIconClassAfter: heartClassAfter,\n        heartIconFilled: isFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15402,
      "timestamp": "2025-09-15T12:36:12.067Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the feed container (using a unique container selector if possible)\n    await page.waitForSelector('.feed', { timeout: 5000 });\n\n    // Wait for the first post in the feed\n    const firstPostSelector = '.feed .posts .post';\n    await page.waitForSelector(firstPostSelector, { timeout: 5000 });\n\n    // Locate the first post using nth-child and fallback to first-of-type if needed\n    let likeBtnSelector = '.feed .posts .post:nth-child(1) .like-btn';\n    let likeIconSelector = '.feed .posts .post:nth-child(1) .like-btn i';\n\n    // Double check that the like button exists, fallback to :first-of-type if needed\n    let likeBtn = await page.$(likeBtnSelector);\n    if (!likeBtn) {\n      likeBtnSelector = '.feed .posts .post:first-of-type .like-btn';\n      likeIconSelector = '.feed .posts .post:first-of-type .like-btn i';\n      likeBtn = await page.$(likeBtnSelector);\n    }\n\n    if (!likeBtn) {\n      throw new Error('Like button for first post not found');\n    }\n\n    // Wait for the like icon inside the button\n    await page.waitForSelector(likeIconSelector, { timeout: 4000 });\n\n    // Extract the class list of the heart icon BEFORE clicking (to check if it's already liked)\n    const beforeLikeClass = await page.$eval(likeIconSelector, el => el.className);\n\n    // Take screenshot before like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button\n    await likeBtn.click();\n\n    // Wait for the icon class to change (heart gets filled)\n    // Try to detect a class change or a specific class for \"liked\" (commonly 'fas' for filled, 'far' for outlined in FontAwesome)\n    await page.waitForFunction(\n      (selector, beforeClass) => {\n        const el = document.querySelector(selector);\n        return el && el.className !== beforeClass;\n      },\n      likeIconSelector,\n      beforeLikeClass,\n      { timeout: 3000 }\n    );\n\n    // Take screenshot after like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract the class list of the heart icon AFTER clicking\n    const afterLikeClass = await page.$eval(likeIconSelector, el => el.className);\n\n    // Determine if the heart icon is now \"filled\" (FontAwesome 'fas fa-heart', sometimes with color class)\n    const isHeartFilled = /fas\\b.*fa-heart/.test(afterLikeClass) && !/far\\b/.test(afterLikeClass);\n\n    return {\n      success: isHeartFilled,\n      action: \"Clicked like button on the first post in feed and verified heart icon became filled\",\n      extractedData: {\n        beforeLikeIconClass: beforeLikeClass,\n        afterLikeIconClass: afterLikeClass,\n        heartFilled: isHeartFilled\n      },\n      screenshots,\n      error: isHeartFilled ? null : \"Heart icon did not become filled after click\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15832,
      "timestamp": "2025-09-15T12:36:27.469Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 49215,
  "timestamp": "2025-09-15T12:35:54.086Z",
  "savedAt": "2025-09-15T12:36:43.301Z",
  "version": "1.0"
}