{
  "id": "Amazon_T015_1757931846046",
  "website": "Amazon",
  "task": {
    "id": "T015",
    "description": "Close Modal with Escape Key",
    "objective": "General",
    "expectedResult": "Easy",
    "difficulty": "Open any modal (cart or product detail), then press the Escape key to close it.",
    "category": ".modal, #productModal, #cartModal",
    "tags": [
      "1. Open any modal 2. Press Escape key"
    ],
    "notes": "Modal becomes hidden, modal overlay disappears, focus returns to main page"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Open the cart modal by clicking the cart icon in the header\n    // Try multiple selector strategies for robustness\n    let cartSelector = '.cart, .fa-shopping-cart, text=Cart';\n    await page.waitForSelector('.cart', { timeout: 4000 });\n    await page.click('.cart');\n    // Wait for modal to appear (try #cartModal or .modal)\n    let modalSelector = '#cartModal, .modal';\n    await page.waitForSelector('#cartModal, .modal', { state: 'visible', timeout: 4000 });\n\n    // Take screenshot of modal open\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_open.png'));\n\n    // Press Escape key to close the modal\n    await page.keyboard.press('Escape');\n\n    // Wait for modal to disappear\n    // Wait for either #cartModal or .modal to be hidden or detached\n    await page.waitForSelector('#cartModal, .modal', { state: 'hidden', timeout: 4000 });\n\n    // Take screenshot after closing modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_closed.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_closed.png'));\n\n    // Extract data to verify modal is closed\n    // Check if the modal is hidden or detached\n    const modalVisible = await page.evaluate(() => {\n      const modal = document.querySelector('#cartModal') || document.querySelector('.modal');\n      if (!modal) return false;\n      const style = window.getComputedStyle(modal);\n      return style.display !== 'none' && style.visibility !== 'hidden' && modal.offsetParent !== null;\n    });\n\n    return {\n      success: !modalVisible,\n      action: \"Opened cart modal and closed it using Escape key\",\n      extractedData: {\n        modalVisibleAfterEscape: modalVisible\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 40870,
      "timestamp": "2025-09-15T10:24:06.046Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Prepare screenshots array\n    const screenshots = [];\n    // Take initial screenshot\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Open the cart modal using a different strategy: select the cart icon by its aria-label or XPath\n    // (since .cart has no unique ID, use XPath to find the cart icon by text 'Cart')\n    const cartIconXPath = \"//span[contains(@class,'cart-text') and contains(text(),'Cart')]\";\n    await page.waitForSelector(cartIconXPath, { timeout: 4000 });\n    const cartTextElem = await page.$(cartIconXPath);\n    if (!cartTextElem) throw new Error('Cart icon not found');\n    // Click the parent div to open the cart modal (modal opens via onclick on .cart)\n    const cartDiv = await cartTextElem.evaluateHandle(node => node.closest('div.cart'));\n    await cartDiv.click();\n\n    // Wait for the modal to appear: try multiple selectors (.modal, #cartModal, role=dialog)\n    let modalSelector = null;\n    // Try .modal\n    try {\n      await page.waitForSelector('.modal', { timeout: 2000 });\n      modalSelector = '.modal';\n    } catch {\n      // Try #cartModal\n      try {\n        await page.waitForSelector('#cartModal', { timeout: 2000 });\n        modalSelector = '#cartModal';\n      } catch {\n        // Try any [role=dialog]\n        await page.waitForSelector('[role=\"dialog\"]', { timeout: 2000 });\n        modalSelector = '[role=\"dialog\"]';\n      }\n    }\n    // Take screenshot of modal open\n    const step2 = path.join(screenshotsDir, 'step_2_modal_open.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Focus the modal for keyboard events\n    await page.focus(modalSelector);\n\n    // Press Escape to close the modal\n    await page.keyboard.press('Escape');\n\n    // Wait for the modal to disappear (using the selector we found)\n    await page.waitForSelector(modalSelector, { state: 'detached', timeout: 3000 });\n\n    // Take screenshot after closing modal\n    const step3 = path.join(screenshotsDir, 'step_3_modal_closed.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Extract verification: modal is not present anymore\n    const modalStillPresent = await page.$(modalSelector);\n    const modalClosed = modalStillPresent === null;\n\n    return {\n      success: modalClosed,\n      action: \"Opened the cart modal and closed it by pressing Escape. Verified modal is no longer in the DOM.\",\n      extractedData: {\n        modalClosed\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 43611,
      "timestamp": "2025-09-15T10:24:46.916Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // STEP 1: Open a modal (prefer cart modal, fallback to product modal)\n\n    // Try to open Cart Modal by clicking .cart in header (using XPath for robustness)\n    const cartSelector = '//div[contains(@class,\"cart\") and descendant::span[contains(text(),\"Cart\")]]';\n    await page.waitForSelector(cartSelector, { timeout: 4000 });\n    await page.click(cartSelector);\n\n    // Wait for cart modal to appear (try multiple selectors)\n    let modalAppeared = false;\n    const modalSelectors = [\n      '#cartModal',\n      '.modal.cart-modal',\n      '.modal', // fallback generic modal\n      '//div[contains(@class, \"modal\") and contains(@style, \"display: block\")]'\n    ];\n    for (const sel of modalSelectors) {\n      try {\n        await page.waitForSelector(sel, { timeout: 2500 });\n        modalAppeared = true;\n        break;\n      } catch (e) {\n        // Try next\n      }\n    }\n\n    // Take screenshot after modal open\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_open.png'));\n\n    // STEP 2: Press Escape key to close modal\n    await page.keyboard.press('Escape');\n\n    // Wait for modal to disappear\n    let modalClosed = false;\n    for (const sel of modalSelectors) {\n      try {\n        await page.waitForSelector(sel, { state: 'hidden', timeout: 3000 });\n        modalClosed = true;\n        break;\n      } catch (e) {\n        // Try next\n      }\n    }\n\n    // Screenshot after closing modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_closed.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_closed.png'));\n\n    // Extracted data: confirm modal is no longer visible\n    let modalVisible = false;\n    for (const sel of modalSelectors) {\n      const el = await page.$(sel);\n      if (el) {\n        const visible = await el.isVisible ? await el.isVisible() : await page.evaluate(e => !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length), el);\n        if (visible) {\n          modalVisible = true;\n          break;\n        }\n      }\n    }\n\n    return {\n      success: modalAppeared && modalClosed && !modalVisible,\n      action: \"Opened cart modal and closed it with Escape key\",\n      extractedData: {\n        modalAppeared,\n        modalClosed,\n        modalStillVisible: modalVisible\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 42983,
      "timestamp": "2025-09-15T10:25:30.527Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 127464,
  "timestamp": "2025-09-15T10:24:06.046Z",
  "savedAt": "2025-09-15T10:26:13.510Z",
  "version": "1.0"
}