{
  "id": "Airbnb_TASK_006_1757928523028",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun's first listing's favorite button to be visible\n    // Try multiple selector strategies\n    // 1. [data-listing-id='jun_1'] .listing-favorite\n    let favoriteBtn = await page.waitForSelector(\"[data-listing-id='jun_1'] .listing-favorite\", { timeout: 5000 });\n\n    // If not found, try a fallback (for robustness)\n    if (!favoriteBtn) {\n      favoriteBtn = await page.waitForSelector(\"//div[contains(@data-listing-id, 'jun_1')]//*[contains(@class,'listing-favorite')]\", { timeout: 5000 });\n    }\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get button state before click (e.g., class, aria-pressed, innerHTML)\n    const beforeState = await page.evaluate(() => {\n      const btn = document.querySelector(\"[data-listing-id='jun_1'] .listing-favorite\");\n      if (!btn) return null;\n      return {\n        class: btn.className,\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        text: btn.innerText || btn.textContent\n      };\n    });\n\n    // Get localStorage favorites before click\n    const beforeFavorites = await page.evaluate(() => {\n      try {\n        // Try common keys\n        let favs = localStorage.getItem('favorites');\n        if (favs) return JSON.parse(favs);\n        // Try airbnbData if available\n        if (window.airbnbData && window.airbnbData.storageUtils) {\n          return window.airbnbData.storageUtils.getFavorites();\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Click the favorite button\n    await favoriteBtn.click();\n\n    // Wait for button state to change (class or aria-pressed or visual)\n    await page.waitForTimeout(800); // allow UI to update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get button state after click\n    const afterState = await page.evaluate(() => {\n      const btn = document.querySelector(\"[data-listing-id='jun_1'] .listing-favorite\");\n      if (!btn) return null;\n      return {\n        class: btn.className,\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        text: btn.innerText || btn.textContent\n      };\n    });\n\n    // Get localStorage favorites after click\n    const afterFavorites = await page.evaluate(() => {\n      try {\n        let favs = localStorage.getItem('favorites');\n        if (favs) return JSON.parse(favs);\n        if (window.airbnbData && window.airbnbData.storageUtils) {\n          return window.airbnbData.storageUtils.getFavorites();\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Determine if the button state or favorites changed\n    let stateChanged = false;\n    if (beforeState && afterState) {\n      stateChanged = beforeState.class !== afterState.class ||\n                     beforeState.ariaPressed !== afterState.ariaPressed ||\n                     beforeState.text !== afterState.text;\n    }\n\n    let favoritesChanged = JSON.stringify(beforeFavorites) !== JSON.stringify(afterFavorites);\n\n    // Compose extractedData\n    const extractedData = {\n      beforeButtonState: beforeState,\n      afterButtonState: afterState,\n      beforeFavorites,\n      afterFavorites,\n      buttonStateChanged: stateChanged,\n      favoritesChanged\n    };\n\n    return {\n      success: stateChanged || favoritesChanged,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, 확인: 버튼 상태 및 localStorage favorites 변화\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18842,
      "timestamp": "2025-09-15T09:28:43.029Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // 3. Wait for Jun's first listing's favorite button to appear\n    // Try multiple selector strategies:\n    // - by data-listing-id and descendant .listing-favorite button\n    // - fallback using xpath if needed\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    const favoriteBtnSelector = `${listingSelector} .listing-favorite`;\n\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // 4. Get the current state of the favorite button (before click)\n    const favoriteBtn = await page.$(favoriteBtnSelector);\n\n    // Take screenshot before clicking the favorite button\n    const beforeFavScreenshot = path.join(screenshotsDir, 'step_2_favorite_before.png');\n    await favoriteBtn.screenshot({ path: beforeFavScreenshot });\n    screenshots.push(beforeFavScreenshot);\n\n    const btnClassBefore = await favoriteBtn.getAttribute('class');\n    const btnAriaPressedBefore = await favoriteBtn.getAttribute('aria-pressed');\n    const btnTitleBefore = await favoriteBtn.getAttribute('title');\n    const btnHtmlBefore = await favoriteBtn.evaluate(el => el.outerHTML);\n\n    // 5. Click the favorite button\n    await favoriteBtn.click();\n\n    // 6. Wait for button state to change (e.g., class or aria-pressed toggles)\n    // We'll poll for up to 2 seconds for a change\n    let changed = false;\n    let btnClassAfter, btnAriaPressedAfter, btnTitleAfter, btnHtmlAfter;\n    for (let i = 0; i < 10; ++i) {\n      await page.waitForTimeout(200);\n      btnClassAfter = await favoriteBtn.getAttribute('class');\n      btnAriaPressedAfter = await favoriteBtn.getAttribute('aria-pressed');\n      btnTitleAfter = await favoriteBtn.getAttribute('title');\n      btnHtmlAfter = await favoriteBtn.evaluate(el => el.outerHTML);\n      if (\n        btnClassAfter !== btnClassBefore ||\n        btnAriaPressedAfter !== btnAriaPressedBefore ||\n        btnTitleAfter !== btnTitleBefore ||\n        btnHtmlAfter !== btnHtmlBefore\n      ) {\n        changed = true;\n        break;\n      }\n    }\n\n    // Screenshot after clicking favorite\n    const afterFavScreenshot = path.join(screenshotsDir, 'step_3_favorite_after.png');\n    await favoriteBtn.screenshot({ path: afterFavScreenshot });\n    screenshots.push(afterFavScreenshot);\n\n    // 7. Check localStorage for favorites (should reflect the update)\n    // Try to extract the relevant localStorage key(s)\n    const localStorageData = await page.evaluate(() => {\n      // Try common keys for favorites\n      const keys = Object.keys(localStorage);\n      let favoritesKey = null;\n      let favoritesValue = null;\n      for (const k of keys) {\n        if (k.toLowerCase().includes('favorite')) {\n          favoritesKey = k;\n          favoritesValue = localStorage.getItem(k);\n          break;\n        }\n      }\n      // Fallback: try to extract all localStorage\n      return {\n        all: Object.fromEntries(keys.map(k => [k, localStorage.getItem(k)])),\n        favoritesKey,\n        favoritesValue\n      };\n    });\n\n    // Parse favorites array if possible\n    let favoritesList = null;\n    if (localStorageData.favoritesValue) {\n      try {\n        favoritesList = JSON.parse(localStorageData.favoritesValue);\n      } catch {}\n    } else if (localStorageData.all) {\n      // Try to find any array that includes 'jun_1'\n      for (const val of Object.values(localStorageData.all)) {\n        try {\n          const arr = JSON.parse(val);\n          if (Array.isArray(arr) && arr.some(id => id === 'jun_1')) {\n            favoritesList = arr;\n            break;\n          }\n        } catch {}\n      }\n    }\n\n    // Final screenshot of the whole page for context after all actions\n    const finalScreenshot = path.join(screenshotsDir, 'step_4_final.png');\n    await page.screenshot({ path: finalScreenshot });\n    screenshots.push(finalScreenshot);\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state change and localStorage update.\",\n      extractedData: {\n        btnClassBefore,\n        btnAriaPressedBefore,\n        btnTitleBefore,\n        btnHtmlBefore,\n        btnClassAfter,\n        btnAriaPressedAfter,\n        btnTitleAfter,\n        btnHtmlAfter,\n        buttonStateChanged: changed,\n        localStorageFavoritesKey: localStorageData.favoritesKey,\n        localStorageFavoritesValue: localStorageData.favoritesValue,\n        favoritesList,\n        favoritesIncludesJun1: favoritesList ? favoritesList.includes('jun_1') : null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 21534,
      "timestamp": "2025-09-15T09:29:01.871Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Initial screenshot\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // 3. Wait for the first listing (Jun의 첫 번째 숙소) favorite button to appear\n    // Use a combination of [data-listing-id=\"jun_1\"] and its .listing-favorite button\n    const junListingSelector = '[data-listing-id=\"jun_1\"]';\n    const favoriteBtnSelector = `${junListingSelector} .listing-favorite`;\n\n    await page.waitForSelector(junListingSelector, { timeout: 5000 });\n    // Sometimes favorite button may be rendered late\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // 4. Get the initial favorite button state (e.g., aria-pressed or class)\n    const initialFavState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent\n      };\n    });\n\n    // 5. Screenshot before click\n    const beforeClickShot = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: beforeClickShot });\n    screenshots.push(beforeClickShot);\n\n    // 6. Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // 7. Wait for the favorite button state to change (either aria-pressed or class)\n    // We'll retry reading the button state until it changes or timeout\n    let newFavState = null;\n    for (let i = 0; i < 10; i++) {\n      await page.waitForTimeout(300);\n      newFavState = await page.$eval(favoriteBtnSelector, el => {\n        return {\n          ariaPressed: el.getAttribute('aria-pressed'),\n          class: el.className,\n          text: el.textContent\n        };\n      });\n      if (\n        newFavState.ariaPressed !== initialFavState.ariaPressed ||\n        newFavState.class !== initialFavState.class ||\n        newFavState.text !== initialFavState.text\n      ) {\n        break;\n      }\n    }\n\n    // 8. Screenshot after click\n    const afterClickShot = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: afterClickShot });\n    screenshots.push(afterClickShot);\n\n    // 9. Check localStorage for favorites update\n    // Try to get favorites from localStorage (look for possible keys)\n    const localStorageData = await page.evaluate(() => {\n      // Try common favorites keys\n      const keys = Object.keys(localStorage);\n      let favoritesKey = keys.find(k =>\n        k.toLowerCase().includes('favorite')\n      );\n      let favorites = null;\n      if (favoritesKey) {\n        try {\n          favorites = JSON.parse(localStorage.getItem(favoritesKey));\n        } catch {\n          favorites = localStorage.getItem(favoritesKey);\n        }\n      }\n      return {\n        favoritesKey,\n        favorites,\n        localStorageSnapshot: Object.fromEntries(keys.map(k => [k, localStorage.getItem(k)]))\n      };\n    });\n\n    // 10. Extract if 'jun_1' is now in favorites array (after toggling)\n    let jun1InFavorites = false;\n    if (localStorageData.favorites && Array.isArray(localStorageData.favorites)) {\n      jun1InFavorites = localStorageData.favorites.includes('jun_1');\n    } else if (\n      localStorageData.favorites &&\n      typeof localStorageData.favorites === 'string'\n    ) {\n      jun1InFavorites = localStorageData.favorites.includes('jun_1');\n    }\n\n    // 11. Return result\n    return {\n      success: true,\n      action: \"Clicked the favorite button on Jun의 첫 번째 숙소 (jun_1), verified the button state changed and localStorage updated.\",\n      extractedData: {\n        initialFavoriteState: initialFavState,\n        newFavoriteState: newFavState,\n        localStorageFavoritesKey: localStorageData.favoritesKey,\n        localStorageFavoritesValue: localStorageData.favorites,\n        jun_1_in_favorites: jun1InFavorites,\n        localStorageSnapshot: localStorageData.localStorageSnapshot\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 34542,
      "timestamp": "2025-09-15T09:29:23.405Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 74919,
  "timestamp": "2025-09-15T09:28:43.028Z",
  "savedAt": "2025-09-15T09:29:57.947Z",
  "version": "1.0"
}