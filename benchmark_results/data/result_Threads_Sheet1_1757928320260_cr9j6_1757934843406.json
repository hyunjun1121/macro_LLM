{
  "id": "Threads_Sheet1_1757928320260_cr9j6_1757934843406",
  "website": "Threads",
  "task": {
    "id": "Sheet1_1757928320260_cr9j6",
    "description": "M002",
    "objective": "Rapidly Click Like Buttons",
    "expectedResult": "Click like buttons on all visible threads in rapid succession (within 5 seconds)",
    "difficulty": ".thread-action[data-action='like']",
    "category": 3,
    "tags": [
      "10 seconds"
    ],
    "notes": "Yes"
  },
  "websiteInfo": {
    "name": "Threads",
    "htmlFiles": [
      "index.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the threads feed to be visible\n    await page.waitForSelector('#threads-feed', { timeout: 5000 });\n\n    // Wait for at least one like button to appear (visible threads)\n    await page.waitForSelector(\".thread-action[data-action='like']\", { timeout: 5000 });\n\n    // Get all visible like buttons in the threads feed\n    const likeButtonHandles = await page.$$(\n      \"#threads-feed .thread-action[data-action='like']\"\n    );\n\n    // Take a screenshot before clicking likes\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_likes.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_likes.png'));\n\n    // Click all visible like buttons in rapid succession (within 5 seconds)\n    const clickPromises = [];\n    const likeButtonCount = likeButtonHandles.length;\n    for (const btn of likeButtonHandles) {\n      // Only click if the button is visible and enabled\n      const isVisible = await btn.isVisible();\n      const isDisabled = await btn.getAttribute('disabled');\n      if (isVisible && !isDisabled) {\n        clickPromises.push(btn.click());\n      }\n    }\n    // Wait for all clicks to finish (should be very fast)\n    await Promise.all(clickPromises);\n\n    // Wait a short moment for UI to update\n    await page.waitForTimeout(500);\n\n    // Take a screenshot after clicking likes\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_likes.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_likes.png'));\n\n    // Extract data: collect the liked state of all the threads after clicking\n    // We'll check if the like button now has an \"active\" or \"liked\" class, or aria-pressed, etc.\n    // We'll also extract the thread IDs if possible\n    const likedThreads = await page.evaluate(() => {\n      const liked = [];\n      document.querySelectorAll(\"#threads-feed .thread-item\").forEach(threadEl => {\n        const likeBtn = threadEl.querySelector(\".thread-action[data-action='like']\");\n        if (likeBtn) {\n          // Try to determine if liked (by class or aria-pressed)\n          const isActive = likeBtn.classList.contains('active') || likeBtn.classList.contains('liked') || likeBtn.getAttribute('aria-pressed') === 'true';\n          // Try to get thread id\n          const threadId = threadEl.getAttribute('data-thread-id') || threadEl.id || null;\n          liked.push({\n            threadId,\n            liked: isActive\n          });\n        }\n      });\n      return liked;\n    });\n\n    // Count how many threads are now liked\n    const likedCount = likedThreads.filter(t => t.liked).length;\n\n    return {\n      success: true,\n      action: `Clicked like buttons on all visible threads (${likeButtonCount} found, ${likedCount} now liked) in rapid succession.`,\n      extractedData: {\n        totalLikeButtons: likeButtonCount,\n        threadsLiked: likedThreads\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16307,
      "timestamp": "2025-09-15T11:14:03.406Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('domcontentloaded');\n\n    const screenshots = [];\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Ensure we're in the main \"Home\" view (by text + active class)\n    const homeNavSelector = \"//span[text()='Home']/ancestor::li[contains(@class,'nav-item')]\";\n    await page.waitForSelector(homeNavSelector, { timeout: 5000 });\n\n    // Wait for threads feed to be visible (using ID and fallback class)\n    let threadsFeed = await page.$('#threads-feed');\n    if (!threadsFeed) {\n      threadsFeed = await page.$('.threads-feed');\n    }\n    if (!threadsFeed) {\n      throw new Error('Threads feed not found');\n    }\n    // Wait for at least one thread to be loaded (using .thread-item or .thread-action)\n    await page.waitForSelector(\".thread-action[data-action='like']\", { timeout: 5000 });\n\n    // Find all unique, visible LIKE buttons using multiple strategies\n    // We'll try: \n    //   1. .thread-action[data-action='like']\n    //   2. Button with aria-label or title containing 'Like'\n    //   3. Buttons with heart icon (fa-heart) that are not already \"liked\"\n    const likeButtons = await page.$$eval(\n      \".thread-action[data-action='like']\",\n      nodes => nodes.filter(btn => {\n        // Only visible, not already liked\n        const style = window.getComputedStyle(btn);\n        if (style && style.display === 'none') return false;\n        if (btn.classList.contains('liked')) return false;\n        // Check aria-pressed, aria-label, or title if present\n        if (btn.getAttribute('aria-pressed') === \"true\") return false;\n        return true;\n      }).map(btn => btn.getAttribute('data-thread-id') || btn.outerHTML)\n    );\n\n    // As backup, also get by button[title*=\"Like\"]\n    const extraLikeButtons = await page.$$eval(\n      \"button[title*='Like']\",\n      nodes => nodes.filter(btn => {\n        const style = window.getComputedStyle(btn);\n        if (style && style.display === 'none') return false;\n        if (btn.classList.contains('liked')) return false;\n        if (btn.getAttribute('aria-pressed') === \"true\") return false;\n        return true;\n      }).map(btn => btn.outerHTML)\n    );\n\n    // Merge and dedupe (since data-thread-id or outerHTML)\n    const allLikeCandidates = Array.from(new Set([\n      ...likeButtons,\n      ...extraLikeButtons\n    ]));\n\n    // Now, actually select all like button elements in the DOM for clicking\n    // Use JSHandle array so we can click in rapid succession\n    const likeButtonHandles = await page.$$(\".thread-action[data-action='like']:not(.liked)\");\n\n    // If not enough, try the backup selector\n    let totalToLike = likeButtonHandles.length;\n    if (totalToLike === 0) {\n      // Try backup selector\n      const fallbackHandles = await page.$$(\"button[title*='Like']:not(.liked)\");\n      for (const handle of fallbackHandles) {\n        likeButtonHandles.push(handle);\n      }\n      totalToLike = likeButtonHandles.length;\n    }\n\n    // Take screenshot before clicking likes\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click all like buttons as fast as possible (within 5 seconds)\n    // Fire all clicks as promises (not await sequentially)\n    const clickPromises = [];\n    for (const btnHandle of likeButtonHandles) {\n      clickPromises.push(btnHandle.click({ force: true }));\n    }\n    // Wait for all to complete (max 5 seconds total)\n    await Promise.race([\n      Promise.all(clickPromises),\n      new Promise((resolve) => setTimeout(resolve, 5000))\n    ]);\n\n    // Wait a short time for UI to update\n    await page.waitForTimeout(400);\n\n    // Take screenshot after liking\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract data: count of liked buttons after clicking\n    const likedCount = await page.$$eval(\n      \".thread-action[data-action='like'].liked\",\n      nodes => nodes.length\n    );\n    // Extract total visible threads in feed\n    const totalThreads = await page.$$eval(\n      \".thread-action[data-action='like']\",\n      nodes => nodes.length\n    );\n\n    return {\n      success: true,\n      action: `Clicked all visible Like buttons on threads in rapid succession (within 5 seconds).`,\n      extractedData: {\n        candidateLikeButtonsFound: allLikeCandidates.length,\n        likeButtonsClicked: likeButtonHandles.length,\n        likedCountAfter: likedCount,\n        totalThreadsWithLike: totalThreads\n      },\n      screenshots,\n      error: null\n    };\n\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19815,
      "timestamp": "2025-09-15T11:14:19.713Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Wait for main content to be visible to ensure threads are loaded\n    await page.waitForSelector('.main-content', { timeout: 7000 });\n\n    // Take initial screenshot\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for at least one thread like button to be present and visible\n    // Use more robust selector: button with aria-label 'Like' inside visible .thread-item\n    await page.waitForSelector(\".thread-item .thread-action[data-action='like']\", { timeout: 7000, state: 'visible' });\n\n    // Get all visible like buttons (within visible threads only)\n    // Use evaluate to avoid issues with detached nodes\n    const likeButtonHandles = await page.$$(\".thread-item:visible .thread-action[data-action='like']\");\n\n    // Fallback: if above returns nothing, try alternative selector (for robustness)\n    let likeHandles = likeButtonHandles;\n    if (!likeHandles || likeHandles.length === 0) {\n      likeHandles = await page.$$(\".thread-action[data-action='like']\");\n    }\n\n    // Filter only visible buttons (sometimes page.$$ returns hidden ones)\n    const visibleLikes = [];\n    for (const handle of likeHandles) {\n      if (await handle.isVisible()) {\n        visibleLikes.push(handle);\n      }\n    }\n\n    // Record how many like buttons we found before clicking\n    const likeCountBefore = visibleLikes.length;\n\n    // Take a screenshot before clicking likes\n    const beforeLikesShot = path.join(screenshotsDir, 'step_2_before_likes.png');\n    await page.screenshot({ path: beforeLikesShot });\n    screenshots.push(beforeLikesShot);\n\n    // Click all like buttons in rapid succession (within 5 seconds)\n    const clickStart = Date.now();\n    for (const handle of visibleLikes) {\n      try {\n        await handle.click({ timeout: 1000, force: true });\n      } catch (err) {\n        // Ignore errors if button already clicked/disabled\n      }\n    }\n    // Ensure all clicks are finished within 5 seconds\n    const elapsed = Date.now() - clickStart;\n    if (elapsed < 5000) {\n      await page.waitForTimeout(5000 - elapsed);\n    }\n\n    // Take a screenshot after clicking\n    const afterLikesShot = path.join(screenshotsDir, 'step_3_after_likes.png');\n    await page.screenshot({ path: afterLikesShot });\n    screenshots.push(afterLikesShot);\n\n    // Extract data to verify: count of like buttons now showing 'liked' state\n    // Try to read an attribute/class change, fallback to counting like buttons present\n    const likedCount = await page.evaluate(() => {\n      // Try to detect a class or aria-pressed state\n      const buttons = Array.from(document.querySelectorAll(\".thread-item .thread-action[data-action='like']\"));\n      return buttons.filter(btn => (\n        btn.classList.contains('active') ||\n        btn.getAttribute('aria-pressed') === 'true' ||\n        btn.getAttribute('data-liked') === 'true'\n      )).length;\n    });\n\n    return {\n      success: true,\n      action: `Clicked all visible thread like buttons (${likeCountBefore}) in rapid succession within 5 seconds`,\n      extractedData: {\n        likeButtonsFound: likeCountBefore,\n        likeButtonsNowActive: likedCount\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 26356,
      "timestamp": "2025-09-15T11:14:39.528Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 62478,
  "timestamp": "2025-09-15T11:14:03.406Z",
  "savedAt": "2025-09-15T11:15:05.884Z",
  "version": "1.0"
}