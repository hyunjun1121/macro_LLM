{
  "id": "instagram_Sheet1_1757928320276_89fs2_1757939988316",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320276_89fs2",
    "description": "IG_REG_006",
    "objective": "Regular",
    "expectedResult": "Click \"Your story\" button and verify create story modal opens",
    "difficulty": "Easy",
    "category": ".story.add-story, #createStoryModal",
    "tags": [
      "Create story modal becomes visible"
    ],
    "notes": "1. Click .story.add-story button 2. Verify #createStoryModal has style display:block or visible class"
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the \"Your story\" button in the stories section\n    // Try multiple selector strategies: class, text, xpath\n    let yourStorySelector = '.story.add-story';\n    await page.waitForSelector(yourStorySelector, { timeout: 5000 });\n\n    // Optionally verify the button contains the text \"Your story\"\n    const storyButtons = await page.$$(yourStorySelector);\n    let yourStoryButton = null;\n    for (const btn of storyButtons) {\n      const text = (await btn.textContent())?.trim().toLowerCase();\n      if (text && text.includes('your story')) {\n        yourStoryButton = btn;\n        break;\n      }\n    }\n    // Fallback: if not found by text, just use the first .story.add-story\n    if (!yourStoryButton && storyButtons.length > 0) {\n      yourStoryButton = storyButtons[0];\n    }\n    if (!yourStoryButton) {\n      throw new Error('\"Your story\" button not found');\n    }\n\n    // Take screenshot before clicking\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_click_your_story.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_click_your_story.png'));\n\n    // Click the \"Your story\" button\n    await yourStoryButton.click();\n\n    // Wait for the create story modal to appear\n    // Modal selector: #createStoryModal\n    await page.waitForSelector('#createStoryModal', { state: 'visible', timeout: 5000 });\n\n    // Take screenshot after modal opens\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_story_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_create_story_modal_open.png'));\n\n    // Extract data from the modal to verify it's open\n    const modalVisible = await page.$eval('#createStoryModal', el => {\n      const style = window.getComputedStyle(el);\n      return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n    });\n\n    // Optionally extract modal header text\n    let modalHeader = '';\n    try {\n      modalHeader = await page.$eval('#createStoryModal h2', el => el.textContent.trim());\n    } catch {}\n\n    return {\n      success: modalVisible,\n      action: 'Clicked \"Your story\" button and verified create story modal opens',\n      extractedData: {\n        modalVisible,\n        modalHeader\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16635,
      "timestamp": "2025-09-15T12:39:48.316Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the stories list to ensure the page is loaded\n    // Try to select the \"Your story\" button using a combination of text and structural selectors\n    // Use xpath as additional strategy\n    let yourStoryButton = null;\n\n    // Try by aria-label (if exists), then by class + text, then by xpath\n    // 1. By class and text content\n    yourStoryButton = await page.$('.story.add-story .story-username');\n    let found = false;\n\n    if (yourStoryButton) {\n      const textContent = await yourStoryButton.textContent();\n      if (textContent && textContent.trim().toLowerCase().includes('your story')) {\n        found = true;\n      }\n    }\n    // 2. If not found, try xpath for exact text\n    if (!found) {\n      // XPath: find any element containing \"Your story\" as exact text\n      const elements = await page.$x(\"//*[normalize-space(text())='Your story']\");\n      if (elements.length > 0) {\n        yourStoryButton = elements[0];\n        found = true;\n      }\n    }\n    // 3. If still not found, try for an element with class add-story or a parent with .story.add-story\n    if (!found) {\n      const storyCandidates = await page.$$('.story.add-story');\n      for (const candidate of storyCandidates) {\n        const label = await candidate.textContent();\n        if (label && label.trim().toLowerCase().includes('your story')) {\n          yourStoryButton = candidate;\n          found = true;\n          break;\n        }\n      }\n    }\n    if (!found || !yourStoryButton) {\n      throw new Error('Could not find \"Your story\" button using available selectors');\n    }\n\n    // Take a screenshot before clicking\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_click_your_story.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_click_your_story.png'));\n\n    // Click the \"Your story\" button (click the parent .story.add-story if possible)\n    // Try to click the parent if selecting the .story-username, otherwise click the found element\n    let clickTarget = yourStoryButton;\n    // If it's the .story-username, click the parent .story.add-story\n    const parentHandle = await yourStoryButton.evaluateHandle(el => el.closest('.story.add-story'));\n    if (parentHandle) {\n      clickTarget = parentHandle;\n    }\n    await clickTarget.click();\n\n    // Wait for the create story modal to appear: #createStoryModal (ID selector)\n    await page.waitForSelector('#createStoryModal', { state: 'visible', timeout: 4000 });\n\n    // Take screenshot of the modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_create_story_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_create_story_modal_opened.png'));\n\n    // Extract modal header text to verify\n    const modalHeader = await page.$eval('#createStoryModal h2', el => el.textContent.trim());\n\n    return {\n      success: true,\n      action: 'Clicked \"Your story\" button and verified that the create story modal opens.',\n      extractedData: {\n        createStoryModalHeader: modalHeader\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18141,
      "timestamp": "2025-09-15T12:40:04.951Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the \"Your story\" button - try multiple strategies\n    // 1. By .story.add-story\n    let yourStoryButton = await page.$('.story.add-story');\n    // 2. By text (if not found)\n    if (!yourStoryButton) {\n      yourStoryButton = await page.$('//div[contains(@class, \"story\") and .//span[contains(., \"Your story\")]]');\n    }\n    // 3. By aria-label (if implemented)\n    if (!yourStoryButton) {\n      yourStoryButton = await page.$('[aria-label=\"Your story\"]');\n    }\n\n    if (!yourStoryButton) {\n      throw new Error('Could not find the \"Your story\" button with any selector strategy.');\n    }\n\n    // Scroll into view and click\n    await yourStoryButton.scrollIntoViewIfNeeded();\n    await yourStoryButton.click();\n\n    // Wait for the create story modal to appear\n    // Try: #createStoryModal (ID), then visible modal with \"Create Story\" text\n    let modalSelector = '#createStoryModal';\n    let modalAppeared = false;\n    try {\n      await page.waitForSelector(modalSelector, { state: 'visible', timeout: 3000 });\n      modalAppeared = true;\n    } catch {\n      // Try alternative: any visible modal containing \"Create Story\"\n      const altModal = await page.waitForSelector('//div[contains(@class, \"modal\") and .//h2[contains(translate(text(),\"CREATE\",\"create\"), \"create\")]]', { timeout: 3000 });\n      if (altModal) modalAppeared = true;\n    }\n\n    // Screenshot after clicking \"Your story\"\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_click.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_click.png'));\n\n    // Extract modal title if present for verification\n    let modalTitle = null;\n    if (modalAppeared) {\n      // Try to get the modal header text\n      const header = await page.$('#createStoryModal h2');\n      if (header) {\n        modalTitle = (await header.innerText()).trim();\n      } else {\n        // Try alternative: any visible modal h2\n        const altHeader = await page.$('//div[contains(@class,\"modal\") and contains(@style,\"display: block\")]//h2');\n        if (altHeader) {\n          modalTitle = (await altHeader.innerText()).trim();\n        }\n      }\n    }\n\n    // Determine if the modal is open and has expected content\n    const modalOpen = !!modalAppeared && !!modalTitle;\n\n    return {\n      success: modalOpen,\n      action: 'Clicked \"Your story\" button and verified create story modal opens',\n      extractedData: {\n        modalTitle,\n        modalOpen\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 36699,
      "timestamp": "2025-09-15T12:40:23.092Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 71475,
  "timestamp": "2025-09-15T12:39:48.316Z",
  "savedAt": "2025-09-15T12:40:59.791Z",
  "version": "1.0"
}