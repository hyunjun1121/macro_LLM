{
  "id": "Amazon_T010_1757931013512",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Open the first product detail modal (simulate click on first product card)\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the product detail modal/dialog to appear\n    // Try to find a modal or a product detail section that appears after clicking\n    // We'll wait for an 'Add to Wish List' button to appear\n    await page.waitForSelector('.add-to-wishlist, button:has-text(\"Add to Wish List\")', { timeout: 5000 });\n\n    // Take screenshot after product modal opens\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_modal.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_modal.png'));\n\n    // Click the 'Add to Wish List' button (try both class and text selector)\n    let addToWishlistBtn = await page.$('.add-to-wishlist');\n    if (!addToWishlistBtn) {\n      // Try button by text\n      addToWishlistBtn = await page.$('button:has-text(\"Add to Wish List\")');\n    }\n    if (!addToWishlistBtn) throw new Error('Add to Wish List button not found');\n    await addToWishlistBtn.click();\n\n    // Wait for confirmation or UI feedback (e.g., a toast, button state change, or wishlist count update)\n    // Try to detect a wishlist confirmation message or button state\n    let confirmationText = '';\n    try {\n      // Wait for some confirmation element (simulate, e.g., a toast or button text change)\n      await page.waitForSelector('.wishlist-confirmation, .add-to-wishlist.added, text=Added to Wish List', { timeout: 4000 });\n      // Try to extract confirmation text\n      const confEl = await page.$('.wishlist-confirmation') ||\n                     await page.$('.add-to-wishlist.added') ||\n                     await page.$('text=Added to Wish List');\n      if (confEl) {\n        confirmationText = (await confEl.innerText()).trim();\n      }\n    } catch (e) {\n      // If no explicit confirmation, proceed\n      confirmationText = '';\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_add_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_add_wishlist.png'));\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      // Try common selectors for product title in modal\n      const titleEl = await page.$('.product-modal .product-title, .product-detail-modal .product-title, .modal .product-title, .product-title');\n      if (titleEl) {\n        productTitle = (await titleEl.innerText()).trim();\n      }\n    } catch (e) {\n      productTitle = '';\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 43914,
      "timestamp": "2025-09-15T10:10:13.512Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to be visible\n    // Use a generic \".product-card\" class, then first child via nth-of-type\n    const firstProductCardSelector = '.product-card:nth-of-type(1)';\n    await page.waitForSelector(firstProductCardSelector, { timeout: 5000 });\n\n    // Scroll into view to avoid overlay issues\n    await page.$eval(firstProductCardSelector, el => el.scrollIntoView({ behavior: 'instant', block: 'center' }));\n\n    // Take screenshot before interaction\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_first_product_visible.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_first_product_visible.png'));\n\n    // Try clicking on the image or title to open the modal\n    // Use a flexible selector for the title or image inside product card\n    const productTitleSelector = `${firstProductCardSelector} .product-title, ${firstProductCardSelector} [class*=\"title\"], ${firstProductCardSelector} img`;\n    const productTitleEl = await page.$(productTitleSelector);\n    if (!productTitleEl) {\n      throw new Error('Could not find clickable element to open the product detail modal');\n    }\n    await productTitleEl.click();\n\n    // Wait for the modal/dialog to appear\n    // Try by modal classes or aria-modal\n    let modalSelector = '.product-modal, .modal-dialog, [role=\"dialog\"], [aria-modal=\"true\"]';\n    await page.waitForSelector(modalSelector, { timeout: 5000 });\n\n    // Take screenshot of the opened modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_product_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_product_modal_opened.png'));\n\n    // Wait for the 'Add to Wish List' button to appear inside the modal\n    // Try multiple selector strategies: class, text, button\n    let addToWishlistSelector = [\n      '.add-to-wishlist',\n      'button:has-text(\"Add to Wish List\")',\n      'button:has-text(\"Wishlist\")',\n      'button:has-text(\"Wish List\")',\n      '.wishlist-btn'\n    ].join(', ');\n\n    await page.waitForSelector(`${modalSelector} ${addToWishlistSelector}`, { timeout: 5000 });\n\n    // Click the 'Add to Wish List' button\n    const addToWishlistButton = await page.$(`${modalSelector} ${addToWishlistSelector}`);\n    if (!addToWishlistButton) {\n      throw new Error('Add to Wish List button not found in modal');\n    }\n    await addToWishlistButton.click();\n\n    // Wait briefly for UI feedback (e.g., button changes, toast, etc.)\n    await page.waitForTimeout(800);\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_add_to_wishlist.png'));\n\n    // Extract info: check if there is a confirmation message or button state change\n    let confirmationText = null;\n    let addBtnText = await addToWishlistButton.evaluate(el => el.textContent.trim());\n    // Try to find a toast or feedback\n    let toastSelector = [\n      '.toast-message',\n      '.wishlist-confirmation',\n      '.notification',\n      '//div[contains(text(),\"added to your Wish List\")]'\n    ];\n    let toastElement = null;\n    for (let sel of toastSelector) {\n      try {\n        if (sel.startsWith('//')) {\n          toastElement = await page.$(`xpath=${sel}`);\n        } else {\n          toastElement = await page.$(sel);\n        }\n        if (toastElement) break;\n      } catch {}\n    }\n    if (toastElement) {\n      confirmationText = await toastElement.evaluate(el => el.textContent.trim());\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked the 'Add to Wish List' button.\",\n      extractedData: {\n        buttonTextAfterClick: addBtnText,\n        confirmationText: confirmationText || null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 47679,
      "timestamp": "2025-09-15T10:10:57.426Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the Amazon simulation HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Take an initial screenshot\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // 3. Wait for the first product card to be visible (try multiple selectors for robustness)\n    let firstProductCard = null;\n    try {\n      firstProductCard = await page.waitForSelector('.product-card', { timeout: 5000 });\n    } catch {\n      // fallback: try nth-child selector\n      firstProductCard = await page.waitForSelector('.product-card:nth-child(1)', { timeout: 5000 });\n    }\n\n    // 4. Hover over the first product card (in case hover reveals buttons)\n    await firstProductCard.hover();\n    await page.waitForTimeout(300); // Allow hover effect\n\n    // 5. Click the first product card to open the detail modal (try to click image or card itself)\n    // Try to click the image inside the card\n    let clicked = false;\n    try {\n      const img = await firstProductCard.$('img');\n      if (img) {\n        await img.click();\n        clicked = true;\n      }\n    } catch {}\n    if (!clicked) {\n      // fallback: click the card itself\n      await firstProductCard.click();\n    }\n\n    // 6. Wait for the modal/dialog to appear (look for modal with product info)\n    // Use a variety of selectors for robustness\n    let modal = null;\n    try {\n      modal = await page.waitForSelector('.modal, .product-modal, .product-detail-modal, [role=\"dialog\"]', { timeout: 5000 });\n    } catch {\n      // fallback: look for a heading with the product title from mock data (Apple iPhone)\n      await page.waitForSelector('text=\"iPhone\"', { timeout: 5000 });\n      modal = await page.$('text=\"iPhone\"');\n    }\n\n    // 7. Wait for the \"Add to Wish List\" button to be visible in the modal\n    // Try different strategies: button text, class, aria-label, etc.\n    let addToWishlistBtn = null;\n    const wishlistBtnSelectors = [\n      'button.add-to-wishlist',\n      'button:has-text(\"Wish List\")',\n      'button:has-text(\"Add to Wish List\")',\n      'button[aria-label*=\"Wish\"]',\n      'button[title*=\"Wish\"]',\n      '.wishlist-btn',\n      'text=Add to Wish List',\n      'text=Wishlist'\n    ];\n    for (const selector of wishlistBtnSelectors) {\n      try {\n        addToWishlistBtn = await page.waitForSelector(selector, { timeout: 1500 });\n        if (addToWishlistBtn) break;\n      } catch {}\n    }\n\n    if (!addToWishlistBtn) {\n      throw new Error('Add to Wish List button not found in modal');\n    }\n\n    // 8. Take a screenshot before clicking \"Add to Wish List\"\n    const beforeWishlistShot = path.join(screenshotsDir, 'step_2_modal_open.png');\n    await page.screenshot({ path: beforeWishlistShot });\n    screenshots.push(beforeWishlistShot);\n\n    // 9. Click the \"Add to Wish List\" button\n    await addToWishlistBtn.click();\n\n    // 10. Wait for confirmation (e.g. a toast, a visual change, or button disabled)\n    let confirmationMessage = '';\n    let confirmed = false;\n    // Try to find a toast or confirmation element\n    const confirmationSelectors = [\n      '.toast-success',\n      '.wishlist-confirmation',\n      'text=Added to Wish List',\n      'text=Saved to Wish List',\n      'text=Item added',\n      'text=Added!'\n    ];\n    for (const selector of confirmationSelectors) {\n      try {\n        const confirm = await page.waitForSelector(selector, { timeout: 3000 });\n        if (confirm) {\n          confirmationMessage = await confirm.innerText();\n          confirmed = true;\n          break;\n        }\n      } catch {}\n    }\n    // fallback: check if button is now disabled or changed text\n    if (!confirmed) {\n      const btnText = await addToWishlistBtn.innerText();\n      if (/added|saved|in wish/i.test(btnText)) {\n        confirmationMessage = btnText;\n        confirmed = true;\n      }\n    }\n\n    // 11. Take a screenshot after successful action\n    const afterWishlistShot = path.join(screenshotsDir, 'step_3_wishlist_added.png');\n    await page.screenshot({ path: afterWishlistShot });\n    screenshots.push(afterWishlistShot);\n\n    // 12. Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      // Try heading in modal (h1, h2, h3, etc.)\n      for (let i = 1; i <= 3; i++) {\n        const titleEl = await page.$(`.modal h${i}, .product-modal h${i}, h${i}`);\n        if (titleEl) {\n          productTitle = (await titleEl.innerText()).trim();\n          if (productTitle.length > 0) break;\n        }\n      }\n      if (!productTitle) {\n        // fallback: grab first strong or bold text in modal\n        const strongEl = await page.$('.modal strong, .product-modal strong, strong');\n        if (strongEl) {\n          productTitle = (await strongEl.innerText()).trim();\n        }\n      }\n    } catch {}\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked the 'Add to Wish List' button; confirmed product was added to wishlist.\",\n      extractedData: {\n        productTitle,\n        confirmationMessage\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 62802,
      "timestamp": "2025-09-15T10:11:45.105Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 154395,
  "timestamp": "2025-09-15T10:10:13.512Z",
  "savedAt": "2025-09-15T10:12:47.907Z",
  "version": "1.0"
}