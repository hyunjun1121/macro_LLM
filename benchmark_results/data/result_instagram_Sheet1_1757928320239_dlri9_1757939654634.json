{
  "id": "instagram_Sheet1_1757928320239_dlri9_1757939654634",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320239_dlri9",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post's like button to be visible\n    const likeBtnSelector = '.posts .post:first-child .like-btn';\n    await page.waitForSelector(likeBtnSelector, { state: 'visible', timeout: 5000 });\n\n    // Wait for the heart icon inside the like button\n    const heartIconSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(heartIconSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Get the class of the heart icon before clicking\n    const heartClassBefore = await page.$eval(heartIconSelector, el => el.className);\n\n    // Click the like button\n    await page.click(likeBtnSelector);\n\n    // Wait for the heart icon to become \"filled\"\n    // We'll assume the \"filled\" state is represented by a class like 'fas fa-heart' (FontAwesome solid)\n    // and the unfilled is 'far fa-heart' (FontAwesome regular)\n    // Wait for the class to change\n    await page.waitForFunction(selector => {\n      const el = document.querySelector(selector);\n      return el && el.className.includes('fas') && !el.className.includes('far');\n    }, heartIconSelector, { timeout: 4000 });\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Get the class of the heart icon after clicking\n    const heartClassAfter = await page.$eval(heartIconSelector, el => el.className);\n\n    // Verify the heart icon is now \"filled\"\n    const isFilled = heartClassAfter.includes('fas') && !heartClassAfter.includes('far');\n\n    return {\n      success: isFilled,\n      action: \"Clicked like button on the first post and verified the heart icon became filled.\",\n      extractedData: {\n        heartClassBefore,\n        heartClassAfter,\n        isFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 23202,
      "timestamp": "2025-09-15T12:34:14.634Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post in the feed to appear\n    // Try using a distinctive selector: .posts > .post\n    await page.waitForSelector('.posts > .post');\n\n    // Locate the like button icon within the first post\n    // Using a robust selector: first .post in .posts, then find .like-btn i inside it\n    const firstPost = await page.$('.posts > .post');\n    if (!firstPost) throw new Error('First post not found');\n\n    // Optional: Take screenshot before clicking like\n    await firstPost.screenshot({ path: path.join(screenshotsDir, 'step_2_post_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_post_before_like.png'));\n\n    // Find the like button within the first post, try by aria-label or icon class if possible\n    // Fallback to: .like-btn i\n    const likeBtnIcon = await firstPost.$('.like-btn i');\n    if (!likeBtnIcon) throw new Error('Like button icon not found in first post');\n\n    // Optional: Get initial class attribute for later comparison\n    const initialClass = await likeBtnIcon.getAttribute('class');\n\n    // Click the like button icon\n    // Sometimes the button is the parent of the icon, try clicking the parent if available\n    const likeBtn = await likeBtnIcon.evaluateHandle(node => node.closest('.like-btn'));\n    if (likeBtn) {\n      await likeBtn.click();\n    } else {\n      await likeBtnIcon.click();\n    }\n\n    // Wait for the icon to become filled (class should change, e.g. fa-heart to fa-heart filled)\n    // Wait for a class change or for a specific class to be present (e.g., 'fas' for filled)\n    await page.waitForTimeout(300); // brief pause for UI update\n\n    // Re-fetch the icon to read the updated class (may change on click)\n    const likeBtnIconAfter = await firstPost.$('.like-btn i');\n    const afterClass = likeBtnIconAfter ? await likeBtnIconAfter.getAttribute('class') : null;\n\n    // Take screenshot after clicking like\n    await firstPost.screenshot({ path: path.join(screenshotsDir, 'step_3_post_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_post_after_like.png'));\n\n    // Verification: Check if the 'fa-heart' icon is now filled (FontAwesome uses 'fas' for solid/filled, 'far' for regular/outline)\n    // Accept 'fas fa-heart' or a class that indicates filled heart\n    const heartFilled = afterClass && afterClass.includes('fas') && afterClass.includes('fa-heart');\n\n    return {\n      success: !!heartFilled,\n      action: heartFilled\n        ? \"Clicked like button on first post and verified heart icon becomes filled\"\n        : \"Clicked like button but heart icon did NOT become filled\",\n      extractedData: {\n        initialLikeIconClass: initialClass,\n        afterClickLikeIconClass: afterClass,\n        heartFilled\n      },\n      screenshots,\n      error: heartFilled ? null : \"Heart icon did not become filled after clicking like\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 20981,
      "timestamp": "2025-09-15T12:34:37.836Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the posts feed to appear using a robust selector\n    // Instead of relying on just .post:first-child, locate the posts container and its first post\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n\n    // Find the first post element using XPath for robustness\n    const firstPost = await page.$('xpath=(//div[contains(@class, \"posts\")]//div[contains(@class, \"post\")])[1]');\n    if (!firstPost) {\n      throw new Error('First post not found in feed');\n    }\n\n    // Within the first post, find the like button (alternate selector strategy)\n    // Instead of assuming .like-btn, find a button with a heart icon inside\n    const likeBtn = await firstPost.$('button:has(i.fa-heart)');\n    if (!likeBtn) {\n      throw new Error('Like button with heart icon not found in first post');\n    }\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button\n    await likeBtn.click();\n\n    // Wait for the heart icon to become filled (fa-solid or similar)\n    // Wait for the icon inside the like button to change class to indicate \"liked\"\n    // Use XPath to get the <i> element inside the like button after click\n    const heartIconSelector = 'i.fa-heart';\n    // Wait for the 'liked' state: it may add fa-solid or a 'liked' class, so check for that\n    // Try to wait for the <i> to have either 'fa-solid' or 'liked' in its classList\n    await page.waitForFunction(\n      (post) => {\n        const btn = post.querySelector('button:has(i.fa-heart)');\n        if (!btn) return false;\n        const icon = btn.querySelector('i.fa-heart');\n        if (!icon) return false;\n        // Check if it has 'fa-solid' or 'liked' in class\n        return icon.classList.contains('fa-solid') || icon.classList.contains('liked') || icon.style.color === 'red';\n      },\n      firstPost,\n      { timeout: 4000 }\n    );\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract actual class list and color for verification\n    const extractedData = await firstPost.evaluate(() => {\n      const btn = document.querySelector('div.posts .post:first-child button:has(i.fa-heart)');\n      if (!btn) return { heartIconClass: null, heartIconColor: null, liked: false };\n      const icon = btn.querySelector('i.fa-heart');\n      if (!icon) return { heartIconClass: null, heartIconColor: null, liked: false };\n      const cls = icon.className;\n      const color = window.getComputedStyle(icon).color;\n      // Heuristic for 'liked': fa-solid, or contains 'liked' class, or is red\n      const liked = cls.includes('fa-solid') || cls.includes('liked') || color.toLowerCase().includes('rgb(237, 73, 86)') || color.toLowerCase().includes('red');\n      return { heartIconClass: cls, heartIconColor: color, liked };\n    });\n\n    if (!extractedData.liked) {\n      throw new Error('Heart icon did not change to filled after like click');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked the like button on the first post and verified the heart icon became filled (liked).\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 20975,
      "timestamp": "2025-09-15T12:34:58.817Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 65158,
  "timestamp": "2025-09-15T12:34:14.634Z",
  "savedAt": "2025-09-15T12:35:19.792Z",
  "version": "1.0"
}