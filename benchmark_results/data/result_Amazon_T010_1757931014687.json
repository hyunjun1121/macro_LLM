{
  "id": "Amazon_T010_1757931014687",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to be visible\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n    // Click the first product card to open the product detail modal\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) {\n      throw new Error('No product card found on the page');\n    }\n    await firstProductCard.click();\n\n    // Wait for the product detail modal to appear\n    // Try several strategies for modal: look for a modal/dialog with an Add to Wish List button\n    let addToWishlistBtn = null;\n    for (let i = 0; i < 10; i++) {\n      // Wait a bit for modal to animate in\n      await page.waitForTimeout(400);\n      addToWishlistBtn = await page.$('.add-to-wishlist, button:has-text(\"Add to Wish List\"), text=\"Add to Wish List\"');\n      if (addToWishlistBtn) break;\n    }\n    if (!addToWishlistBtn) {\n      // Try alternative: within a modal/dialog\n      const modals = await page.$$('div[role=\"dialog\"], .modal, .product-modal');\n      for (const modal of modals) {\n        addToWishlistBtn = await modal.$('.add-to-wishlist, button:has-text(\"Add to Wish List\"), text=\"Add to Wish List\"');\n        if (addToWishlistBtn) break;\n      }\n    }\n    if (!addToWishlistBtn) {\n      throw new Error('Add to Wish List button not found in product modal');\n    }\n\n    // Take screenshot before clicking Add to Wish List\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // Click the Add to Wish List button\n    await addToWishlistBtn.click();\n\n    // Wait for confirmation or UI feedback (e.g., button changes, toast, etc.)\n    // Try to detect a confirmation, such as a toast, a checkmark, or button text change\n    let confirmationText = '';\n    let wishlistSuccess = false;\n    for (let i = 0; i < 10; i++) {\n      await page.waitForTimeout(400);\n      // Look for a toast/alert/confirmation\n      const toast = await page.$('.toast, .alert-success, .wishlist-confirmation, text=\"Added to Wish List\"');\n      if (toast) {\n        confirmationText = await toast.textContent();\n        wishlistSuccess = true;\n        break;\n      }\n      // Or check if the button changed (e.g., to \"Added\" or disabled)\n      const btnText = await addToWishlistBtn.textContent();\n      if (btnText && btnText.toLowerCase().includes('added')) {\n        confirmationText = btnText;\n        wishlistSuccess = true;\n        break;\n      }\n      // Or check for a checkmark icon near the button\n      const checkIcon = await page.$('.add-to-wishlist .fa-check, .add-to-wishlist .icon-check');\n      if (checkIcon) {\n        confirmationText = 'Checkmark shown';\n        wishlistSuccess = true;\n        break;\n      }\n    }\n\n    // Take screenshot after clicking Add to Wish List\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_add_to_wishlist.png'));\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    // Try common modal title selectors\n    const modalTitle = await page.$('.modal-title, .product-modal-title, .product-title, h2, h1');\n    if (modalTitle) {\n      productTitle = (await modalTitle.textContent())?.trim() || '';\n    }\n\n    return {\n      success: wishlistSuccess,\n      action: \"Opened first product modal and clicked 'Add to Wish List' button\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 47872,
      "timestamp": "2025-09-15T10:10:14.687Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for the products grid to be visible\n    // Try to select the first .product-card (by class, as per instructions)\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Use :nth-of-type(1) for robustness (in case :first-child is not actually .product-card)\n    const firstProductCard = await page.$('.product-card:nth-of-type(1)');\n    if (!firstProductCard) {\n      throw new Error('No product cards found on the page');\n    }\n\n    // Take a screenshot before interaction\n    const beforeModalShot = path.join(screenshotsDir, 'step_2_before_modal.png');\n    await page.screenshot({ path: beforeModalShot });\n    screenshots.push(beforeModalShot);\n\n    // Try clicking on the image or title inside the product card to open the detail modal\n    // Try image first\n    let detailTrigger = await firstProductCard.$('img');\n    if (!detailTrigger) {\n      // Fallback: try title\n      detailTrigger = await firstProductCard.$('h3, .product-title, a');\n    }\n    if (!detailTrigger) {\n      throw new Error('Could not find product trigger (image or title) inside first product card');\n    }\n\n    await detailTrigger.click();\n\n    // Wait for the modal or detail panel to appear (try generic modal selectors)\n    // Try to wait for a modal that contains an 'Add to Wish List' button\n    // Use an XPath to find the button for robustness\n    await page.waitForSelector('.modal, .product-modal, [role=\"dialog\"]', { timeout: 4000 }).catch(() => {}); // Don't fail if modal doesn't use these classes\n\n    // Now, wait for the 'Add to Wish List' button to show up (try multiple selector strategies)\n    const addToWishlistSelectors = [\n      '.add-to-wishlist', // class\n      'button:has-text(\"Add to Wish List\")', // Playwright text selector\n      'text=\"Add to Wish List\"', // Playwright text selector\n      '//button[contains(., \"Wish\") or contains(., \"wish\")]', // XPath for button containing 'Wish'\n      '//a[contains(., \"Wish\") or contains(., \"wish\")]' // Sometimes it's a link\n    ];\n    let addToWishlistButton = null;\n    for (const sel of addToWishlistSelectors) {\n      try {\n        if (sel.startsWith('//')) {\n          // XPath\n          addToWishlistButton = await page.$(sel);\n        } else {\n          addToWishlistButton = await page.$(sel);\n        }\n        if (addToWishlistButton) break;\n      } catch (e) {\n        // continue\n      }\n    }\n    if (!addToWishlistButton) {\n      throw new Error('Add to Wish List button not found in modal');\n    }\n\n    // Take a screenshot of the modal with button visible\n    const modalOpenShot = path.join(screenshotsDir, 'step_3_modal_open.png');\n    await page.screenshot({ path: modalOpenShot });\n    screenshots.push(modalOpenShot);\n\n    // Click the 'Add to Wish List' button\n    await addToWishlistButton.click();\n\n    // Wait for possible wishlist confirmation or UI feedback (e.g., a toast, button changes, or wishlist count increases)\n    // We'll look for any of the following:\n    // - Button text changes to \"Added\"\n    // - A toast/alert appears\n    // - \"Wish List\" count or icon updates\n\n    // Wait up to 3 seconds for visual feedback\n    let wishlistAdded = false;\n    let confirmationText = '';\n    for (let i = 0; i < 6; i++) {\n      // Check for changed button text\n      const btnText = await addToWishlistButton.innerText().catch(() => '');\n      if (btnText && /added|in wish/i.test(btnText)) {\n        wishlistAdded = true;\n        confirmationText = btnText;\n        break;\n      }\n      // Check for a toast/alert\n      const toast = await page.$('div.toast, .alert-success, .wishlist-confirm, .wishlist-toast');\n      if (toast) {\n        confirmationText = await toast.innerText().catch(() => '');\n        wishlistAdded = true;\n        break;\n      }\n      // Wait a bit before re-checking\n      await page.waitForTimeout(500);\n    }\n\n    // Take a screenshot after the action\n    const wishlistAddedShot = path.join(screenshotsDir, 'step_4_wishlist_added.png');\n    await page.screenshot({ path: wishlistAddedShot });\n    screenshots.push(wishlistAddedShot);\n\n    // Extract product title for reporting\n    let productTitle = '';\n    try {\n      // Try to get from modal title\n      const modalTitle = await page.$('.modal h2, .modal .product-title, [role=\"dialog\"] h2, [role=\"dialog\"] .product-title');\n      if (modalTitle) {\n        productTitle = (await modalTitle.innerText()).trim();\n      } else {\n        // Try to get from product card\n        const titleEl = await firstProductCard.$('h3, .product-title, a');\n        if (titleEl) {\n          productTitle = (await titleEl.innerText()).trim();\n        }\n      }\n    } catch (e) {\n      productTitle = '';\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product's detail modal and clicked the 'Add to Wish List' button. Verified feedback.\",\n      extractedData: {\n        productTitle,\n        wishlistAdded,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 53122,
      "timestamp": "2025-09-15T10:11:02.559Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the first product card (try multiple selector strategies)\n    // Try by role and text (robust for accessibility)\n    let productCard;\n    try {\n      productCard = await page.waitForSelector('.product-card', { timeout: 4000 });\n    } catch {\n      // Fallback: try by xpath\n      productCard = await page.waitForSelector('xpath=//div[contains(@class,\"product-card\")]', { timeout: 4000 });\n    }\n\n    // Take screenshot of the product list\n    const step2 = path.join(screenshotsDir, 'step_2_product_list.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the first product card to open the product detail modal\n    // Sometimes, product-card has clickable child; try click on image or title as fallback\n    let productCardClicked = false;\n    try {\n      await productCard.click();\n      productCardClicked = true;\n    } catch {\n      // Try clicking the image inside the card\n      try {\n        const image = await productCard.$('img');\n        if (image) {\n          await image.click();\n          productCardClicked = true;\n        }\n      } catch {}\n      // Try clicking the first link inside the card\n      if (!productCardClicked) {\n        try {\n          const link = await productCard.$('a');\n          if (link) {\n            await link.click();\n            productCardClicked = true;\n          }\n        } catch {}\n      }\n    }\n\n    // Wait for the modal/dialog to appear (look for 'Add to Wish List' button)\n    // Try various selectors for the button\n    // Try class, text, and xpath\n    let wishlistBtn;\n    try {\n      wishlistBtn = await page.waitForSelector('.add-to-wishlist', { timeout: 4000 });\n    } catch {\n      try {\n        wishlistBtn = await page.waitForSelector('button:has-text(\"Add to Wish List\")', { timeout: 4000 });\n      } catch {\n        wishlistBtn = await page.waitForSelector('xpath=//button[contains(text(),\"Add to Wish List\") or contains(., \"Add to Wish List\")]', { timeout: 4000 });\n      }\n    }\n\n    // Take screenshot of product modal\n    const step3 = path.join(screenshotsDir, 'step_3_product_modal.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Click the 'Add to Wish List' button\n    await wishlistBtn.click();\n\n    // Wait for confirmation or a change in the UI (e.g., button text changes, or a toast appears)\n    // Try waiting for the button to change text, or a toast/alert to appear\n    let confirmationText = '';\n    try {\n      await page.waitForSelector('.wishlist-confirmation, .toast-message, .alert-success, text=/added to wish/i', { timeout: 3000 });\n      // Try to extract confirmation\n      const confMsg = await page.$('.wishlist-confirmation, .toast-message, .alert-success');\n      if (confMsg) {\n        confirmationText = (await confMsg.textContent())?.trim();\n      } else {\n        // Try to find text in modal area\n        const modalRoot = await page.$('.modal, .product-modal, [role=\"dialog\"]');\n        if (modalRoot) {\n          const modalText = await modalRoot.textContent();\n          if (modalText && /added to wish/i.test(modalText)) {\n            confirmationText = modalText.match(/added to wish[^\\n]*/i)?.[0] || '';\n          }\n        }\n      }\n    } catch {\n      // As fallback, check if the button text changes (e.g., to \"Added to Wish List\")\n      try {\n        await page.waitForSelector('button:has-text(\"Added to Wish List\")', { timeout: 2000 });\n        confirmationText = \"Button changed to 'Added to Wish List'\";\n      } catch {}\n    }\n\n    // Take screenshot after attempting to add to wishlist\n    const step4 = path.join(screenshotsDir, 'step_4_wishlist_added.png');\n    await page.screenshot({ path: step4 });\n    screenshots.push(step4);\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      // Try to get from modal header, h2, or product-modal\n      const modalHeader = await page.$('.modal h2, .product-modal h2, [role=\"dialog\"] h2');\n      if (modalHeader) {\n        productTitle = (await modalHeader.textContent())?.trim();\n      } else {\n        // Try finding any large text in modal\n        const modalRoot = await page.$('.modal, .product-modal, [role=\"dialog\"]');\n        if (modalRoot) {\n          const headings = await modalRoot.$$('h1,h2,h3');\n          for (const h of headings) {\n            const txt = (await h.textContent())?.trim();\n            if (txt && txt.length > 5) {\n              productTitle = txt;\n              break;\n            }\n          }\n        }\n      }\n    } catch {}\n\n    // Prepare extracted data\n    const extractedData = {\n      productTitle,\n      wishlistConfirmation: confirmationText,\n    };\n\n    return {\n      success: true,\n      action: \"Opened first product detail modal and clicked 'Add to Wish List' button.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51686,
      "timestamp": "2025-09-15T10:11:55.681Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 152680,
  "timestamp": "2025-09-15T10:10:14.687Z",
  "savedAt": "2025-09-15T10:12:47.367Z",
  "version": "1.0"
}