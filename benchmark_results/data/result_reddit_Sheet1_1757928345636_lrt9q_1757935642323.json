{
  "id": "reddit_Sheet1_1757928345636_lrt9q_1757935642323",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345636_lrt9q",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field and verify focus\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_input_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_input_focused.png'));\n\n    // Use Tab key to navigate to the create post button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(500); // Wait for navigation\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_tab_to_create_post.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_tab_to_create_post.png'));\n\n    // Verify that the create post button is focused\n    const isCreatePostFocused = await page.evaluate(() => document.activeElement.classList.contains('create-post-btn'));\n    if (!isCreatePostFocused) {\n      throw new Error('Create Post button is not focused after Tab navigation');\n    }\n\n    // Use Tab key to navigate to the theme toggle button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(500); // Wait for navigation\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_tab_to_theme_toggle.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_tab_to_theme_toggle.png'));\n\n    // Verify that the theme toggle button is focused\n    const isThemeToggleFocused = await page.evaluate(() => document.activeElement.classList.contains('theme-toggle-btn'));\n    if (!isThemeToggleFocused) {\n      throw new Error('Theme Toggle button is not focused after Tab navigation');\n    }\n\n    return {\n      success: true,\n      action: \"Successfully navigated through interactive elements using Tab key and verified focus\",\n      extractedData: {\n        isCreatePostFocused,\n        isThemeToggleFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19810,
      "timestamp": "2025-09-15T11:27:22.323Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Start keyboard navigation using the Tab key\n    const interactiveElements = [\n      '#searchInput', // Search Input\n      'button.theme-toggle-btn', // Theme Toggle Button\n      'button.create-post-btn', // Create Post Button\n      'button.community-link', // First Community Button\n      'button.community-link:nth-of-type(2)', // Second Community Button\n      'button.community-link:nth-of-type(3)', // Third Community Button\n      'button.community-link:nth-of-type(4)', // Fourth Community Button\n      'button.quick-action-btn:nth-of-type(1)', // View Profile\n      'button.quick-action-btn:nth-of-type(2)', // Create Post\n      'button.quick-action-btn:nth-of-type(3)', // Saved Posts\n    ];\n\n    for (const selector of interactiveElements) {\n      await page.waitForSelector(selector);\n      await page.focus(selector); // Focus on the element\n      await page.keyboard.press('Tab'); // Simulate Tab key press\n      await page.screenshot({ path: path.join(screenshotsDir, `step_focus_${selector.replace(/[^a-zA-Z0-9]/g, '_')}.png`) });\n      screenshots.push(path.join(screenshotsDir, `step_focus_${selector.replace(/[^a-zA-Z0-9]/g, '_')}.png`));\n    }\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17600,
      "timestamp": "2025-09-15T11:27:42.133Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n    \n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab'); // Navigate to next element\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_focus_search_input.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_focus_search_input.png'));\n\n    // Focus on the create post button\n    await page.waitForSelector('button.create-post-btn');\n    await page.keyboard.press('Tab'); // Navigate to create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_focus_create_post_button.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_focus_create_post_button.png'));\n\n    // Focus on the theme toggle button\n    await page.keyboard.press('Tab'); // Navigate to theme toggle button\n    await page.waitForSelector('button.theme-toggle-btn');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_focus_theme_toggle_button.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_focus_theme_toggle_button.png'));\n\n    // Verify that the last focused element is the theme toggle button\n    const focusedElement = await page.evaluate(() => document.activeElement);\n    const isThemeToggleFocused = focusedElement.classList.contains('theme-toggle-btn');\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {\n        isThemeToggleFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15847,
      "timestamp": "2025-09-15T11:27:59.733Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 53257,
  "timestamp": "2025-09-15T11:27:22.323Z",
  "savedAt": "2025-09-15T11:28:15.580Z",
  "version": "1.0"
}