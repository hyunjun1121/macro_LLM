{
  "id": "Amazon_T010_1757931036110",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the first product card to be visible\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Open the first product detail modal (simulate click on first product card)\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the modal/dialog to appear (look for modal or product detail overlay)\n    // Try common modal selectors or look for \"Add to Wish List\" button\n    let addToWishlistBtn = null;\n    for (let i = 0; i < 10; i++) {\n      addToWishlistBtn = await page.$('.add-to-wishlist');\n      if (addToWishlistBtn) break;\n      await page.waitForTimeout(300);\n    }\n    if (!addToWishlistBtn) throw new Error('Add to Wish List button not found in modal');\n\n    // Take screenshot of the modal open\n    const step2 = path.join(screenshotsDir, 'step_2_modal_open.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the \"Add to Wish List\" button\n    await addToWishlistBtn.click();\n\n    // Wait for confirmation or UI feedback (e.g., button changes, toast, etc.)\n    // Try to detect a change in the button or a confirmation message\n    let confirmationText = '';\n    for (let i = 0; i < 10; i++) {\n      // Try to find a success message or a state change\n      const btnText = await page.evaluate(() => {\n        const btn = document.querySelector('.add-to-wishlist');\n        return btn ? btn.innerText : '';\n      });\n      if (/added|added to wish list|in wish list/i.test(btnText)) {\n        confirmationText = btnText;\n        break;\n      }\n      // Look for a toast/alert\n      const toast = await page.$('.toast, .alert, .wishlist-confirmation');\n      if (toast) {\n        confirmationText = await toast.innerText();\n        break;\n      }\n      await page.waitForTimeout(300);\n    }\n\n    // Take screenshot after adding to wishlist\n    const step3 = path.join(screenshotsDir, 'step_3_added_to_wishlist.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Extract product title from the modal for verification\n    let productTitle = '';\n    try {\n      productTitle = await page.evaluate(() => {\n        // Try to find a title in the modal\n        const modal = document.querySelector('.modal, .product-modal, .product-detail-modal') || document;\n        const h1 = modal.querySelector('h1, .product-title, .modal-title');\n        return h1 ? h1.innerText : '';\n      });\n    } catch {}\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked 'Add to Wish List'. Verified UI feedback.\",\n      extractedData: {\n        productTitle: productTitle || null,\n        confirmationText: confirmationText || null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 46987,
      "timestamp": "2025-09-15T10:10:36.110Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear\n    // Try a robust selector: first \".product-card\" or fallback to xpath for img alt/title\n    const productCardSelector = '.product-card';\n    await page.waitForSelector(productCardSelector, { timeout: 5000 });\n\n    // Find the first product card and click it (to open modal/detail)\n    const productCards = await page.$$(productCardSelector);\n    if (productCards.length === 0) throw new Error(\"No product cards found on page.\");\n    // For extra robustness, scroll into view\n    await productCards[0].scrollIntoViewIfNeeded();\n    await productCards[0].click();\n\n    // Wait for the product modal/dialog to appear \n    // Try modal by role (dialog), or fallback to modal class, or an \".add-to-wishlist\" button presence\n    let modalSelector;\n    // Try aria role first\n    const dialog = await page.waitForSelector('[role=\"dialog\"], .modal, .product-modal, .product-detail-modal, .modal-content, .product-details', {timeout: 4000}).catch(() => null);\n    if (dialog) {\n      modalSelector = await dialog.evaluateHandle(el => el);\n    } else {\n      // fallback to body, hope wishlist button appears globally\n      modalSelector = page;\n    }\n\n    // Wait for the Add to Wish List button to show up in the modal/dialog\n    // Try different selector strategies:\n    // - Button with .add-to-wishlist\n    // - Button containing wishlist text (case insensitive)\n    // - [data-*] attribute\n    let wishlistButton = null;\n    // 1. Try class selector inside modal/dialog scope\n    wishlistButton = await modalSelector.$('.add-to-wishlist');\n    // 2. Try text-based selector (case insensitive)\n    if (!wishlistButton) {\n      wishlistButton = await modalSelector.$('button:has-text(\"Wish List\")');\n    }\n    // 3. Fallback: try XPath for button containing text\n    if (!wishlistButton) {\n      const [btn] = await modalSelector.$x('.//button[contains(translate(.,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"abcdefghijklmnopqrstuvwxyz\"),\"wish list\")]');\n      wishlistButton = btn;\n    }\n    if (!wishlistButton) throw new Error(\"Add to Wish List button not found in product modal.\");\n\n    // Wait for button to be enabled/clickable\n    await wishlistButton.waitForElementState('visible', { timeout: 2000 });\n\n    // Take screenshot before wishlist action\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_modal.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_modal.png'));\n\n    // Click the Add to Wish List button\n    await wishlistButton.click();\n\n    // Wait for some confirmation of addition (toast, icon, or state change)\n    // Try: wait for button to become disabled, or for some confirmation message, or \"Added\" text\n    let confirmation = null;\n    try {\n      await page.waitForSelector('.wishlist-confirmation, .toast-message, .added-to-wishlist, .wishlist-success, .add-to-wishlist[disabled], button:has-text(\"Added\")', { timeout: 3000 });\n      confirmation = true;\n    } catch (e) {\n      confirmation = false;\n    }\n\n    // Take screenshot after wishlist action\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_wishlist.png'));\n\n    // Try to extract product title from modal or card\n    let productTitle = \"\";\n    try {\n      // Priority: modal/dialog title\n      let titleHandle = await modalSelector.$('h2, h1, .product-title, .modal-title, .product-detail-title');\n      if (!titleHandle) {\n        // Fallback to first product card's title\n        titleHandle = await productCards[0].$('h2, h3, .product-title, .title');\n      }\n      if (titleHandle) {\n        productTitle = (await titleHandle.innerText()).trim();\n      }\n    } catch {}\n\n    return {\n      success: !!confirmation,\n      action: \"Opened first product's detail modal and clicked the Add to Wish List button.\",\n      extractedData: {\n        productTitle,\n        wishlistConfirmed: confirmation\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51114,
      "timestamp": "2025-09-15T10:11:23.097Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const step1Path = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1Path });\n    screenshots.push(step1Path);\n\n    // Wait for the first product card to appear using a selector NOT used before (try to be more specific)\n    // We will try using an XPath that finds the first product card by alt text, since images are shown in the HTML\n    // But let's also back up with a generic CSS selector if needed\n\n    // Try to locate the first product card by image alt text (as a way to identify)\n    // Get the first product image alt\n    let productAlt;\n    try {\n      await page.waitForSelector('.product-card img[alt]', { timeout: 4000 });\n      productAlt = await page.$eval('.product-card img[alt]', img => img.getAttribute('alt'));\n    } catch {\n      // fallback: just use product-card\n      productAlt = null;\n    }\n\n    // Click the first product card to open the detail modal\n    let productCardEl = null;\n    if (productAlt) {\n      // Use XPath to find the parent card by image alt\n      const cardHandles = await page.$x(`//img[@alt=\"${productAlt}\"]/ancestor::*[contains(@class, \"product-card\")]`);\n      if (cardHandles.length > 0) {\n        productCardEl = cardHandles[0];\n        await productCardEl.click();\n      }\n    } else {\n      // Fallback: use first .product-card\n      await page.waitForSelector('.product-card', { timeout: 4000 });\n      const cards = await page.$$('.product-card');\n      if (cards.length === 0) throw new Error('No product cards found');\n      productCardEl = cards[0];\n      await productCardEl.click();\n    }\n\n    // Wait for the modal/dialog to appear for product details\n    // We'll try a few different selectors to be robust; many implementations use .modal, .dialog, or aria-modal\n    let modalSelector = '.modal, .product-modal, [role=\"dialog\"], .product-detail-modal';\n    await page.waitForSelector(modalSelector, { timeout: 5000 });\n\n    // Take screenshot of opened product modal\n    const step2Path = path.join(screenshotsDir, 'step_2_modal_open.png');\n    await page.screenshot({ path: step2Path });\n    screenshots.push(step2Path);\n\n    // Wait for the 'Add to Wish List' button inside the modal\n    // Try different selectors: text, class, or button aria-label\n    let wishlistButton = null;\n    // Try by text content\n    try {\n      wishlistButton = await page.waitForSelector('button:has-text(\"Add to Wish List\")', { timeout: 2500 });\n    } catch {\n      // Try by class\n      try {\n        wishlistButton = await page.waitForSelector('.add-to-wishlist', { timeout: 2500 });\n      } catch {\n        // Try by button aria-label\n        wishlistButton = await page.waitForSelector('button[aria-label*=\"Wish\"]', { timeout: 2500 });\n      }\n    }\n    if (!wishlistButton) throw new Error('Add to Wish List button not found');\n\n    // Click the 'Add to Wish List' button\n    await wishlistButton.click();\n\n    // Wait for a toast, alert, or confirmation in the modal\n    // Try to find any confirmation\n    let confirmationText = '';\n    try {\n      // Try a toast class\n      await page.waitForSelector('.toast, .alert-success, .wishlist-confirm', { timeout: 4000 });\n      confirmationText = await page.$eval('.toast, .alert-success, .wishlist-confirm', el => el.textContent.trim());\n    } catch {\n      // Try to look for a change in the button (e.g., \"Added\", \"In Wish List\")\n      try {\n        await page.waitForSelector('button:has-text(\"Added\")', { timeout: 2500 });\n        confirmationText = 'Product added to wish list (button state changed)';\n      } catch {\n        confirmationText = 'No explicit confirmation found, but button was clicked';\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    const step3Path = path.join(screenshotsDir, 'step_3_after_add_wishlist.png');\n    await page.screenshot({ path: step3Path });\n    screenshots.push(step3Path);\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      // Try various selectors; usually modals have a .title or h2/h3 inside\n      const modalTitle = await page.$eval(\n        '.modal h2, .modal .title, [role=\"dialog\"] h2, .product-detail-modal h2, .modal-header h2',\n        el => el.textContent.trim()\n      );\n      productTitle = modalTitle;\n    } catch {\n      productTitle = productAlt || '[Unknown Title]';\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product's detail modal and clicked 'Add to Wish List' using alternative selector strategies. Confirmation: \" + confirmationText,\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51565,
      "timestamp": "2025-09-15T10:12:14.211Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 149666,
  "timestamp": "2025-09-15T10:10:36.110Z",
  "savedAt": "2025-09-15T10:13:05.776Z",
  "version": "1.0"
}