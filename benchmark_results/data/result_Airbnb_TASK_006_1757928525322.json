{
  "id": "Airbnb_TASK_006_1757928525322",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing card for Jun's first listing\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get initial favorite state (e.g., aria-pressed, class, or icon)\n    const initialState = await page.$eval(\n      favoriteBtnSelector,\n      el => ({\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent\n      })\n    );\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // Wait for button state to change (e.g., aria-pressed toggles or class changes)\n    await page.waitForFunction(\n      (selector, prevState) => {\n        const el = document.querySelector(selector);\n        if (!el) return false;\n        return (\n          el.getAttribute('aria-pressed') !== prevState.ariaPressed ||\n          el.className !== prevState.class ||\n          el.textContent !== prevState.text\n        );\n      },\n      favoriteBtnSelector,\n      initialState,\n      { timeout: 3000 }\n    );\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Extract the new button state\n    const newState = await page.$eval(\n      favoriteBtnSelector,\n      el => ({\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent\n      })\n    );\n\n    // Check localStorage for favorites (try common keys)\n    const localStorageData = await page.evaluate(() => {\n      // Try to find a favorites key in localStorage\n      const keys = Object.keys(window.localStorage);\n      let favoritesKey = keys.find(k =>\n        k.toLowerCase().includes('favorite') || k.toLowerCase().includes('favourites')\n      );\n      let favoritesValue = favoritesKey ? window.localStorage.getItem(favoritesKey) : null;\n      let favoritesParsed = null;\n      try {\n        favoritesParsed = favoritesValue ? JSON.parse(favoritesValue) : null;\n      } catch (e) {\n        favoritesParsed = favoritesValue;\n      }\n      return {\n        favoritesKey,\n        favoritesValue,\n        favoritesParsed,\n        allLocalStorage: Object.fromEntries(keys.map(k => [k, window.localStorage.getItem(k)]))\n      };\n    });\n\n    // Check if 'jun_1' is present in favorites\n    let isJun1Favorited = false;\n    if (localStorageData.favoritesParsed) {\n      if (Array.isArray(localStorageData.favoritesParsed)) {\n        isJun1Favorited = localStorageData.favoritesParsed.includes('jun_1');\n      } else if (typeof localStorageData.favoritesParsed === 'object' && localStorageData.favoritesParsed !== null) {\n        isJun1Favorited = Object.values(localStorageData.favoritesParsed).includes('jun_1');\n      } else if (typeof localStorageData.favoritesParsed === 'string') {\n        isJun1Favorited = localStorageData.favoritesParsed.includes('jun_1');\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, 확인 버튼 상태 변화 및 localStorage 업데이트\",\n      extractedData: {\n        initialButtonState: initialState,\n        newButtonState: newState,\n        localStorageFavoritesKey: localStorageData.favoritesKey,\n        localStorageFavoritesValue: localStorageData.favoritesValue,\n        isJun1Favorited,\n        allLocalStorage: localStorageData.allLocalStorage\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18433,
      "timestamp": "2025-09-15T09:28:45.322Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot before any action\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the listing card for Jun's first property (jun_1) to be present\n    // Try a direct data-listing-id attribute selector (different than previous attempts)\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Find the favorite (즐겨찾기) button inside this listing\n    // Use a combined selector for robustness\n    // The button likely has class 'listing-favorite', possibly a <button> or <span>\n    const favBtnSelector = `${listingSelector} .listing-favorite`;\n\n    // Wait for the favorite button to appear and be visible\n    await page.waitForSelector(favBtnSelector, { state: 'visible', timeout: 5000 });\n\n    // Get the initial state of the favorite button (e.g., aria-pressed, class, or inner icon/text)\n    let initialBtnState = await page.$eval(\n      favBtnSelector,\n      (el) => ({\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        html: el.innerHTML,\n        text: el.innerText\n      })\n    );\n\n    // Take screenshot before clicking favorite\n    const step2 = path.join(screenshotsDir, 'step_2_before_fav_click.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the favorite button (use force in case of overlay)\n    await page.click(favBtnSelector, { timeout: 3000 });\n\n    // Wait for the button state to change (e.g., aria-pressed toggles, or class changes)\n    // We'll poll and compare for up to 3 seconds\n    let postClickBtnState;\n    for (let tries = 0; tries < 12; tries++) {\n      await page.waitForTimeout(250);\n      postClickBtnState = await page.$eval(\n        favBtnSelector,\n        (el) => ({\n          ariaPressed: el.getAttribute('aria-pressed'),\n          class: el.className,\n          html: el.innerHTML,\n          text: el.innerText\n        })\n      );\n      // If any of the state values differ, break\n      if (\n        postClickBtnState.ariaPressed !== initialBtnState.ariaPressed ||\n        postClickBtnState.class !== initialBtnState.class ||\n        postClickBtnState.html !== initialBtnState.html\n      ) break;\n    }\n\n    // Take screenshot after clicking favorite\n    const step3 = path.join(screenshotsDir, 'step_3_after_fav_click.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Now check localStorage for the favorites list\n    // Try two strategies: first, get 'airbnb_favorites', fallback to any key with 'favorite'\n    const localStorageData = await page.evaluate(() => {\n      // Try common localStorage keys for favorites\n      let favs = null;\n      if (window.localStorage.getItem('airbnb_favorites')) {\n        try {\n          favs = JSON.parse(window.localStorage.getItem('airbnb_favorites'));\n        } catch (e) {\n          favs = window.localStorage.getItem('airbnb_favorites');\n        }\n      }\n      if (!favs) {\n        for (let i = 0; i < window.localStorage.length; ++i) {\n          const key = window.localStorage.key(i);\n          if (key.toLowerCase().includes('favorite')) {\n            try {\n              favs = JSON.parse(window.localStorage.getItem(key));\n            } catch (e) {\n              favs = window.localStorage.getItem(key);\n            }\n            break;\n          }\n        }\n      }\n      return {\n        allLocalStorage: { ...window.localStorage },\n        favorites: favs\n      };\n    });\n\n    // Extract if 'jun_1' is present in favorites (as string or array)\n    let isJun1Favorited = false;\n    if (Array.isArray(localStorageData.favorites)) {\n      isJun1Favorited = localStorageData.favorites.includes('jun_1');\n    } else if (typeof localStorageData.favorites === 'string') {\n      isJun1Favorited = localStorageData.favorites.includes('jun_1');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state change and localStorage update\",\n      extractedData: {\n        initialBtnState,\n        postClickBtnState,\n        localStorageFavorites: localStorageData.favorites,\n        isJun1Favorited\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22069,
      "timestamp": "2025-09-15T09:29:03.755Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun's 첫 번째 숙소 card using data-listing-id and ensure favorite button is present\n    const junListingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(junListingSelector, { timeout: 5000 });\n\n    // Wait for the favorite button inside Jun's listing\n    const favoriteBtnSelector = `${junListingSelector} .listing-favorite`;\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Evaluate the favorite button's initial state (e.g., aria-pressed, class, icon, or text)\n    const initialFavoriteState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        icon: el.querySelector('i') ? el.querySelector('i').className : null\n      };\n    });\n\n    // Get localStorage \"favorites\" before click\n    const initialLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        return JSON.parse(localStorage.getItem('favorites') || '[]');\n      } catch { return []; }\n    });\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // Wait for the button to visually change (class or aria-pressed)\n    await page.waitForTimeout(500); // Small wait in case of UI animation\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Evaluate the favorite button's new state\n    const afterFavoriteState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        icon: el.querySelector('i') ? el.querySelector('i').className : null\n      };\n    });\n\n    // Get localStorage \"favorites\" after click\n    const afterLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        return JSON.parse(localStorage.getItem('favorites') || '[]');\n      } catch { return []; }\n    });\n\n    // Determine if jun_1 was added or removed (toggle)\n    const wasFavorite = initialLocalStorageFavorites.includes('jun_1');\n    const isFavoriteNow = afterLocalStorageFavorites.includes('jun_1');\n\n    // Compose result data\n    const extractedData = {\n      favoriteButtonBefore: initialFavoriteState,\n      favoriteButtonAfter: afterFavoriteState,\n      localStorageFavoritesBefore: initialLocalStorageFavorites,\n      localStorageFavoritesAfter: afterLocalStorageFavorites,\n      jun_1_was_favorite: wasFavorite,\n      jun_1_is_favorite_now: isFavoriteNow\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state and localStorage update.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 31894,
      "timestamp": "2025-09-15T09:29:25.824Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 72396,
  "timestamp": "2025-09-15T09:28:45.322Z",
  "savedAt": "2025-09-15T09:29:57.718Z",
  "version": "1.0"
}