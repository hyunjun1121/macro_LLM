{
  "id": "Amazon_T010_1757931045166",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to appear\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Click the first product card to open the product detail modal\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the product detail modal/dialog to appear\n    // Try common modal selectors and fallback to waiting for 'Add to Wish List' button\n    let addToWishlistBtn = null;\n    try {\n      await page.waitForSelector('.add-to-wishlist', { timeout: 4000 });\n      addToWishlistBtn = await page.$('.add-to-wishlist');\n    } catch {\n      // Try alternative: button or a with text\n      addToWishlistBtn = await page.$('button:has-text(\"Add to Wish List\"), a:has-text(\"Add to Wish List\")');\n      if (!addToWishlistBtn) throw new Error('Add to Wish List button not found');\n    }\n\n    // Take screenshot of the modal with the Add to Wish List button visible\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_open.png'));\n\n    // Click the 'Add to Wish List' button\n    await addToWishlistBtn.click();\n\n    // Wait for confirmation or UI feedback (e.g., button changes, toast, etc.)\n    // Try to detect a success message, or button state change\n    let wishListConfirmation = null;\n    try {\n      // Wait for a possible confirmation message or button state change\n      await page.waitForSelector('.wishlist-success, .wishlist-added, .add-to-wishlist.added, text=/Added to Wish List/i', { timeout: 4000 });\n      wishListConfirmation = await page.$('.wishlist-success, .wishlist-added, .add-to-wishlist.added');\n    } catch {\n      // Fallback: check if button text/content changed\n      const btnText = await page.evaluate(el => el.textContent, addToWishlistBtn);\n      if (/added to wish list/i.test(btnText)) {\n        wishListConfirmation = addToWishlistBtn;\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_add_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_add_wishlist.png'));\n\n    // Extract product title for verification\n    let productTitle = '';\n    try {\n      // Try modal title, fallback to product card title\n      const modalTitle = await page.$('.product-modal .product-title, .modal .product-title, .product-detail-title');\n      if (modalTitle) {\n        productTitle = await page.evaluate(el => el.textContent.trim(), modalTitle);\n      } else {\n        // Fallback: get from the card\n        const cardTitle = await page.$('.product-card .product-title');\n        if (cardTitle) {\n          productTitle = await page.evaluate(el => el.textContent.trim(), cardTitle);\n        }\n      }\n    } catch {}\n\n    // Prepare extracted data\n    const extractedData = {\n      productTitle,\n      wishlistConfirmation: !!wishListConfirmation\n    };\n\n    return {\n      success: true,\n      action: \"Opened the first product detail modal and clicked 'Add to Wish List'. Verified wishlist action.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 51489,
      "timestamp": "2025-09-15T10:10:45.166Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Step 1: Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Step 2: Wait for the first product card to be visible\n    // Use a flexible selector: select the first element with class containing 'product-card'\n    // Try with xpath to avoid :first-child pseudo-class\n    const [firstProductCard] = await page.$x(\"//*[contains(@class, 'product-card')][1]\");\n    if (!firstProductCard) throw new Error(\"First product card not found\");\n    await firstProductCard.scrollIntoViewIfNeeded();\n\n    // Take screenshot before opening modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_product_card_visible.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_card_visible.png'));\n\n    // Step 3: Click the product card to open the product detail modal\n    // Try clicking on the image inside the card, or the card itself if no image\n    const productImage = await firstProductCard.$('img');\n    if (productImage) {\n      await productImage.click();\n    } else {\n      await firstProductCard.click();\n    }\n\n    // Step 4: Wait for the modal/dialog to appear\n    // Wait for an element that looks like a modal - try a div with class containing 'modal' and visible\n    await page.waitForSelector(\"div[class*='modal'], div[role='dialog']\", { timeout: 4000 });\n\n    // Take screenshot after modal appears\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n\n    // Step 5: Find and click the 'Add to Wish List' button inside the modal\n    // Try multiple selector strategies: text, button, icon, or class\n    let addToWishlistButton = await page.$(\"button.add-to-wishlist\");\n    if (!addToWishlistButton) {\n      // Try to find by button text content\n      addToWishlistButton = await page.$(\"//button[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),'wish')]\", { strict: false });\n    }\n    if (!addToWishlistButton) {\n      // Try to find a clickable element with heart icon or aria-label\n      addToWishlistButton = await page.$(\"button[aria-label*='Wish'], button i.fa-heart, button i.fas.fa-heart\");\n    }\n    if (!addToWishlistButton) {\n      throw new Error(\"Add to Wish List button not found in modal\");\n    }\n    await addToWishlistButton.scrollIntoViewIfNeeded();\n    await addToWishlistButton.click();\n\n    // Wait for some visual confirmation - ideally, a toast or \"Added to Wish List\" message\n    // Wait for up to 2s for a confirmation message or a wishlist icon to become active\n    let confirmationText = '';\n    try {\n      const confirmation = await page.waitForSelector(\n        \"text=/added to wish list/i, div.toast-success, .wishlist-added, .add-to-wishlist[aria-pressed='true'], .add-to-wishlist.active\",\n        { timeout: 2000 }\n      );\n      if (confirmation) {\n        confirmationText = await confirmation.textContent();\n      }\n    } catch (e) {\n      // No visible confirmation, may still have succeeded\n    }\n\n    // Take screenshot after clicking 'Add to Wish List'\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_add_to_wishlist.png'));\n\n    // Step 6: Optionally, extract the product name from the modal for verification\n    let productTitle = '';\n    try {\n      const titleEl = await page.$(\"div[class*='modal'] h2, div[role='dialog'] h2, div[class*='modal'] .product-title, div[role='dialog'] .product-title\");\n      if (titleEl) productTitle = (await titleEl.textContent()).trim();\n    } catch (e) {\n      // ignore\n    }\n\n    return {\n      success: true,\n      action: \"Opened the first product's detail modal and clicked 'Add to Wish List'.\",\n      extractedData: {\n        productTitle,\n        confirmationText: confirmationText ? confirmationText.trim() : null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 49662,
      "timestamp": "2025-09-15T10:11:36.655Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the product card grid to appear - try a generic grid/container selector\n    await page.waitForSelector('.product-list, .featured-products, .main-products, .product-card', { timeout: 5000 });\n\n    // Try to find the first product card using XPath as a different strategy\n    const [firstProductCard] = await page.$x(\"(//div[contains(@class, 'product-card')])[1]\");\n    if (!firstProductCard) {\n      throw new Error('First product card not found');\n    }\n\n    // Scroll into view in case of lazy loading\n    await firstProductCard.scrollIntoViewIfNeeded();\n\n    // Take screenshot of product card\n    await firstProductCard.screenshot({ path: path.join(screenshotsDir, 'step_2_product_card.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_card.png'));\n\n    // Click on the product card (simulate opening the product modal/detail)\n    // Try clicking on a child element with an image or title to ensure modal opens\n    const clickable = await firstProductCard.$(\"img, .product-title, .title, h2, h3\");\n    if (clickable) {\n      await clickable.click();\n    } else {\n      await firstProductCard.click();\n    }\n\n    // Wait for product detail modal/dialog to appear\n    // Use a mix of selectors for different modal implementations\n    const modalSelectorCandidates = [\n      '.product-modal',\n      '.modal[role=\"dialog\"]',\n      '.product-detail-modal',\n      '.modal-content',\n      '//div[contains(@class,\"modal\") and contains(@style,\"display: block\")]',\n      '//div[contains(@class,\"product-detail\")]'\n    ];\n    let modalFound = false;\n    for (const sel of modalSelectorCandidates) {\n      try {\n        if (sel.startsWith('//')) {\n          const modalHandle = await page.waitForSelector(`xpath=${sel}`, { timeout: 2000 });\n          if (modalHandle) {\n            modalFound = true;\n            break;\n          }\n        } else {\n          const modalHandle = await page.waitForSelector(sel, { timeout: 2000 });\n          if (modalHandle) {\n            modalFound = true;\n            break;\n          }\n        }\n      } catch {}\n    }\n    if (!modalFound) {\n      throw new Error('Product detail modal did not appear');\n    }\n\n    // Screenshot of the modal open\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_modal_open.png'));\n\n    // Look for the 'Add to Wish List' button in the modal\n    // Try several selector strategies (text, aria-label, class)\n    const wishlistButtonSelectors = [\n      \"button.add-to-wishlist\",\n      \"button[aria-label*='wish']\",\n      \"button:has-text('Wish List')\",\n      \"button:has-text('Add to Wish List')\",\n      \"//button[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'wish')]\"\n    ];\n    let wishlistBtn = null;\n    for (const sel of wishlistButtonSelectors) {\n      try {\n        if (sel.startsWith('//')) {\n          wishlistBtn = await page.$(`xpath=${sel}`);\n        } else {\n          wishlistBtn = await page.$(sel);\n        }\n        if (wishlistBtn) break;\n      } catch {}\n    }\n    if (!wishlistBtn) {\n      throw new Error('Add to Wish List button not found in modal');\n    }\n\n    // Scroll to button and click\n    await wishlistBtn.scrollIntoViewIfNeeded();\n    await wishlistBtn.hover();\n    await wishlistBtn.click();\n\n    // Wait for a confirmation UI or feedback (e.g., success message, button state change, toast)\n    // Try several selectors for confirmation\n    let confirmationText = '';\n    const confirmationSelectors = [\n      \".wishlist-success, .toast-success, .alert-success, .wishlist-confirmation\",\n      \"//div[contains(text(),'added to wish list') or contains(text(),'Added to Wish List')]\",\n      \"button.add-to-wishlist[disabled], button.add-to-wishlist[aria-pressed='true']\"\n    ];\n    let confirmationFound = false;\n    for (const sel of confirmationSelectors) {\n      try {\n        if (sel.startsWith('//')) {\n          const handle = await page.waitForSelector(`xpath=${sel}`, { timeout: 3000 });\n          if (handle) {\n            confirmationText = await handle.textContent();\n            confirmationFound = true;\n            break;\n          }\n        } else {\n          const handle = await page.waitForSelector(sel, { timeout: 3000 });\n          if (handle) {\n            confirmationText = await handle.textContent();\n            confirmationFound = true;\n            break;\n          }\n        }\n      } catch {}\n    }\n\n    // Screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_wishlist.png'));\n\n    // Extract product title for reporting\n    let productTitle = '';\n    try {\n      // Try finding title in modal first\n      const titleHandle = await page.$('.modal h2, .modal .product-title, .modal-content h2, .product-detail-modal h2, [class*=\"product-title\"]');\n      if (titleHandle) {\n        productTitle = (await titleHandle.textContent())?.trim();\n      }\n      // Fallback to the card\n      if (!productTitle && firstProductCard) {\n        const cardTitleHandle = await firstProductCard.$('h2, .product-title, .title');\n        if (cardTitleHandle) {\n          productTitle = (await cardTitleHandle.textContent())?.trim();\n        }\n      }\n    } catch {}\n\n    return {\n      success: true,\n      action: \"Opened first product details and added it to the wish list via the product modal.\",\n      extractedData: {\n        productTitle,\n        confirmationText: confirmationText?.trim() || null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 60517,
      "timestamp": "2025-09-15T10:12:26.317Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 161668,
  "timestamp": "2025-09-15T10:10:45.166Z",
  "savedAt": "2025-09-15T10:13:26.834Z",
  "version": "1.0"
}