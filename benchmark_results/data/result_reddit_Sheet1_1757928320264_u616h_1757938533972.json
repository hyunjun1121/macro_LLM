{
  "id": "reddit_Sheet1_1757928320264_u616h_1757938533972",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320264_u616h",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus body to start keyboard navigation\n    await page.focus('body');\n\n    // Store the order of focusable elements for verification\n    const focusOrder = [];\n\n    // Helper to get focused element's description\n    async function getFocusedElementInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        // Try to get a meaningful label\n        let label = '';\n        if (el.getAttribute('aria-label')) label = el.getAttribute('aria-label');\n        else if (el.placeholder) label = el.placeholder;\n        else if (el.innerText && el.innerText.trim().length > 0) label = el.innerText.trim();\n        else if (el.id) label = `#${el.id}`;\n        else if (el.className) label = `.${el.className}`;\n        else label = el.tagName;\n        return {\n          tag: el.tagName,\n          id: el.id,\n          class: el.className,\n          name: el.name,\n          label,\n          role: el.getAttribute('role') || '',\n          type: el.type || '',\n          tabindex: el.getAttribute('tabindex') || '',\n          selector: el.id ? `#${el.id}` : (el.className ? `.${el.className.split(' ').join('.')}` : el.tagName)\n        };\n      });\n    }\n\n    // Wait for the first tabbable element (search input)\n    await page.waitForSelector('#searchInput');\n\n    // TAB 1: Should focus the search input\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_tab1_searchInput.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_tab1_searchInput.png'));\n\n    // TAB 2: Should focus the user menu (user-info)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_tab2_userMenu.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_tab2_userMenu.png'));\n\n    // TAB 3: Theme toggle button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_tab3_themeToggle.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_tab3_themeToggle.png'));\n\n    // TAB 4: Create post button (header)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_tab4_createPostHeader.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_tab4_createPostHeader.png'));\n\n    // TAB 5: First sidebar community button (r/programming)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_6_tab5_sidebarCommunity1.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_6_tab5_sidebarCommunity1.png'));\n\n    // TAB 6: Second sidebar community button (r/webdev)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_7_tab6_sidebarCommunity2.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_7_tab6_sidebarCommunity2.png'));\n\n    // TAB 7: Third sidebar community button (r/javascript)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_8_tab7_sidebarCommunity3.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_8_tab7_sidebarCommunity3.png'));\n\n    // TAB 8: Fourth sidebar community button (r/reactjs)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_9_tab8_sidebarCommunity4.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_9_tab8_sidebarCommunity4.png'));\n\n    // TAB 9: Quick action - View Profile\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_10_tab9_quickAction1.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_10_tab9_quickAction1.png'));\n\n    // TAB 10: Quick action - Create Post\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_11_tab10_quickAction2.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_11_tab10_quickAction2.png'));\n\n    // TAB 11: Quick action - Saved Posts\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_12_tab11_quickAction3.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_12_tab11_quickAction3.png'));\n\n    // TAB 12: Post form - community select\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_13_tab12_postCommunitySelect.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_13_tab12_postCommunitySelect.png'));\n\n    // TAB 13: Post form - title input\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    focused = await getFocusedElementInfo();\n    focusOrder.push(focused);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_14_tab13_postTitleInput.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_14_tab13_postTitleInput.png'));\n\n    // Extract a summary of the focus order\n    const extractedData = {\n      focusOrder: focusOrder.map((el, idx) => ({\n        step: idx + 1,\n        tag: el.tag,\n        id: el.id,\n        class: el.class,\n        name: el.name,\n        label: el.label,\n        role: el.role,\n        type: el.type,\n        tabindex: el.tabindex,\n        selector: el.selector\n      }))\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order with screenshots.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 71605,
      "timestamp": "2025-09-15T12:15:33.972Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on body to start keyboard navigation\n    await page.focus('body');\n\n    // Wait for the first tabbable element: header search input (role=searchbox)\n    await page.waitForSelector('input[role=\"searchbox\"]', { timeout: 5000 });\n\n    // Press Tab once: should focus the search input\n    await page.keyboard.press('Tab');\n    // Wait for focus\n    await page.waitForFunction(() => document.activeElement && document.activeElement.placeholder === \"Search Reddit\");\n\n    // Take screenshot after focusing search input\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_input_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_input_focus.png'));\n\n    // Press Tab again: should focus the theme toggle button (aria-label)\n    await page.keyboard.press('Tab');\n    await page.waitForSelector('button[aria-label*=\"theme\"]', { timeout: 5000 });\n    await page.waitForFunction(() => {\n      const btn = document.querySelector('button[aria-label*=\"theme\"]');\n      return btn && document.activeElement === btn;\n    });\n\n    // Take screenshot after focusing theme toggle\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_theme_toggle_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_theme_toggle_focus.png'));\n\n    // Press Tab again: should focus \"Create\" post button (aria-label)\n    await page.keyboard.press('Tab');\n    await page.waitForSelector('button[aria-label*=\"Create a new post\"]', { timeout: 5000 });\n    await page.waitForFunction(() => {\n      const btn = document.querySelector('button[aria-label*=\"Create a new post\"]');\n      return btn && document.activeElement === btn;\n    });\n\n    // Take screenshot after focusing create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_create_post_btn_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_create_post_btn_focus.png'));\n\n    // Press Tab again: should focus the first sidebar community button (aria-label with \"programming\")\n    await page.keyboard.press('Tab');\n    await page.waitForSelector('button[aria-label*=\"programming\"]', { timeout: 5000 });\n    await page.waitForFunction(() => {\n      const btn = document.querySelector('button[aria-label*=\"programming\"]');\n      return btn && document.activeElement === btn;\n    });\n\n    // Take screenshot after focusing first community link\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_first_community_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_first_community_focus.png'));\n\n    // Extract the sequence of focused elements' aria-labels or placeholders\n    const focusedSequence = await page.evaluate(() => {\n      const focusablesInfo = [];\n      // Search input\n      focusablesInfo.push(document.querySelector('input[role=\"searchbox\"]').placeholder);\n      // Theme toggle button\n      focusablesInfo.push(document.querySelector('button[aria-label*=\"theme\"]').getAttribute('aria-label'));\n      // Create post button\n      focusablesInfo.push(document.querySelector('button[aria-label*=\"Create a new post\"]').getAttribute('aria-label'));\n      // First community button\n      focusablesInfo.push(document.querySelector('button[aria-label*=\"programming\"]').getAttribute('aria-label'));\n      return focusablesInfo;\n    });\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation via Tab key through search input, theme toggle, create post, and first community button; verified focus order and took screenshots.\",\n      extractedData: {\n        tabFocusSequence: focusedSequence\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 33670,
      "timestamp": "2025-09-15T12:16:45.577Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Array to collect screenshot paths\n    const screenshots = [];\n\n    // Step 1: Take initial screenshot of the loaded page\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Step 2: Focus on the body to start tab navigation (ensure no element is focused)\n    await page.evaluate(() => document.activeElement && document.activeElement.blur());\n\n    // Helper to get focused element info\n    async function getFocusedInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        let desc = { tag: el.tagName, id: el.id, class: el.className, name: el.getAttribute('name'), placeholder: el.getAttribute('placeholder'), ariaLabel: el.getAttribute('aria-label'), role: el.getAttribute('role'), text: el.innerText || el.value || '' };\n        return desc;\n      });\n    }\n\n    // Step 3: Press Tab repeatedly, record focus order for the first several interactive elements\n    const focusOrder = [];\n    let foundSearch = false;\n    let foundThemeToggle = false;\n    let foundCreateBtn = false;\n    let foundCommunityLink = false;\n    let foundPostTitle = false;\n    let foundDropdown = false;\n    let steps = 0;\n\n    for (let i = 0; i < 15; i++) {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(150); // Wait a bit for DOM focus change\n\n      const focused = await getFocusedInfo();\n      focusOrder.push(focused);\n\n      // Take screenshot at each focus on a new key element\n      if (!foundSearch && focused && focused.id === 'searchInput') {\n        foundSearch = true;\n        const shot = path.join(screenshotsDir, 'step_2_focus_searchInput.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      if (!foundThemeToggle && focused && focused.class && focused.class.includes('theme-toggle-btn')) {\n        foundThemeToggle = true;\n        const shot = path.join(screenshotsDir, 'step_3_focus_themeToggle.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      if (!foundCreateBtn && focused && focused.class && focused.class.includes('create-post-btn')) {\n        foundCreateBtn = true;\n        const shot = path.join(screenshotsDir, 'step_4_focus_createPostBtn.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      // First community link (sidebar)\n      if (!foundCommunityLink && focused && focused.class && focused.class.includes('community-link')) {\n        foundCommunityLink = true;\n        const shot = path.join(screenshotsDir, 'step_5_focus_communityLink.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      // Post title input (in post form)\n      if (!foundPostTitle && focused && focused.id === 'postTitle') {\n        foundPostTitle = true;\n        const shot = path.join(screenshotsDir, 'step_6_focus_postTitle.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      // Community dropdown\n      if (!foundDropdown && focused && focused.id === 'postCommunity') {\n        foundDropdown = true;\n        const shot = path.join(screenshotsDir, 'step_7_focus_communityDropdown.png');\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n\n      // Stop early if all found\n      if (foundSearch && foundThemeToggle && foundCreateBtn && foundCommunityLink && foundPostTitle && foundDropdown) {\n        steps = i + 1;\n        break;\n      }\n    }\n\n    // Final screenshot after navigation\n    const finalShot = path.join(screenshotsDir, 'step_8_post_navigation.png');\n    await page.screenshot({ path: finalShot });\n    screenshots.push(finalShot);\n\n    // Prepare extractedData with focus order and which elements were focused\n    const extractedData = {\n      focusOrder: focusOrder.filter(f => f), // non-null\n      foundSearchInput: foundSearch,\n      foundThemeToggleBtn: foundThemeToggle,\n      foundCreatePostBtn: foundCreateBtn,\n      foundCommunityLink: foundCommunityLink,\n      foundPostTitleInput: foundPostTitle,\n      foundCommunityDropdown: foundDropdown,\n      stepsTaken: steps || 15\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order and accessibility.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 23033,
      "timestamp": "2025-09-15T12:17:19.247Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 128308,
  "timestamp": "2025-09-15T12:15:33.972Z",
  "savedAt": "2025-09-15T12:17:42.280Z",
  "version": "1.0"
}