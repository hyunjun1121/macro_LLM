{
  "id": "Amazon_T010_1757931013600",
  "website": "Amazon",
  "task": {
    "id": "T010",
    "description": "Add Product to Wishlist",
    "objective": "General",
    "expectedResult": "Medium",
    "difficulty": "Open a product detail modal and click the 'Add to Wish List' button.",
    "category": ".product-card:first-child, .add-to-wishlist",
    "tags": [
      "1. Click product card to open modal 2. Click 'Add to Wish List' button"
    ],
    "notes": "Success notification appears, wishlist localStorage is updated, button state may change"
  },
  "websiteInfo": {
    "name": "Amazon",
    "htmlFiles": [
      "index.html",
      "test_website.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card to be visible\n    await page.waitForSelector('.product-card', { timeout: 5000 });\n\n    // Click the first product card to open the product detail modal\n    const firstProductCard = await page.$('.product-card');\n    if (!firstProductCard) throw new Error('No product card found');\n    await firstProductCard.click();\n\n    // Wait for the modal/dialog to appear (look for .modal or .product-modal or similar)\n    let modalSelector = '.modal, .product-modal, .product-detail-modal';\n    await page.waitForSelector(modalSelector, { timeout: 5000 });\n\n    // Take screenshot after modal opens\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // Wait for the 'Add to Wish List' button to appear inside the modal\n    // Try several selector strategies\n    let addToWishlistBtn = await page.$(`${modalSelector} .add-to-wishlist`);\n    if (!addToWishlistBtn) {\n      // Try by text\n      addToWishlistBtn = await page.$(`${modalSelector} button:has-text(\"Add to Wish List\")`);\n    }\n    if (!addToWishlistBtn) {\n      // Try global in case modalSelector didn't work\n      addToWishlistBtn = await page.$('.add-to-wishlist');\n    }\n    if (!addToWishlistBtn) {\n      addToWishlistBtn = await page.$('button:has-text(\"Add to Wish List\")');\n    }\n    if (!addToWishlistBtn) throw new Error(\"Could not find 'Add to Wish List' button\");\n\n    // Click the 'Add to Wish List' button\n    await addToWishlistBtn.click();\n\n    // Wait for some UI feedback (e.g., button changes, confirmation message, icon, etc.)\n    // Try to detect a success message or button state change\n    let wishlistConfirmation = null;\n    try {\n      wishlistConfirmation = await page.waitForSelector(\n        `${modalSelector} .wishlist-success, .wishlist-confirmation, text=/added to wish list/i`,\n        { timeout: 3000 }\n      );\n    } catch (e) {\n      // fallback: check if button text changes to \"Added\" or similar\n      const btnText = await addToWishlistBtn.textContent();\n      if (!/added/i.test(btnText)) {\n        // No confirmation, but continue\n      }\n    }\n\n    // Take screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_added_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_added_to_wishlist.png'));\n\n    // Extract product title from modal for verification\n    let productTitle = '';\n    const titleHandle = await page.$(`${modalSelector} .product-title, ${modalSelector} h2, ${modalSelector} h1`);\n    if (titleHandle) {\n      productTitle = (await titleHandle.textContent())?.trim() || '';\n    }\n\n    // Extract confirmation message if present\n    let confirmationText = '';\n    if (wishlistConfirmation) {\n      confirmationText = (await wishlistConfirmation.textContent())?.trim() || '';\n    } else {\n      // Try to find a generic confirmation\n      const confirmationHandle = await page.$('text=/added to wish list/i');\n      if (confirmationHandle) {\n        confirmationText = (await confirmationHandle.textContent())?.trim() || '';\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Opened first product modal and clicked 'Add to Wish List' button\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 45265,
      "timestamp": "2025-09-15T10:10:13.601Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // 3. Wait for the first product card using a generic selector (div[class*=\"product-card\"])\n    // Try to use a different approach: select by image alt text (assume product title is in alt)\n    const firstProductImg = await page.waitForSelector('.product-card img, img[alt*=\"iPhone\"], img[alt]', { timeout: 5000 });\n\n    // 4. Get the parent product card element by traversing up the DOM\n    const firstProductCard = await firstProductImg.evaluateHandle(img => {\n      let el = img;\n      while (el && !el.classList.contains('product-card')) {\n        el = el.parentElement;\n      }\n      return el;\n    });\n\n    // 5. Scroll into view and click to open modal (some Amazon clones open modal on card click)\n    await firstProductCard.scrollIntoViewIfNeeded();\n    await firstProductCard.click();\n    // Wait for modal/dialog to appear (try role='dialog' or class contains 'modal')\n    const modal = await page.waitForSelector('.modal, [role=\"dialog\"], .product-modal', { timeout: 4000 });\n\n    // Screenshot after opening the modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // 6. Wait for 'Add to Wish List' button inside the modal\n    // Try to find by button text (case-insensitive, robust to class changes)\n    const addToWishlistButton = await modal.waitForSelector(\n      [\n        'button.add-to-wishlist',\n        'button:has-text(\"Add to Wish List\")',\n        'button:has-text(\"Wish\")',\n        '//button[contains(translate(.,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"abcdefghijklmnopqrstuvwxyz\"),\"add to wish\")]'\n      ].join(', '),\n      { timeout: 3000 }\n    );\n\n    // 7. Click 'Add to Wish List'\n    await addToWishlistButton.click();\n\n    // 8. Wait for confirmation (toast/snackbar, or button changes, or wishlist count changes)\n    // Try to wait for button to become disabled or text to change, or a confirmation message\n    let confirmationText = '';\n    try {\n      // Wait for some confirmation element to appear\n      const confirmation = await page.waitForSelector(\n        [\n          '.wishlist-confirmation',\n          '.toast-message',\n          '.snackbar',\n          'text=Added to Wish List',\n          'text=Added!'\n        ].join(', '),\n        { timeout: 2500 }\n      );\n      confirmationText = await confirmation.innerText();\n    } catch (e) {\n      // If no special confirmation, try to get button text after click\n      confirmationText = await addToWishlistButton.innerText();\n    }\n\n    // Screenshot after adding to wishlist\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_added_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_added_to_wishlist.png'));\n\n    // 9. Extract product title from modal for verification\n    let productTitle = '';\n    try {\n      // Try common modal title selectors\n      const titleEl = await modal.$('h2, h3, .product-title, [class*=\"title\"]');\n      if (titleEl) productTitle = (await titleEl.innerText()).trim();\n    } catch {}\n\n    return {\n      success: true,\n      action: \"Opened the first product modal and clicked 'Add to Wish List' using alternative selectors and strategies.\",\n      extractedData: {\n        productTitle,\n        confirmationText\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 46716,
      "timestamp": "2025-09-15T10:10:58.866Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first product card using a more robust selector\n    // Try selecting a .product-card that's visible in the main content\n    const firstProductCard = await page.waitForSelector(\n      'section, div, main >> .product-card, .product-list .product-card, .featured-products .product-card',\n      { timeout: 3500 }\n    ).catch(async () => {\n      // Try fallback selector: first card in DOM with product-card class\n      return await page.waitForSelector('.product-card', { timeout: 2000 });\n    });\n\n    // Take screenshot of the first product card\n    await firstProductCard.screenshot({ path: path.join(screenshotsDir, 'step_2_product_card.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_product_card.png'));\n\n    // Try clicking on the image or title inside the card to open the modal\n    // Prefer clickable area: image, h2/h3, or first <a>\n    // Try image first\n    let detailTrigger = await firstProductCard.$('img');\n    if (!detailTrigger) {\n      detailTrigger = await firstProductCard.$('h2, h3, a, .product-title');\n    }\n    if (!detailTrigger) {\n      // Fallback to clicking the card itself\n      detailTrigger = firstProductCard;\n    }\n\n    await detailTrigger.click();\n\n    // Wait for the modal/dialog to appear (modal may have class .modal, .product-modal, or role=\"dialog\")\n    const modalSelectorCandidates = [\n      '.modal:visible',\n      '.product-modal:visible',\n      '[role=\"dialog\"]:visible',\n      '.modal',\n      '.product-modal',\n      '[role=\"dialog\"]'\n    ];\n    let modal;\n    for (const sel of modalSelectorCandidates) {\n      try {\n        modal = await page.waitForSelector(sel, { timeout: 2000, state: 'visible' });\n        if (modal) break;\n      } catch (e) {}\n    }\n\n    // Take screenshot of the modal\n    if (modal) {\n      await modal.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n      screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n    } else {\n      // Whole page fallback if modal screenshot fails\n      await page.screenshot({ path: path.join(screenshotsDir, 'step_3_modal_opened.png') });\n      screenshots.push(path.join(screenshotsDir, 'step_3_modal_opened.png'));\n    }\n\n    // Wait for the \"Add to Wish List\" button inside the modal\n    // Try several selector strategies: text, aria-label, button class, etc.\n    let wishlistButton = null;\n    // Modal scope preferred\n    const modalContext = modal || page;\n\n    const wishlistSelectors = [\n      'button.add-to-wishlist',\n      'button:has-text(\"Wish List\")',\n      'button:has-text(\"Add to Wish List\")',\n      'button[aria-label*=\"Wish\"], button[title*=\"Wish\"], button[aria-label*=\"wish\"], button[title*=\"wish\"]',\n      'input[type=\"button\"][value*=\"Wish\"]',\n      'a:has-text(\"Wish List\")',\n      'a.add-to-wishlist'\n    ];\n\n    for (const sel of wishlistSelectors) {\n      try {\n        wishlistButton = await modalContext.waitForSelector(sel, { timeout: 1500 });\n        if (wishlistButton) break;\n      } catch (e) {}\n    }\n\n    if (!wishlistButton) {\n      // Fallback: any button with \"wish\" in inner text\n      const allButtons = await modalContext.$$('button, input[type=\"button\"], a');\n      for (const btn of allButtons) {\n        const text = (await btn.innerText().catch(() => '')) || (await btn.getAttribute('value').catch(() => ''));\n        if (text && /wish/i.test(text)) {\n          wishlistButton = btn;\n          break;\n        }\n      }\n    }\n\n    if (!wishlistButton) {\n      throw new Error('Could not find Add to Wish List button in modal');\n    }\n\n    // Take screenshot before clicking\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_before_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_before_add_to_wishlist.png'));\n\n    // Click the Add to Wish List button\n    await wishlistButton.click();\n\n    // Wait for some visual feedback; e.g., \"Added\" message, button disabled, or success icon\n    // Try to detect a success message or state change\n    let wishlistSuccess = false;\n    let feedbackText = '';\n    try {\n      await page.waitForSelector(\n        [\n          '.wishlist-success, .wishlist-added, .toast-success, .alert-success, .notification-success',\n          'button.add-to-wishlist[disabled], button.add-to-wishlist:disabled',\n          'button.add-to-wishlist:has-text(\"Added\")',\n          'button:has-text(\"Added to Wish List\")',\n          '[role=\"alert\"]:has-text(\"Wish\")'\n        ].join(','),\n        { timeout: 2500 }\n      );\n      wishlistSuccess = true;\n      // Try extracting feedback text\n      const feedbackEl = await page.$(\n        '.wishlist-success, .wishlist-added, .toast-success, .alert-success, .notification-success, button:has-text(\"Added\"), [role=\"alert\"]'\n      );\n      if (feedbackEl) {\n        feedbackText = await feedbackEl.innerText().catch(() => '');\n      }\n    } catch (e) {\n      // Try to check if button now says \"Added\"\n      const btnText = await wishlistButton.innerText().catch(() => '');\n      if (/added/i.test(btnText)) {\n        wishlistSuccess = true;\n        feedbackText = btnText;\n      } else {\n        wishlistSuccess = false;\n      }\n    }\n\n    // Take screenshot after adding\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_after_add_to_wishlist.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_after_add_to_wishlist.png'));\n\n    // Extract the product title from the modal for reporting\n    let productTitle = '';\n    if (modal) {\n      const titleEl = await modal.$('h2, h3, .product-title');\n      if (titleEl) {\n        productTitle = await titleEl.innerText().catch(() => '');\n      }\n    }\n\n    return {\n      success: wishlistSuccess,\n      action: `Opened the first product detail modal (${productTitle}) and clicked 'Add to Wish List'`,\n      extractedData: {\n        productTitle,\n        feedbackText,\n        wishlistSuccess\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 67682,
      "timestamp": "2025-09-15T10:11:45.582Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 159664,
  "timestamp": "2025-09-15T10:10:13.600Z",
  "savedAt": "2025-09-15T10:12:53.264Z",
  "version": "1.0"
}