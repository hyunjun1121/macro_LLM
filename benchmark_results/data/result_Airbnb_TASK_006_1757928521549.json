{
  "id": "Airbnb_TASK_006_1757928521549",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing card for Jun's first listing to appear\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get initial favorite button state (e.g., aria-pressed, class, or SVG fill)\n    const initialBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        fill: el.querySelector('svg')?.getAttribute('fill') || null,\n        text: el.textContent\n      };\n    });\n\n    // Get initial localStorage favorites (if available)\n    const initialFavorites = await page.evaluate(() => {\n      try {\n        // Try common keys\n        return (\n          JSON.parse(localStorage.getItem('favorites')) ||\n          JSON.parse(localStorage.getItem('airbnb_favorites')) ||\n          null\n        );\n      } catch {\n        return null;\n      }\n    });\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // Wait for button state to change (e.g., aria-pressed toggled, class changed, etc)\n    await page.waitForTimeout(600); // Allow UI to update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get updated favorite button state\n    const updatedBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        fill: el.querySelector('svg')?.getAttribute('fill') || null,\n        text: el.textContent\n      };\n    });\n\n    // Get updated localStorage favorites\n    const updatedFavorites = await page.evaluate(() => {\n      try {\n        return (\n          JSON.parse(localStorage.getItem('favorites')) ||\n          JSON.parse(localStorage.getItem('airbnb_favorites')) ||\n          null\n        );\n      } catch {\n        return null;\n      }\n    });\n\n    // Compose extracted data for verification\n    const extractedData = {\n      initialBtnState,\n      updatedBtnState,\n      initialFavorites,\n      updatedFavorites\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state change and localStorage update.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 13384,
      "timestamp": "2025-09-15T09:28:41.549Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the local Airbnb HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Initial screenshot: page loaded\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for Jun의 첫 번째 숙소(jun_1) card to appear\n    // Use a robust selector: data-listing-id='jun_1'\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Now find the 즐겨찾기(favorite) button inside that listing\n    // Try a direct child .listing-favorite, but if not, fall back to a button or aria-label\n    let favoriteBtn = await page.$(`${listingSelector} .listing-favorite`);\n    if (!favoriteBtn) {\n      // Fallback: try button with aria-label or title containing '즐겨찾기' or 'favorite'\n      favoriteBtn = await page.$(`${listingSelector} button[aria-label*=\"favorite\"], ${listingSelector} button[title*=\"favorite\"]`);\n    }\n    if (!favoriteBtn) {\n      throw new Error(\"Could not find the favorite button for 'jun_1'\");\n    }\n\n    // Take screenshot before clicking favorite\n    const beforeFavShot = path.join(screenshotsDir, 'step_2_before_favorite.png');\n    await page.screenshot({ path: beforeFavShot });\n    screenshots.push(beforeFavShot);\n\n    // Get initial favorite button state (i.e., icon, class, aria-pressed, etc)\n    const beforeState = await page.evaluate(el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerText: el.innerText,\n        dataset: {...el.dataset}\n      };\n    }, favoriteBtn);\n\n    // Get localStorage favorites before clicking\n    const beforeLocalStorageFavorites = await page.evaluate(() => {\n      // Try common keys: 'favorites', 'airbnb-favorites', etc\n      let favKeys = ['favorites', 'airbnb-favorites', 'userFavorites'];\n      for (let key of favKeys) {\n        if (localStorage.getItem(key)) {\n          try {\n            return { key, value: JSON.parse(localStorage.getItem(key)) };\n          } catch {\n            return { key, value: localStorage.getItem(key) };\n          }\n        }\n      }\n      // Try all keys as fallback\n      let all = {};\n      for (let i = 0; i < localStorage.length; ++i) {\n        let k = localStorage.key(i);\n        all[k] = localStorage.getItem(k);\n      }\n      return { key: null, value: all };\n    });\n\n    // Click the favorite button (simulate user click)\n    await favoriteBtn.click();\n\n    // Wait for button state to change (class, aria-pressed, etc)\n    await page.waitForTimeout(600); // Allow UI time to update\n    // Wait for class/aria-pressed change\n    await page.waitForFunction(\n      (selector, prevClass, prevAria) => {\n        const el = document.querySelector(selector + ' .listing-favorite');\n        if (!el) return false;\n        return el.className !== prevClass || el.getAttribute('aria-pressed') !== prevAria;\n      },\n      {},\n      listingSelector,\n      beforeState.class,\n      beforeState.ariaPressed\n    ).catch(() => {}); // In case aria-pressed not used\n\n    // Take screenshot after favoriting\n    const afterFavShot = path.join(screenshotsDir, 'step_3_after_favorite.png');\n    await page.screenshot({ path: afterFavShot });\n    screenshots.push(afterFavShot);\n\n    // Extract the favorite button state after click\n    const afterState = await page.evaluate(el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerText: el.innerText,\n        dataset: {...el.dataset}\n      };\n    }, await page.$(`${listingSelector} .listing-favorite`));\n\n    // Get localStorage favorites after clicking\n    const afterLocalStorageFavorites = await page.evaluate(() => {\n      let favKeys = ['favorites', 'airbnb-favorites', 'userFavorites'];\n      for (let key of favKeys) {\n        if (localStorage.getItem(key)) {\n          try {\n            return { key, value: JSON.parse(localStorage.getItem(key)) };\n          } catch {\n            return { key, value: localStorage.getItem(key) };\n          }\n        }\n      }\n      let all = {};\n      for (let i = 0; i < localStorage.length; ++i) {\n        let k = localStorage.key(i);\n        all[k] = localStorage.getItem(k);\n      }\n      return { key: null, value: all };\n    });\n\n    // Check if 'jun_1' is present (or removed) in the favorites list after click\n    const favKey = afterLocalStorageFavorites.key || beforeLocalStorageFavorites.key;\n    const beforeFavs = beforeLocalStorageFavorites.value;\n    const afterFavs = afterLocalStorageFavorites.value;\n    let wasFavorited = false, nowFavorited = false;\n    if (Array.isArray(beforeFavs)) {\n      wasFavorited = beforeFavs.includes('jun_1');\n    } else if (typeof beforeFavs === 'object') {\n      wasFavorited = Object.values(beforeFavs).join(',').includes('jun_1');\n    }\n    if (Array.isArray(afterFavs)) {\n      nowFavorited = afterFavs.includes('jun_1');\n    } else if (typeof afterFavs === 'object') {\n      nowFavorited = Object.values(afterFavs).join(',').includes('jun_1');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked the favorite button for Jun의 첫 번째 숙소 (jun_1), verified the button's state change, and checked localStorage for updates.\",\n      extractedData: {\n        beforeButtonState: beforeState,\n        afterButtonState: afterState,\n        beforeLocalStorageFavorites,\n        afterLocalStorageFavorites,\n        wasFavorited,\n        nowFavorited\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22242,
      "timestamp": "2025-09-15T09:28:54.933Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file and wait until network is idle\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the listing \"jun_1\" to appear in the DOM\n    // Try multiple selector strategies: attribute, contains, and fallback to XPath\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Within the listing, find the favorite button - try by class and aria-label fallback\n    // Using a combination of selectors to robustly locate\n    const favoriteBtnSelector =\n      \"[data-listing-id='jun_1'] .listing-favorite, [data-listing-id='jun_1'] button[aria-label*='favorite'], [data-listing-id='jun_1'] button[class*='favorite']\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 3000 });\n\n    // Take screenshot before clicking the favorite button\n    const beforeClickScreenshot = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: beforeClickScreenshot });\n    screenshots.push(beforeClickScreenshot);\n\n    // Get the favorite button element handle\n    const favoriteButton = await page.$(favoriteBtnSelector);\n\n    // Extract initial button state (e.g., aria-pressed or class for active)\n    const initialBtnState = await page.evaluate(btn => {\n      return {\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        classList: btn.className,\n        textContent: btn.textContent\n      };\n    }, favoriteButton);\n\n    // Extract initial localStorage favorites (if any)\n    const localStorageBefore = await page.evaluate(() => {\n      // Try common keys related to favorites\n      const favKeys = Object.keys(localStorage).filter(k =>\n        k.toLowerCase().includes('favorite') || k.toLowerCase().includes('favourite')\n      );\n      const favData = {};\n      favKeys.forEach(k => { favData[k] = localStorage.getItem(k); });\n      return favData;\n    });\n\n    // Click the favorite button (simulate user action)\n    await favoriteButton.click();\n\n    // Wait for button state to change (UI feedback) - e.g. class or aria-pressed\n    await page.waitForFunction(\n      (selector, prevClass, prevAria) => {\n        const btn = document.querySelector(selector);\n        if (!btn) return false;\n        return btn.className !== prevClass || btn.getAttribute('aria-pressed') !== prevAria;\n      },\n      favoriteBtnSelector,\n      initialBtnState.classList,\n      initialBtnState.ariaPressed,\n      { timeout: 3000 }\n    );\n\n    // Small delay to allow localStorage update\n    await page.waitForTimeout(500);\n\n    // Take screenshot after clicking\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // Extract new button state\n    const newBtnState = await page.evaluate(selector => {\n      const btn = document.querySelector(selector);\n      return btn ? {\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        classList: btn.className,\n        textContent: btn.textContent\n      } : null;\n    }, favoriteBtnSelector);\n\n    // Extract updated localStorage favorites\n    const localStorageAfter = await page.evaluate(() => {\n      const favKeys = Object.keys(localStorage).filter(k =>\n        k.toLowerCase().includes('favorite') || k.toLowerCase().includes('favourite')\n      );\n      const favData = {};\n      favKeys.forEach(k => { favData[k] = localStorage.getItem(k); });\n      return favData;\n    });\n\n    // Try to parse the favorites list from localStorage for known keys\n    let favoritesBefore = [];\n    let favoritesAfter = [];\n    for (const key of Object.keys(localStorageBefore)) {\n      try {\n        const arr = JSON.parse(localStorageBefore[key]);\n        if (Array.isArray(arr)) favoritesBefore = arr;\n      } catch {}\n    }\n    for (const key of Object.keys(localStorageAfter)) {\n      try {\n        const arr = JSON.parse(localStorageAfter[key]);\n        if (Array.isArray(arr)) favoritesAfter = arr;\n      } catch {}\n    }\n\n    // Check if 'jun_1' is present/absent before and after\n    const favoritedBefore = favoritesBefore.includes('jun_1');\n    const favoritedAfter = favoritesAfter.includes('jun_1');\n\n    return {\n      success: true,\n      action: \"Clicked the favorite button for Jun의 첫 번째 숙소(jun_1), verified button state change and localStorage update.\",\n      extractedData: {\n        initialBtnState,\n        newBtnState,\n        localStorageBefore,\n        localStorageAfter,\n        favoritesBefore,\n        favoritesAfter,\n        favoritedBefore,\n        favoritedAfter\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 37893,
      "timestamp": "2025-09-15T09:29:17.175Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 73519,
  "timestamp": "2025-09-15T09:28:41.549Z",
  "savedAt": "2025-09-15T09:29:55.068Z",
  "version": "1.0"
}