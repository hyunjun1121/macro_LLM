{
  "id": "Airbnb_TASK_006_1757928517691",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing card for Jun's first listing to appear\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get initial favorite button state (e.g., aria-pressed, class, or icon)\n    const initialBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        dataFavorited: el.getAttribute('data-favorited')\n      };\n    });\n\n    // Get initial localStorage favorites (if available)\n    const initialLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        // Try common keys\n        const keys = Object.keys(localStorage);\n        for (const key of keys) {\n          if (key.toLowerCase().includes('favorite')) {\n            return localStorage.getItem(key);\n          }\n        }\n        // Try airbnb-style\n        if (localStorage.getItem('favorites')) return localStorage.getItem('favorites');\n        return null;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Click the favorite button for Jun's first listing\n    await page.click(favoriteBtnSelector);\n\n    // Wait for button state change (e.g., aria-pressed toggles, class changes, or icon changes)\n    await page.waitForTimeout(800); // Give time for UI and localStorage update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get new favorite button state\n    const afterBtnState = await page.$eval(favoriteBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        dataFavorited: el.getAttribute('data-favorited')\n      };\n    });\n\n    // Get updated localStorage favorites\n    const afterLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        // Try common keys\n        const keys = Object.keys(localStorage);\n        for (const key of keys) {\n          if (key.toLowerCase().includes('favorite')) {\n            return localStorage.getItem(key);\n          }\n        }\n        // Try airbnb-style\n        if (localStorage.getItem('favorites')) return localStorage.getItem('favorites');\n        return null;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Check if the button state and localStorage changed\n    const btnStateChanged = JSON.stringify(initialBtnState) !== JSON.stringify(afterBtnState);\n    const localStorageChanged = initialLocalStorageFavorites !== afterLocalStorageFavorites;\n\n    // Try to parse the favorites array from localStorage if possible\n    let favoritesArrayBefore = null, favoritesArrayAfter = null;\n    try {\n      if (initialLocalStorageFavorites) favoritesArrayBefore = JSON.parse(initialLocalStorageFavorites);\n      if (afterLocalStorageFavorites) favoritesArrayAfter = JSON.parse(afterLocalStorageFavorites);\n    } catch (e) {}\n\n    // Check if 'jun_1' is present or removed after click\n    let jun1InFavoritesBefore = Array.isArray(favoritesArrayBefore) ? favoritesArrayBefore.includes('jun_1') : null;\n    let jun1InFavoritesAfter = Array.isArray(favoritesArrayAfter) ? favoritesArrayAfter.includes('jun_1') : null;\n\n    return {\n      success: btnStateChanged || localStorageChanged,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼, 확인: 버튼 상태 및 localStorage 업데이트\",\n      extractedData: {\n        initialBtnState,\n        afterBtnState,\n        btnStateChanged,\n        initialLocalStorageFavorites,\n        afterLocalStorageFavorites,\n        localStorageChanged,\n        jun1InFavoritesBefore,\n        jun1InFavoritesAfter\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19044,
      "timestamp": "2025-09-15T09:28:37.692Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Step 1: Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Step 2: Wait for Jun's 첫 번째 숙소 (jun_1) listing card to be visible\n    // Try an attribute selector to get the listing card\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Step 3: Within this card, locate the favorite button (try .listing-favorite, but also try a button with aria-label or icon as fallback)\n    // Use a compound selector for robustness\n    let favoriteBtn = await page.$(`${listingSelector} .listing-favorite`);\n    if (!favoriteBtn) {\n      // Fallback: find a button with heart icon inside the listing card\n      favoriteBtn = await page.$(`${listingSelector} button:has(svg.fa-heart)`);\n    }\n    if (!favoriteBtn) {\n      // Fallback: try any button inside the listing card\n      favoriteBtn = await page.$(`${listingSelector} button`);\n    }\n    if (!favoriteBtn) {\n      throw new Error(\"Favorite button for jun_1 not found\");\n    }\n\n    // Step 4: Before clicking, get the initial state (e.g., aria-pressed, class)\n    const initialBtnState = await page.evaluate(el => ({\n      ariaPressed: el.getAttribute('aria-pressed'),\n      class: el.className,\n      text: el.innerText\n    }), favoriteBtn);\n\n    // Step 5: Before clicking, extract the favorites list from localStorage (try several possible keys)\n    const localStorageKeys = await page.evaluate(() => Object.keys(window.localStorage));\n    let beforeFavorites = null, favoritesKey = null;\n    for (const key of localStorageKeys) {\n      const val = window.localStorage.getItem(key);\n      if (val && val.includes('jun_1')) {\n        beforeFavorites = val;\n        favoritesKey = key;\n        break;\n      }\n    }\n    // If not found, just try \"favorites\" key\n    if (!beforeFavorites) {\n      beforeFavorites = await page.evaluate(() => window.localStorage.getItem('favorites'));\n      favoritesKey = 'favorites';\n    }\n\n    // Step 6: Click the favorite button\n    await favoriteBtn.click();\n\n    // Step 7: Wait for button state to change (class, aria-pressed, etc)\n    // Wait for up to 2s for class/aria-pressed to change\n    await page.waitForFunction(\n      (sel, prevClass, prevAria) => {\n        const btn = document.querySelector(sel + ' .listing-favorite') || document.querySelector(sel + ' button');\n        if (!btn) return false;\n        return btn.className !== prevClass || btn.getAttribute('aria-pressed') !== prevAria;\n      },\n      { timeout: 2000 },\n      listingSelector,\n      initialBtnState.class,\n      initialBtnState.ariaPressed\n    ).catch(() => {}); // Swallow timeout error, still continue\n\n    // Step 8: Take screenshot after clicking\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_2_after_favorite_click.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // Step 9: Read the new state of the button\n    const afterBtnState = await page.evaluate(sel => {\n      const btn = document.querySelector(sel + ' .listing-favorite') || document.querySelector(sel + ' button');\n      if (!btn) return null;\n      return {\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        class: btn.className,\n        text: btn.innerText\n      };\n    }, listingSelector);\n\n    // Step 10: Extract favorites from localStorage again\n    const afterFavorites = await page.evaluate((key) => {\n      return window.localStorage.getItem(key);\n    }, favoritesKey);\n\n    // Step 11: Parse favorites to check if jun_1 is present or removed\n    const parseFavs = str => {\n      try {\n        return JSON.parse(str); // try as JSON array or object\n      } catch {\n        if (typeof str === 'string') {\n          // Try CSV or array-like string\n          if (str.includes('[') || str.includes(']')) {\n            try {\n              // Remove trailing commas and parse\n              return JSON.parse(str.replace(/,\\s*([\\]\\}])/g, '$1'));\n            } catch {\n              return str;\n            }\n          }\n          return str.split(',').map(s => s.trim());\n        }\n        return str;\n      }\n    };\n    const beforeFavList = parseFavs(beforeFavorites);\n    const afterFavList = parseFavs(afterFavorites);\n\n    // Step 12: Prepare extractedData\n    const extractedData = {\n      initialBtnState,\n      afterBtnState,\n      favoritesKey,\n      beforeFavorites: beforeFavList,\n      afterFavorites: afterFavList,\n      jun_1_in_favorites_before: (Array.isArray(beforeFavList) || typeof beforeFavList === 'object') ? (beforeFavList && beforeFavList.includes && beforeFavList.includes('jun_1')) : undefined,\n      jun_1_in_favorites_after: (Array.isArray(afterFavList) || typeof afterFavList === 'object') ? (afterFavList && afterFavList.includes && afterFavList.includes('jun_1')) : undefined\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state and localStorage favorites update\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 24393,
      "timestamp": "2025-09-15T09:28:56.736Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Initial screenshot before any action\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing card for Jun's first listing (jun_1) to be present\n    // Use attribute selector for data-listing-id, then find the favorite button inside\n    const junListingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(junListingSelector, { timeout: 5000 });\n\n    // Try several strategies to locate the favorite button inside the listing\n    // Attempt 1: Find by class within the context of the listing card\n    let favoriteButtonHandle = await page.$(`${junListingSelector} .listing-favorite`);\n    // If not found, try by text or alternative strategies\n    if (!favoriteButtonHandle) {\n      // Try button with aria-label or \"Favorite\" text\n      favoriteButtonHandle = await page.$(`${junListingSelector} button[aria-label*=\"avorite\"], ${junListingSelector} button:has-text(\"Favorite\")`);\n    }\n    if (!favoriteButtonHandle) {\n      // Try querying the first <button> within the listing card as fallback\n      favoriteButtonHandle = await page.$(`${junListingSelector} button`);\n    }\n    if (!favoriteButtonHandle) {\n      throw new Error(\"Could not find the favorite button for Jun's first listing (jun_1)\");\n    }\n\n    // Take screenshot before clicking the favorite button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite_click.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite_click.png'));\n\n    // Get the initial state of the button (icon class or aria-pressed) and localStorage before click\n    const [initialButtonState, initialLocalStorage] = await Promise.all([\n      favoriteButtonHandle.evaluate(el => ({\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerHTML: el.innerHTML\n      })),\n      page.evaluate(() => {\n        // Try to extract favorites-related localStorage\n        const keys = Object.keys(localStorage);\n        const favoritesKey = keys.find(k => k.toLowerCase().includes('favorite'));\n        let favoritesVal = favoritesKey ? localStorage.getItem(favoritesKey) : null;\n        return { favoritesKey, favoritesVal, all: { ...localStorage } };\n      })\n    ]);\n\n    // Click the favorite button\n    await favoriteButtonHandle.click();\n\n    // Wait for possible UI update (icon state, animation, etc)\n    await page.waitForTimeout(800);\n\n    // Take screenshot after clicking the favorite button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite_click.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite_click.png'));\n\n    // Get the state of the button and localStorage after click\n    const [afterButtonState, afterLocalStorage] = await Promise.all([\n      favoriteButtonHandle.evaluate(el => ({\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerHTML: el.innerHTML\n      })),\n      page.evaluate(() => {\n        const keys = Object.keys(localStorage);\n        const favoritesKey = keys.find(k => k.toLowerCase().includes('favorite'));\n        let favoritesVal = favoritesKey ? localStorage.getItem(favoritesKey) : null;\n        return { favoritesKey, favoritesVal, all: { ...localStorage } };\n      })\n    ]);\n\n    // Extract out whether the button visually changed and if the localStorage favorites list was updated\n    let wasFavorited = false, wasLocalStorageUpdated = false;\n    // Compare class or aria-pressed or icon\n    if (initialButtonState.class !== afterButtonState.class ||\n        initialButtonState.ariaPressed !== afterButtonState.ariaPressed ||\n        initialButtonState.innerHTML !== afterButtonState.innerHTML) {\n      wasFavorited = true;\n    }\n    // Compare presence of 'jun_1' in localStorage before/after\n    let beforeFavorites = [];\n    let afterFavorites = [];\n    try {\n      beforeFavorites = JSON.parse(initialLocalStorage.favoritesVal || '[]');\n    } catch {}\n    try {\n      afterFavorites = JSON.parse(afterLocalStorage.favoritesVal || '[]');\n    } catch {}\n    // If 'jun_1' was added or removed, consider it updated\n    wasLocalStorageUpdated = beforeFavorites.join(',') !== afterFavorites.join(',');\n\n    // Return result\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, 확인 버튼 상태 변화 및 localStorage 업데이트\",\n      extractedData: {\n        initialButtonState,\n        afterButtonState,\n        initialLocalStorage,\n        afterLocalStorage,\n        wasFavorited,\n        wasLocalStorageUpdated,\n        beforeFavorites,\n        afterFavorites\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 39816,
      "timestamp": "2025-09-15T09:29:21.129Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 83254,
  "timestamp": "2025-09-15T09:28:37.692Z",
  "savedAt": "2025-09-15T09:30:00.945Z",
  "version": "1.0"
}