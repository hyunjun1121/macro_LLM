{
  "id": "TikTok_Sheet1_1757928320241_ynk66_1757932867874",
  "website": "TikTok",
  "task": {
    "id": "Sheet1_1757928320241_ynk66",
    "description": 3,
    "objective": "General",
    "expectedResult": "첫 번째 비디오의 좋아요 버튼을 클릭하여 liked 상태로 변경",
    "difficulty": "data-video-id='1'인 컨테이너의 .like-btn을 클릭",
    "category": "Easy",
    "tags": [
      ".video-container[data-video-id='1'] .like-btn"
    ],
    "notes": "data-video-id='1'인 컨테이너의 .like-btn을 클릭"
  },
  "websiteInfo": {
    "name": "TikTok",
    "htmlFiles": [
      "index.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first video container with data-video-id=\"1\"\n    const videoContainerSelector = 'div.video-container[data-video-id=\"1\"]';\n    await page.waitForSelector(videoContainerSelector, { timeout: 5000 });\n\n    // Scroll the video container into view to ensure all buttons are visible\n    await page.$eval(videoContainerSelector, el => el.scrollIntoView({ behavior: 'smooth', block: 'center' }));\n\n    // Wait for the like button inside this container\n    const likeBtnSelector = `${videoContainerSelector} button.like-btn`;\n    await page.waitForSelector(likeBtnSelector, { timeout: 3000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button\n    await page.click(likeBtnSelector);\n\n    // Wait for a possible liked state (e.g., class change or aria-pressed, etc.)\n    // Try to detect a state change by waiting for a class or attribute change\n    // We'll check if the button gets an \"active\", \"liked\", or \"pressed\" state\n    let liked = false;\n    let likeBtnClass = '';\n    let likeBtnAriaPressed = null;\n\n    // Wait up to 2 seconds for a state change\n    for (let i = 0; i < 10; i++) {\n      const btn = await page.$(likeBtnSelector);\n      if (btn) {\n        likeBtnClass = await btn.getAttribute('class');\n        likeBtnAriaPressed = await btn.getAttribute('aria-pressed');\n        if (\n          (likeBtnClass && /active|liked|pressed/.test(likeBtnClass)) ||\n          likeBtnAriaPressed === 'true'\n        ) {\n          liked = true;\n          break;\n        }\n      }\n      await page.waitForTimeout(200);\n    }\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract button text and class for verification\n    const likeBtnText = await page.$eval(likeBtnSelector, el => el.textContent.trim());\n    const likeBtnFinalClass = await page.$eval(likeBtnSelector, el => el.className);\n\n    return {\n      success: true,\n      action: \"Clicked the like button for the first video (data-video-id='1') and verified liked state.\",\n      extractedData: {\n        likeBtnText,\n        likeBtnFinalClass,\n        likeBtnAriaPressed,\n        liked\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 14152,
      "timestamp": "2025-09-15T10:41:07.874Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the first video container with data-video-id=\"1\"\n    const videoContainerSelector = 'div.video-container[data-video-id=\"1\"]';\n    await page.waitForSelector(videoContainerSelector, { timeout: 5000 });\n\n    // Find the like button within this container (use :scope to avoid confusion if there are multiple .like-btns)\n    // Try XPath to ensure robustness and difference from previous attempt\n    const likeBtnXPath = `//div[contains(@class, \"video-container\") and @data-video-id=\"1\"]//button[contains(@class, \"like-btn\")]`;\n    await page.waitForSelector(videoContainerSelector + ' button.like-btn', { timeout: 3000 });\n    const likeBtn = await page.$x(likeBtnXPath);\n\n    if (!likeBtn || likeBtn.length === 0) {\n      throw new Error('Like button for first video not found');\n    }\n\n    // Scroll into view to ensure visibility before clicking\n    await likeBtn[0].evaluate(el => el.scrollIntoView({behavior: \"auto\", block: \"center\"}));\n\n    // Take screenshot before click\n    const beforeClickScreenshot = path.join(screenshotsDir, 'step_2_before_like_click.png');\n    await page.screenshot({ path: beforeClickScreenshot });\n    screenshots.push(beforeClickScreenshot);\n\n    // Click the like button\n    await likeBtn[0].click();\n\n    // Wait for like state to change - try to detect change in aria-pressed, class, or possibly text color\n    // We'll check for a class change or \"liked\" state within 2 seconds\n    let likeStateChanged = false;\n    for (let i = 0; i < 10; i++) {\n      // Check if the button has a 'liked' class or aria-pressed is true\n      const isLiked = await likeBtn[0].evaluate(\n        el =>\n          el.classList.contains('liked') ||\n          el.getAttribute('aria-pressed') === 'true' ||\n          window.getComputedStyle(el).color === 'rgb(255, 0, 80)'\n      );\n      if (isLiked) {\n        likeStateChanged = true;\n        break;\n      }\n      await page.waitForTimeout(200);\n    }\n\n    // Take screenshot after click\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_3_after_like_click.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // Extract like button state (class, aria-pressed, style)\n    const likeBtnState = await likeBtn[0].evaluate(el => ({\n      class: el.className,\n      ariaPressed: el.getAttribute('aria-pressed'),\n      computedColor: window.getComputedStyle(el).color,\n      text: el.textContent\n    }));\n\n    return {\n      success: likeStateChanged,\n      action: \"Clicked the like button of the first video (data-video-id='1'). Verified liked state by class/aria/style.\",\n      extractedData: {\n        likeBtnState\n      },\n      screenshots,\n      error: likeStateChanged ? null : \"Like button state did not change to liked\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16602,
      "timestamp": "2025-09-15T10:41:22.026Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the first video container with data-video-id=\"1\"\n    const videoContainerSelector = '[data-video-id=\"1\"]';\n    await page.waitForSelector(videoContainerSelector, { timeout: 5000 });\n\n    // Use a more specific selector for the like button\n    // Try to locate via xpath as alternative to previous attempts\n    const likeBtnXPath = \"//div[contains(@class,'video-container') and @data-video-id='1']//button[contains(@class,'like-btn')]\";\n    await page.waitForSelector(videoContainerSelector + \" button.like-btn\", { timeout: 3000 });\n\n    const likeBtn = await page.$x(likeBtnXPath);\n    if (!likeBtn.length) {\n      throw new Error('Like button for first video not found');\n    }\n\n    // Scroll into view to avoid overlay issues\n    await likeBtn[0].evaluate(btn => btn.scrollIntoView({behavior: 'instant', block: 'center'}));\n\n    // Take screenshot before clicking like button\n    const preLikeShot = path.join(screenshotsDir, 'step_2_pre_like.png');\n    await page.screenshot({ path: preLikeShot });\n    screenshots.push(preLikeShot);\n\n    // Click the like button\n    await likeBtn[0].click();\n\n    // Wait for liked state: e.g., .liked class, or aria-pressed, or number increment\n    // Try to detect .liked class or aria-pressed attribute, but fallback to a short wait\n    let liked = false;\n\n    // Try for up to 2 seconds to detect .liked or aria-pressed or change in style\n    for (let i = 0; i < 10; i++) {\n      // Check if button has .liked or aria-pressed=\"true\"\n      const btnState = await likeBtn[0].evaluate(btn => ({\n        class: btn.className,\n        aria: btn.getAttribute('aria-pressed'),\n        color: window.getComputedStyle(btn).color\n      }));\n      if (\n        (btnState.class && btnState.class.includes('liked')) ||\n        (btnState.aria === 'true') ||\n        (btnState.color && (btnState.color !== 'rgb(255, 255, 255)' && btnState.color !== 'white'))\n      ) {\n        liked = true;\n        break;\n      }\n      await page.waitForTimeout(200);\n    }\n\n    // Take screenshot after clicking like\n    const postLikeShot = path.join(screenshotsDir, 'step_3_post_like.png');\n    await page.screenshot({ path: postLikeShot });\n    screenshots.push(postLikeShot);\n\n    // Extract data to verify\n    const btnInfo = await likeBtn[0].evaluate(btn => ({\n      class: btn.className,\n      ariaPressed: btn.getAttribute('aria-pressed'),\n      color: window.getComputedStyle(btn).color,\n      text: btn.textContent\n    }));\n\n    return {\n      success: liked,\n      action: liked\n        ? \"Clicked the like button on the first video and verified liked state\"\n        : \"Clicked the like button on the first video but could not verify liked state\",\n      extractedData: {\n        likeButton: btnInfo\n      },\n      screenshots,\n      error: liked ? null : \"Like state could not be visually confirmed\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19933,
      "timestamp": "2025-09-15T10:41:38.628Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 50687,
  "timestamp": "2025-09-15T10:41:07.874Z",
  "savedAt": "2025-09-15T10:41:58.562Z",
  "version": "1.0"
}