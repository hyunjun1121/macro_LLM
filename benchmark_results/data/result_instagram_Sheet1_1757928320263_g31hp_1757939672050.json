{
  "id": "instagram_Sheet1_1757928320263_g31hp_1757939672050",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320263_g31hp",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post's like button to be visible\n    // Selector: .post:first-child .like-btn i\n    const likeBtnSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(likeBtnSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Get the class of the heart icon before clicking\n    const heartBefore = await page.$eval(likeBtnSelector, el => el.className);\n\n    // Click the like button (the <i> is inside the button, so click the parent button)\n    const likeButtonParent = await page.$eval(likeBtnSelector, el => {\n      // Find the closest button ancestor\n      let btn = el.closest('button');\n      if (btn) {\n        btn.setAttribute('data-macro-like-btn', 'true');\n        return true;\n      }\n      return false;\n    });\n    if (!likeButtonParent) throw new Error('Like button not found');\n\n    // Now click the button using the new attribute\n    await page.click('button[data-macro-like-btn=\"true\"]');\n\n    // Wait for the heart icon to become filled (class should change, e.g., from fa-regular to fa-solid)\n    // We'll poll the class for up to 3 seconds\n    let heartAfter = heartBefore;\n    let attempts = 0;\n    while (heartAfter === heartBefore && attempts < 30) {\n      await page.waitForTimeout(100);\n      heartAfter = await page.$eval(likeBtnSelector, el => el.className);\n      attempts++;\n    }\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Determine if the heart icon is now filled (fa-solid or similar)\n    const isFilled = /fa-solid/.test(heartAfter) && !/fa-regular/.test(heartAfter);\n\n    return {\n      success: isFilled,\n      action: \"Clicked like button on the first post and verified the heart icon became filled\",\n      extractedData: {\n        heartIconClass_before: heartBefore,\n        heartIconClass_after: heartAfter,\n        heartIconFilled: isFilled\n      },\n      screenshots,\n      error: isFilled ? null : \"Heart icon did not become filled after clicking like\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17357,
      "timestamp": "2025-09-15T12:34:32.050Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // 1. Navigate to the HTML file and wait for load\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // 2. Take initial screenshot of the feed\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // 3. Wait for the first post in feed to appear\n    // Use a robust selector: first .post in .posts container\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n\n    // 4. Find the first post (using :nth-child(1) for robustness)\n    const firstPostHandle = await page.$('.posts .post:nth-child(1)');\n    if (!firstPostHandle) {\n      throw new Error('First post not found');\n    }\n\n    // 5. Locate the like button within the first post using an alternative selector strategy:\n    // Try to find button with class 'like-btn', but fallback to icon if needed\n    let likeBtnHandle = await firstPostHandle.$('button.like-btn');\n    if (!likeBtnHandle) {\n      // Try alternative: a clickable element containing a heart icon\n      likeBtnHandle = await firstPostHandle.$('i.far.fa-heart');\n    }\n    if (!likeBtnHandle) {\n      // Try XPath as a last resort\n      const likeIconXPath = \".//button[contains(@class,'like-btn')] | .//i[contains(@class,'fa-heart')]\";\n      const likeIcons = await firstPostHandle.$x(likeIconXPath);\n      if (likeIcons.length > 0) {\n        likeBtnHandle = likeIcons[0];\n      }\n    }\n    if (!likeBtnHandle) {\n      throw new Error('Like button/icon not found in the first post');\n    }\n\n    // 6. Take screenshot before clicking like\n    const beforeLikeShot = path.join(screenshotsDir, 'step_2_before_like.png');\n    await page.screenshot({ path: beforeLikeShot });\n    screenshots.push(beforeLikeShot);\n\n    // 7. Click the like button/icon\n    await likeBtnHandle.click();\n    // Wait for any UI animation or state update (CSS transition)\n    await page.waitForTimeout(600);\n\n    // 8. Take screenshot after clicking like\n    const afterLikeShot = path.join(screenshotsDir, 'step_3_after_like.png');\n    await page.screenshot({ path: afterLikeShot });\n    screenshots.push(afterLikeShot);\n\n    // 9. Verify the heart icon is filled (fa-solid or fas)\n    // Find the heart icon inside the first post again, after clicking\n    const filledHeart = await firstPostHandle.$('i.fa-heart.fas, i.fa-heart.fa-solid');\n    let likeFilled = false;\n    if (filledHeart) {\n      // Extra check: get computed class names\n      const className = await filledHeart.getAttribute('class');\n      if (className && (className.includes('fa-solid') || className.includes('fas'))) {\n        likeFilled = true;\n      }\n    }\n\n    // 10. Compose extractedData for verification\n    const extractedData = {\n      likeFilled\n    };\n\n    return {\n      success: likeFilled,\n      action: likeFilled\n        ? \"Clicked like button on first post and verified heart icon is filled\"\n        : \"Clicked like button but did not verify filled heart icon\",\n      extractedData,\n      screenshots,\n      error: likeFilled ? null : \"Heart icon did not become filled\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 20648,
      "timestamp": "2025-09-15T12:34:49.407Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post in the feed using a robust selector\n    // Using :nth-of-type(1) and more specific child selectors\n    const firstPostLikeBtnIconSelector = '.posts .post:nth-of-type(1) .like-btn i, .feed .posts > .post:first-child .like-btn i';\n    // Wait for the like button icon to be visible\n    await page.waitForSelector(firstPostLikeBtnIconSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot before clicking Like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Check initial state: is the heart filled or not?\n    const initialHeartClass = await page.$eval(firstPostLikeBtnIconSelector, el => el.className);\n\n    // Click the like button (click the icon or its parent if needed)\n    // Try to click the icon first, otherwise click parent button\n    let clickWorked = false;\n    try {\n      await page.click(firstPostLikeBtnIconSelector, { timeout: 2000 });\n      clickWorked = true;\n    } catch {\n      // Fallback: try clicking parent button\n      const buttonHandle = await page.$('.posts .post:nth-of-type(1) .like-btn, .feed .posts > .post:first-child .like-btn');\n      if (buttonHandle) {\n        await buttonHandle.click();\n        clickWorked = true;\n      }\n    }\n\n    // Wait for the heart icon to change (filled)\n    // Commonly, a filled heart uses 'fas fa-heart', unfilled is 'far fa-heart'\n    // Wait up to 3s for the class to change\n    let filled = false;\n    for (let i = 0; i < 6; i++) {\n      const cls = await page.$eval(firstPostLikeBtnIconSelector, el => el.className);\n      if (\n        (cls.includes('fas') && cls.includes('fa-heart')) || \n        cls.match(/\\bfas\\b.*\\bfa-heart\\b/) // fallback regex\n      ) {\n        filled = true;\n        break;\n      }\n      await page.waitForTimeout(500);\n    }\n\n    // Take screenshot after Like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extracted data for verification\n    const finalHeartClass = await page.$eval(firstPostLikeBtnIconSelector, el => el.className);\n\n    return {\n      success: filled && clickWorked,\n      action: \"Clicked Like on first post and verified the heart icon became filled\",\n      extractedData: {\n        initialHeartClass,\n        finalHeartClass,\n        heartFilled: filled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 27926,
      "timestamp": "2025-09-15T12:35:10.055Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 65931,
  "timestamp": "2025-09-15T12:34:32.050Z",
  "savedAt": "2025-09-15T12:35:37.981Z",
  "version": "1.0"
}