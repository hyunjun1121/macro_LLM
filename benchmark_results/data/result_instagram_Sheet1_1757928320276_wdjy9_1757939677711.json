{
  "id": "instagram_Sheet1_1757928320276_wdjy9_1757939677711",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320276_wdjy9",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post's like button to be visible\n    // Selector: .post:first-child .like-btn i\n    const likeBtnIconSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(likeBtnIconSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Get the icon's class before clicking (to verify later)\n    const iconClassBefore = await page.$eval(likeBtnIconSelector, el => el.className);\n\n    // Click the like button (parent button of the icon)\n    const likeBtnButtonSelector = '.posts .post:first-child .like-btn';\n    await page.waitForSelector(likeBtnButtonSelector, { state: 'visible', timeout: 5000 });\n    await page.click(likeBtnButtonSelector);\n\n    // Wait for the heart icon to become \"filled\"\n    // Usually, this is a class change, e.g., from 'far fa-heart' to 'fas fa-heart'\n    // We'll poll for the class to change to include 'fas'\n    let iconClassAfter = iconClassBefore;\n    const maxRetries = 10;\n    let retries = 0;\n    while (!iconClassAfter.includes('fas') && retries < maxRetries) {\n      await page.waitForTimeout(300);\n      iconClassAfter = await page.$eval(likeBtnIconSelector, el => el.className);\n      retries++;\n    }\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extracted data for verification\n    const extractedData = {\n      iconClassBefore,\n      iconClassAfter,\n      heartFilled: iconClassAfter.includes('fas') && !iconClassAfter.includes('far')\n    };\n\n    return {\n      success: extractedData.heartFilled,\n      action: \"Clicked like button on the first post and verified heart icon becomes filled\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15305,
      "timestamp": "2025-09-15T12:34:37.711Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the posts feed to load by finding the first .post element\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n\n    // Locate the like button in the first post using a robust selector\n    // Try multiple strategies:\n    // 1. Select via posts container > first .post > .post-actions > .like-btn\n    // 2. Fallback: Use nth-of-type, then .like-btn\n    let likeBtnHandle = null;\n    try {\n      likeBtnHandle = await page.$('.posts .post:first-child .like-btn');\n    } catch {}\n    if (!likeBtnHandle) {\n      // Try alternative: nth-of-type\n      likeBtnHandle = await page.$('.posts .post:nth-of-type(1) .like-btn');\n    }\n    if (!likeBtnHandle) {\n      throw new Error('Like button on the first post not found');\n    }\n\n    // Take screenshot before clicking Like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Click the like button (simulate a user click)\n    await likeBtnHandle.click();\n\n    // Wait for the heart icon within the button to update to \"filled\"\n    // The heart icon is likely an <i> element inside .like-btn\n    // Use a waitForFunction to detect the class or style change\n    const filled = await page.waitForFunction(() => {\n      // Get the first post's like icon\n      const post = document.querySelector('.posts .post');\n      if (!post) return false;\n      const likeBtn = post.querySelector('.like-btn');\n      if (!likeBtn) return false;\n      // The icon is likely <i class=\"fa-heart ...\"> or similar\n      const icon = likeBtn.querySelector('i');\n      if (!icon) return false;\n      // Look for a filled class (for FontAwesome: fa-solid or fa-heart filled)\n      return (\n        icon.classList.contains('fas') ||\n        icon.classList.contains('fa-solid') ||\n        icon.classList.contains('fa-heart') ||\n        icon.style.color === 'rgb(237, 73, 86)' || // Instagram heart red\n        icon.style.color === '#ed4956'\n      );\n    }, { timeout: 4000 });\n\n    // Take screenshot after clicking Like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract heart icon class and color for verification\n    const heartIconData = await page.evaluate(() => {\n      const post = document.querySelector('.posts .post');\n      if (!post) return {};\n      const likeBtn = post.querySelector('.like-btn');\n      if (!likeBtn) return {};\n      const icon = likeBtn.querySelector('i');\n      if (!icon) return {};\n      return {\n        class: icon.className,\n        color: getComputedStyle(icon).color,\n        filled: icon.classList.contains('fas') || icon.classList.contains('fa-solid')\n      };\n    });\n\n    return {\n      success: true,\n      action: \"Clicked like button on first post and verified heart icon becomes filled\",\n      extractedData: heartIconData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19592,
      "timestamp": "2025-09-15T12:34:53.016Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the feed container to appear using a broad selector\n    await page.waitForSelector('.feed .posts .post', { timeout: 5000 });\n\n    // Select the first post using :nth-of-type(1) (alternative selector to :first-child)\n    const firstPost = await page.$('.feed .posts .post:nth-of-type(1)');\n    if (!firstPost) {\n      throw new Error(\"First post not found in feed\");\n    }\n\n    // Scroll to the first post to ensure it's in view\n    await firstPost.scrollIntoViewIfNeeded();\n\n    // Wait for the like button icon inside the first post\n    // Look for the <button> with class 'like-btn' and then its <i> icon\n    const likeBtnIconHandle = await firstPost.$('.like-btn i');\n    if (!likeBtnIconHandle) {\n      throw new Error(\"Like button icon not found on first post\");\n    }\n\n    // Optionally, check the initial state (unfilled heart)\n    // We'll inspect the icon's classList for 'fa-regular' (FontAwesome regular heart)\n    const initialHeartClasses = await likeBtnIconHandle.evaluate(node => node.className);\n    const initialIsFilled = initialHeartClasses.includes('fa-solid');\n\n    // Only click if not already liked\n    if (!initialIsFilled) {\n      // Click the like button (button, not icon)\n      const likeBtn = await firstPost.$('.like-btn');\n      if (!likeBtn) {\n        throw new Error(\"Like button not found on first post\");\n      }\n      await likeBtn.click();\n      // Wait for heart icon to become filled (class changes from fa-regular to fa-solid)\n      await page.waitForFunction(\n        el => el.className.includes('fa-solid'),\n        likeBtnIconHandle,\n        { timeout: 3000 }\n      );\n    }\n\n    // Take a screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_like.png'));\n\n    // Extract the final icon class to verify it's filled\n    const finalHeartClasses = await likeBtnIconHandle.evaluate(node => node.className);\n    const isFilled = finalHeartClasses.includes('fa-solid');\n\n    return {\n      success: isFilled,\n      action: \"Clicked the like button on the first post and verified the heart icon is filled\",\n      extractedData: {\n        heartIconClass: finalHeartClasses,\n        heartIsFilled: isFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 23938,
      "timestamp": "2025-09-15T12:35:12.608Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 58835,
  "timestamp": "2025-09-15T12:34:37.711Z",
  "savedAt": "2025-09-15T12:35:36.546Z",
  "version": "1.0"
}