{
  "id": "instagram_Sheet1_1757928320264_uipcy_1757939672472",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320264_uipcy",
    "description": "IG_REG_001",
    "objective": "Regular",
    "expectedResult": "Click like button on the first post in feed and verify heart icon becomes filled",
    "difficulty": "Easy",
    "category": ".post:first-child .like-btn i",
    "tags": [
      "Heart icon changes from \"far fa-heart\" to \"fas fa-heart\""
    ],
    "notes": "1. Find first .post .like-btn 2. Click the button 3. Verify icon class contains \"fas fa-heart\""
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first post's like button to be visible\n    // Selector: .post:first-child .like-btn i\n    const likeBtnSelector = '.posts .post:first-child .like-btn i';\n    await page.waitForSelector(likeBtnSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot before clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_like.png'));\n\n    // Get the heart icon's initial classes (to check if it's already filled)\n    const initialClass = await page.$eval(likeBtnSelector, el => el.className);\n\n    // Click the like button (the parent button, if the <i> is inside a button)\n    // Try to click the button, fallback to clicking the icon itself\n    let clicked = false;\n    try {\n      // Try to click the parent button\n      const buttonHandle = await page.$('.posts .post:first-child .like-btn');\n      if (buttonHandle) {\n        await buttonHandle.click();\n        clicked = true;\n      }\n    } catch (e) {}\n    if (!clicked) {\n      // Fallback: click the icon directly\n      await page.click(likeBtnSelector);\n    }\n\n    // Wait for the heart icon to become \"filled\"\n    // Usually, a filled heart uses 'fas fa-heart', and unfilled uses 'far fa-heart'\n    // We'll wait for the class to change from initialClass\n    await page.waitForFunction(\n      (selector, initialClass) => {\n        const el = document.querySelector(selector);\n        return el && el.className !== initialClass;\n      },\n      likeBtnSelector,\n      initialClass,\n      { timeout: 3000 }\n    );\n\n    // Take screenshot after clicking like\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_like.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_like.png'));\n\n    // Extract the new class of the heart icon\n    const newClass = await page.$eval(likeBtnSelector, el => el.className);\n\n    // Determine if the heart icon is now \"filled\"\n    // Typical filled: 'fas fa-heart', unfilled: 'far fa-heart'\n    const isFilled = newClass.includes('fas') && newClass.includes('fa-heart') && !newClass.includes('far');\n\n    return {\n      success: isFilled,\n      action: \"Clicked like button on the first post and verified the heart icon becomes filled\",\n      extractedData: {\n        initialHeartClass: initialClass,\n        afterLikeHeartClass: newClass,\n        heartIconFilled: isFilled\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16253,
      "timestamp": "2025-09-15T12:34:32.473Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for at least one post to be visible\n    // Use a robust selector: the first .post inside .posts\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n\n    // Get the first post element\n    const postHandles = await page.$$('.posts .post');\n    if (!postHandles.length) throw new Error('No posts found in feed');\n\n    const firstPost = postHandles[0];\n\n    // Within the first post, find the like button via a different selector strategy\n    // Instead of .like-btn, try to find the heart icon by aria-label or title attribute, or by <i> class\n\n    // Try to find the like button using an XPath based on the heart icon (FontAwesome) inside the post\n    const heartXPath = './/button[contains(@class, \"like-btn\")]//i[contains(@class, \"fa-heart\")]';\n    const heartIcon = await firstPost.$x(heartXPath);\n    if (heartIcon.length === 0) throw new Error('Like button (heart icon) not found in first post');\n\n    // Scroll into view just in case\n    await heartIcon[0].evaluate(el => el.scrollIntoView({block: 'center'}));\n\n    // Take screenshot before clicking\n    const beforeClickScreenshot = path.join(screenshotsDir, 'step_2_before_like.png');\n    await page.screenshot({ path: beforeClickScreenshot });\n    screenshots.push(beforeClickScreenshot);\n\n    // Click the like button (go up to the parent button)\n    const likeBtn = await heartIcon[0].evaluateHandle(el => el.closest('button'));\n    if (!likeBtn) throw new Error('Like button not found via closest');\n\n    await likeBtn.click();\n\n    // Wait for heart icon to become 'filled'\n    // Check for class change (e.g., 'fa-solid'), using a timeout/retry\n    let isFilled = false, filledClass = 'fa-solid';\n    for (let i = 0; i < 10; ++i) {\n      // Give time for UI update\n      await page.waitForTimeout(300);\n\n      const classNames = await heartIcon[0].evaluate(el => el.className);\n      if (classNames.includes(filledClass)) {\n        isFilled = true;\n        break;\n      }\n    }\n\n    // Take screenshot after clicking\n    const afterClickScreenshot = path.join(screenshotsDir, 'step_3_after_like.png');\n    await page.screenshot({ path: afterClickScreenshot });\n    screenshots.push(afterClickScreenshot);\n\n    // Extract data: was the heart icon filled?\n    const finalClassNames = await heartIcon[0].evaluate(el => el.className);\n\n    return {\n      success: isFilled,\n      action: \"Clicked the like button on the first post and verified the heart icon became filled.\",\n      extractedData: {\n        heartIconClassAfterClick: finalClassNames,\n        heartIconFilled: isFilled\n      },\n      screenshots,\n      error: isFilled ? null : \"Heart icon did not become filled after clicking like\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18201,
      "timestamp": "2025-09-15T12:34:48.726Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the posts container using a broad CSS selector\n    await page.waitForSelector('.posts .post', { timeout: 5000 });\n\n    // Find the first post using :nth-of-type(1) as alternate selector\n    const firstPostSelector = '.posts .post:nth-of-type(1)';\n    await page.waitForSelector(firstPostSelector, { timeout: 3000 });\n\n    // Locate the like button within the first post using XPath as an alternative strategy\n    const likeBtnXPath = `(${firstPostSelector}//button[contains(@class, \"like-btn\")])[1] | //div[contains(@class, \"post\")][1]//button[contains(@class, \"like-btn\")]`;\n    let likeBtnHandle = await page.$x(likeBtnXPath);\n    if (!likeBtnHandle || likeBtnHandle.length === 0) {\n      // Fallback to CSS selector inside first post\n      likeBtnHandle = await page.$(`${firstPostSelector} button.like-btn`);\n      if (!likeBtnHandle) throw new Error('Like button not found in first post');\n    } else {\n      likeBtnHandle = likeBtnHandle[0];\n    }\n\n    // Take screenshot before clicking like\n    const beforeLikeScreenshot = path.join(screenshotsDir, 'step_2_before_like.png');\n    await page.screenshot({ path: beforeLikeScreenshot });\n    screenshots.push(beforeLikeScreenshot);\n\n    // Find the heart icon inside the like button and check its initial class (should not be 'fas')\n    const heartIconSelector = `${firstPostSelector} button.like-btn i`;\n    await page.waitForSelector(heartIconSelector, { timeout: 2000 });\n    const initialHeartClass = await page.$eval(heartIconSelector, el => el.className);\n\n    // Click the like button (using the handle)\n    await (likeBtnHandle.click ? likeBtnHandle.click() : likeBtnHandle.evaluate(el => el.click()));\n\n    // Wait for heart icon to change to filled (class includes 'fas fa-heart')\n    await page.waitForFunction(\n      (selector, prevClass) => {\n        const el = document.querySelector(selector);\n        return el && el.className.includes('fas') && !prevClass.includes('fas');\n      },\n      {},\n      heartIconSelector,\n      initialHeartClass\n    );\n\n    // Take screenshot after clicking like\n    const afterLikeScreenshot = path.join(screenshotsDir, 'step_3_after_like.png');\n    await page.screenshot({ path: afterLikeScreenshot });\n    screenshots.push(afterLikeScreenshot);\n\n    // Extract class of heart icon after click\n    const finalHeartClass = await page.$eval(heartIconSelector, el => el.className);\n\n    // Verify: class should now include 'fas fa-heart'\n    const isHeartFilled = finalHeartClass.includes('fas') && finalHeartClass.includes('fa-heart');\n\n    return {\n      success: isHeartFilled,\n      action: isHeartFilled\n        ? \"Clicked like button on first post and verified heart icon is filled\"\n        : \"Clicked like button, but heart icon did not become filled\",\n      extractedData: {\n        initialHeartClass,\n        finalHeartClass,\n        isHeartFilled\n      },\n      screenshots,\n      error: isHeartFilled ? null : \"Heart icon did not fill after like\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16618,
      "timestamp": "2025-09-15T12:35:06.927Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 51073,
  "timestamp": "2025-09-15T12:34:32.472Z",
  "savedAt": "2025-09-15T12:35:23.545Z",
  "version": "1.0"
}