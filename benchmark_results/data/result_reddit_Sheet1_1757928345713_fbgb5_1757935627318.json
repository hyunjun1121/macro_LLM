{
  "id": "reddit_Sheet1_1757928345713_fbgb5_1757935627318",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345713_fbgb5",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input and verify focus\n    await page.waitForSelector('#searchInput');\n    await page.click('#searchInput');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_input_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_input_focused.png'));\n\n    // Use Tab key to navigate to the create post button\n    await page.keyboard.press('Tab'); // Move focus to the theme toggle button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_theme_toggle_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_theme_toggle_focused.png'));\n\n    await page.keyboard.press('Tab'); // Move focus to the create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_create_post_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_create_post_focused.png'));\n\n    // Verify focus on the create post button\n    const isCreatePostButtonFocused = await page.evaluate(() => {\n      const button = document.querySelector('button.create-post-btn');\n      return document.activeElement === button;\n    });\n\n    // Extract meaningful data\n    const extractedData = {\n      createPostButtonFocused: isCreatePostButtonFocused\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation and verified focus on interactive elements\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15724,
      "timestamp": "2025-09-15T11:27:07.318Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field and verify focus\n    await page.waitForSelector('#searchInput');\n    await page.click('#searchInput');\n    await page.keyboard.press('Tab'); // Press Tab to move focus\n    const isSearchInputFocused = await page.evaluate(() => document.activeElement === document.getElementById('searchInput'));\n    console.log('Search Input Focused:', isSearchInputFocused);\n\n    // Focus on the create post button and verify focus\n    await page.waitForSelector('.create-post-btn');\n    await page.keyboard.press('Tab'); // Press Tab to move focus\n    await page.keyboard.press('Tab'); // Press Tab again\n    const isCreatePostButtonFocused = await page.evaluate(() => document.activeElement.matches('.create-post-btn'));\n    console.log('Create Post Button Focused:', isCreatePostButtonFocused);\n\n    // Take screenshot after navigation\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_navigation.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_navigation.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {\n        isSearchInputFocused,\n        isCreatePostButtonFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16961,
      "timestamp": "2025-09-15T11:27:23.042Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Start keyboard navigation test\n    const interactiveElements = [\n      '#searchInput', // Search input\n      'button.theme-toggle-btn', // Theme toggle button\n      'button.create-post-btn', // Create post button\n      'button.community-link', // Community links\n      '.quick-action-btn' // Quick action buttons\n    ];\n\n    for (const selector of interactiveElements) {\n      await page.focus(selector); // Focus on the element\n      await page.keyboard.press('Tab'); // Simulate Tab key press\n      await page.waitForTimeout(100); // Small delay to observe focus change\n      await page.screenshot({ path: path.join(screenshotsDir, `focused_on_${selector.replace(/\\W/g, '_')}.png`) });\n      screenshots.push(path.join(screenshotsDir, `focused_on_${selector.replace(/\\W/g, '_')}.png`));\n    }\n\n    // Verify focus on the last element\n    const focusedElement = await page.evaluate(() => document.activeElement);\n    const focusedSelector = await page.evaluate(el => el ? el.className : null, focusedElement);\n    \n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: { focusedElement: focusedSelector },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15238,
      "timestamp": "2025-09-15T11:27:40.003Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 47923,
  "timestamp": "2025-09-15T11:27:07.318Z",
  "savedAt": "2025-09-15T11:27:55.241Z",
  "version": "1.0"
}