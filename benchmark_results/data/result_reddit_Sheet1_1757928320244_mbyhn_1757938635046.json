{
  "id": "reddit_Sheet1_1757928320244_mbyhn_1757938635046",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320244_mbyhn",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the first tabbable element (search input) to be present\n    await page.waitForSelector('#searchInput');\n\n    // Focus should start on body, so first Tab should focus the search input\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n\n    // Check focus is on search input\n    const active1 = await page.evaluate(() => document.activeElement.id);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_searchInput_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_searchInput_focus.png'));\n\n    // Tab to theme toggle button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const themeToggleFocused = await page.evaluate(() => {\n      const el = document.activeElement;\n      return el.classList.contains('theme-toggle-btn');\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_themeToggle_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_themeToggle_focus.png'));\n\n    // Tab to Create button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const createBtnFocused = await page.evaluate(() => {\n      const el = document.activeElement;\n      return el.classList.contains('create-post-btn');\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_createBtn_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_createBtn_focus.png'));\n\n    // Tab to user info (should be next tabbable, role=button, tabindex=0)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const userInfoFocused = await page.evaluate(() => {\n      const el = document.activeElement;\n      return el.classList.contains('user-info');\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_userInfo_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_userInfo_focus.png'));\n\n    // Tab to first sidebar community button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const commBtnText = await page.evaluate(() => {\n      const el = document.activeElement;\n      if (el.classList && el.classList.contains('community-link')) {\n        return el.textContent.trim();\n      }\n      return null;\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_6_sidebarComm_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_6_sidebarComm_focus.png'));\n\n    // Tab to next community button\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const commBtnText2 = await page.evaluate(() => {\n      const el = document.activeElement;\n      if (el.classList && el.classList.contains('community-link')) {\n        return el.textContent.trim();\n      }\n      return null;\n    });\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_7_sidebarComm2_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_7_sidebarComm2_focus.png'));\n\n    // Tab to post title input (main form)\n    // We'll press Tab several times until we reach the input with id=\"postTitle\"\n    let focusedId = '';\n    let maxTabs = 10;\n    let tabCount = 0;\n    while (tabCount < maxTabs) {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(200);\n      focusedId = await page.evaluate(() => document.activeElement.id);\n      if (focusedId === 'postTitle') break;\n      tabCount++;\n    }\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_8_postTitle_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_8_postTitle_focus.png'));\n\n    // Tab to community select dropdown\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(300);\n    const focusedSelectId = await page.evaluate(() => document.activeElement.id || document.activeElement.name);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_9_postCommunity_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_9_postCommunity_focus.png'));\n\n    // Tab to first quick-action button (View Profile)\n    // We'll press Tab several times until we focus a button with class 'quick-action-btn'\n    let quickActionText = '';\n    tabCount = 0;\n    while (tabCount < maxTabs) {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(200);\n      quickActionText = await page.evaluate(() => {\n        const el = document.activeElement;\n        if (el.classList && el.classList.contains('quick-action-btn')) {\n          return el.textContent.trim();\n        }\n        return null;\n      });\n      if (quickActionText) break;\n      tabCount++;\n    }\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_10_quickAction_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_10_quickAction_focus.png'));\n\n    // Extract the order of focusable elements we visited\n    const extractedData = {\n      focusOrder: [\n        active1, // should be 'searchInput'\n        themeToggleFocused ? 'theme-toggle-btn' : null,\n        createBtnFocused ? 'create-post-btn' : null,\n        userInfoFocused ? 'user-info' : null,\n        commBtnText,\n        commBtnText2,\n        focusedId, // should be 'postTitle'\n        focusedSelectId, // should be 'postCommunity' or undefined\n        quickActionText\n      ]\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order and accessibility.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 21734,
      "timestamp": "2025-09-15T12:17:15.046Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n\n    // Initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the body to ensure tab starts from the beginning\n    await page.focus('body');\n\n    // Sequence of focused elements as we tab through\n    const focusedElements = [];\n\n    // Helper to get element info\n    async function getFocusedInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        return {\n          tag: el.tagName,\n          id: el.id || null,\n          class: el.className || null,\n          name: el.getAttribute('name') || null,\n          placeholder: el.getAttribute('placeholder') || null,\n          ariaLabel: el.getAttribute('aria-label') || null,\n          role: el.getAttribute('role') || null,\n          text: el.innerText ? el.innerText.trim() : null\n        };\n      });\n    }\n\n    // Tab through the first 7 interactive elements\n    for (let i = 0; i < 7; i++) {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(200); // Allow focus to update\n      const info = await getFocusedInfo();\n      focusedElements.push(info);\n\n      // Take screenshot at each step\n      const shotPath = path.join(screenshotsDir, `step_focus_${i + 1}.png`);\n      await page.screenshot({ path: shotPath });\n      screenshots.push(shotPath);\n    }\n\n    // Also try reverse tab (Shift+Tab) to check backwards navigation\n    await page.keyboard.down('Shift');\n    await page.keyboard.press('Tab');\n    await page.keyboard.up('Shift');\n    await page.waitForTimeout(200);\n    const reverseFocus = await getFocusedInfo();\n\n    // Screenshot after reverse tab\n    const reverseShot = path.join(screenshotsDir, `step_focus_reverse.png`);\n    await page.screenshot({ path: reverseShot });\n    screenshots.push(reverseShot);\n\n    // Extract only non-null, unique elements from focusedElements\n    const uniqueFocus = [];\n    const seen = new Set();\n    for (const el of focusedElements) {\n      if (el && el.tag && el.class) {\n        const key = `${el.tag}|${el.id}|${el.class}|${el.name}|${el.placeholder}`;\n        if (!seen.has(key)) {\n          uniqueFocus.push(el);\n          seen.add(key);\n        }\n      }\n    }\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order, including reverse navigation.\",\n      extractedData: {\n        focusedElements: uniqueFocus,\n        reverseTabFocus: reverseFocus\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 13066,
      "timestamp": "2025-09-15T12:17:36.780Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for the header (banner) to ensure page is ready\n    await page.waitForSelector('header[role=\"banner\"]', { timeout: 5000 });\n\n    // Build ordered list of focusable/interactable elements on page (as visible to Tab navigation)\n    // We'll use a mix of selectors: input, button, select, [tabindex], a[href]\n    // This covers:\n    // - Search input (#searchInput)\n    // - Theme toggle button (has aria-label 'Toggle between light and dark theme')\n    // - Create button (has aria-label 'Create a new post')\n    // - Community buttons (sidebar, aria-label starting with 'Visit ')\n    // - Post creation select and input (if visible)\n    // - Profile quick action buttons (e.g., 'View Profile', etc.)\n\n    // Wait for main container to ensure sidebar and form are loaded\n    await page.waitForSelector('.main-container', { timeout: 5000 });\n\n    // Collect initial active element for reset\n    const getActiveElementInfo = async () => {\n      return await page.evaluate(() => {\n        const ae = document.activeElement;\n        if (!ae) return null;\n        return {\n          tag: ae.tagName,\n          id: ae.id,\n          class: ae.className,\n          ariaLabel: ae.getAttribute('aria-label'),\n          name: ae.getAttribute('name'),\n          placeholder: ae.getAttribute('placeholder'),\n          type: ae.getAttribute('type'),\n        };\n      });\n    };\n\n    // Focus the body to ensure Tab starts at top\n    await page.focus('body');\n\n    // Prepare an array to record the focus order\n    const focusOrder = [];\n\n    // Define how many tabs to send (to cover at least: search input, theme toggle, create post, all community links)\n    // The order should be: search input, theme toggle, create button, each community-link (4), then possibly others\n    // We'll send 12 tabs to be sure\n    for (let i = 0; i < 12; i++) {\n      // Press Tab\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(200);\n\n      // Record focused element's details\n      const info = await getActiveElementInfo();\n      focusOrder.push(info);\n\n      // Take a screenshot at specific steps\n      if (i === 0) {\n        // After Search input focused\n        const shot = path.join(screenshotsDir, `step_2_tab_search_input.png`);\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      if (i === 1) {\n        // After Theme toggle focused\n        const shot = path.join(screenshotsDir, `step_3_tab_theme_toggle.png`);\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      if (i === 2) {\n        // After Create button focused\n        const shot = path.join(screenshotsDir, `step_4_tab_create_post.png`);\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n      if (i >= 3 && i <= 6) {\n        // Community links\n        const shot = path.join(screenshotsDir, `step_${5 + (i - 3)}_tab_community_${i - 2}.png`);\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n    }\n\n    // Prepare extracted data: list of focusable elements encountered, in order\n    const extractedFocusables = focusOrder.map((f, idx) => ({\n      step: idx + 1,\n      tag: f && f.tag,\n      id: f && f.id,\n      class: f && f.class,\n      ariaLabel: f && f.ariaLabel,\n      name: f && f.name,\n      placeholder: f && f.placeholder,\n      type: f && f.type,\n    }));\n\n    // Check that key elements were focused in expected order\n    const searchInputFocused = extractedFocusables.find(f => f.id === 'searchInput');\n    const themeToggleFocused = extractedFocusables.find(f => f.class && f.class.includes('theme-toggle-btn'));\n    const createBtnFocused = extractedFocusables.find(f => f.class && f.class.includes('create-post-btn'));\n    const communityLinksFocused = extractedFocusables.filter(f => f.class && f.class.includes('community-link'));\n\n    return {\n      success: !!(searchInputFocused && themeToggleFocused && createBtnFocused && communityLinksFocused.length >= 4),\n      action: \"Tested keyboard Tab navigation order through interactive elements, verified focus order and took screenshots of each step.\",\n      extractedData: {\n        focusOrder: extractedFocusables,\n        searchInputFocused,\n        themeToggleFocused,\n        createBtnFocused,\n        communityLinksFocusedCount: communityLinksFocused.length\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 43470,
      "timestamp": "2025-09-15T12:17:49.846Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 78270,
  "timestamp": "2025-09-15T12:17:15.046Z",
  "savedAt": "2025-09-15T12:18:33.317Z",
  "version": "1.0"
}