{
  "id": "reddit_Sheet1_1757928345690_51a5a_1757935623364",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345690_51a5a",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab'); // Navigate to the next element\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_search_input_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_search_input_focus.png'));\n\n    // Focus on the create post button\n    await page.waitForSelector('button.create-post-btn');\n    await page.keyboard.press('Tab'); // Navigate to the create post button\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_create_post_button_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_create_post_button_focus.png'));\n\n    // Focus on the theme toggle button\n    await page.keyboard.press('Tab'); // Navigate to the theme toggle button\n    await page.waitForSelector('button.theme-toggle-btn');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_theme_toggle_button_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_theme_toggle_button_focus.png'));\n\n    // Verify focus on the user info button\n    await page.keyboard.press('Tab'); // Navigate to the user info button\n    await page.waitForSelector('.user-info');\n    const isUserInfoFocused = await page.evaluate(() => document.activeElement.classList.contains('user-info'));\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_5_after_user_info_button_focus.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_5_after_user_info_button_focus.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {\n        userInfoButtonFocused: isUserInfoFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18574,
      "timestamp": "2025-09-15T11:27:03.364Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab'); // Navigate to the next focusable element\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_focused.png'));\n\n    // Navigate through buttons\n    const buttonSelectors = [\n      'button.theme-toggle-btn', \n      'button.create-post-btn', \n      'button.community-link'\n    ];\n\n    for (const selector of buttonSelectors) {\n      await page.keyboard.press('Tab'); // Navigate to each button\n      await page.waitForSelector(selector);\n      const isFocused = await page.$eval(selector, el => document.activeElement === el);\n      if (isFocused) {\n        await page.screenshot({ path: path.join(screenshotsDir, `step_3_${selector.split('.')[1]}_focused.png`) });\n        screenshots.push(path.join(screenshotsDir, `step_3_${selector.split('.')[1]}_focused.png`));\n      }\n    }\n\n    // Navigate to the form input for the post title\n    await page.keyboard.press('Tab'); // Move to the post title input\n    await page.waitForSelector('#postTitle');\n    await page.focus('#postTitle');\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_post_title_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_post_title_focused.png'));\n\n    // Verify focus on the select dropdown\n    await page.keyboard.press('Tab'); // Navigate to the select dropdown\n    await page.waitForSelector('#postCommunity');\n    const isDropdownFocused = await page.$eval('#postCommunity', el => document.activeElement === el);\n    if (isDropdownFocused) {\n      await page.screenshot({ path: path.join(screenshotsDir, 'step_5_community_dropdown_focused.png') });\n      screenshots.push(path.join(screenshotsDir, 'step_5_community_dropdown_focused.png'));\n    }\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus.\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22973,
      "timestamp": "2025-09-15T11:27:21.938Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input and verify\n    await page.waitForSelector('#searchInput');\n    await page.click('#searchInput'); // Click to focus\n    await page.keyboard.press('Tab'); // Navigate to the next element\n    await page.waitForTimeout(500); // Wait for focus change\n    const focusedElement = await page.evaluate(() => document.activeElement.id);\n    \n    // Take screenshot after focusing on the input\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_focused.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_focused.png'));\n\n    // Verify if the focus is on the expected element\n    const isSearchInputFocused = focusedElement === 'searchInput';\n\n    // Navigate through community buttons\n    const communityButtons = [\n      '.community-link:nth-of-type(1)', // r/programming\n      '.community-link:nth-of-type(2)', // r/webdev\n      '.community-link:nth-of-type(3)', // r/javascript\n      '.community-link:nth-of-type(4)', // r/reactjs\n    ];\n\n    for (const buttonSelector of communityButtons) {\n      await page.keyboard.press('Tab'); // Navigate to community buttons\n      await page.waitForTimeout(500); // Wait for focus change\n      const currentFocusedElement = await page.evaluate(() => document.activeElement.className);\n      \n      // Take a screenshot after focusing on each button\n      await page.screenshot({ path: path.join(screenshotsDir, `step_3_${currentFocusedElement}.png`) });\n      screenshots.push(path.join(screenshotsDir, `step_3_${currentFocusedElement}.png`));\n    }\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus\",\n      extractedData: {\n        isSearchInputFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17284,
      "timestamp": "2025-09-15T11:27:44.911Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 58831,
  "timestamp": "2025-09-15T11:27:03.364Z",
  "savedAt": "2025-09-15T11:28:02.195Z",
  "version": "1.0"
}