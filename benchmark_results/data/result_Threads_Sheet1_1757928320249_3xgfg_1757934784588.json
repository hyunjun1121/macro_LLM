{
  "id": "Threads_Sheet1_1757928320249_3xgfg_1757934784588",
  "website": "Threads",
  "task": {
    "id": "Sheet1_1757928320249_3xgfg",
    "description": "M001",
    "objective": "Extract All Visible Usernames",
    "expectedResult": "Collect all usernames visible in the current thread feed and store them in an array",
    "difficulty": ".thread-username",
    "category": 3,
    "tags": [
      "30 seconds"
    ],
    "notes": "Yes"
  },
  "websiteInfo": {
    "name": "Threads",
    "htmlFiles": [
      "index.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the threads feed to be visible\n    await page.waitForSelector('#threads-feed', { timeout: 5000 });\n\n    // Wait for at least one username to appear in the thread feed\n    // Try both .thread-username and fallback to any .username inside #threads-feed\n    let usernameElements = await page.$$('.thread-username');\n    if (usernameElements.length === 0) {\n      // Wait for possible dynamic loading\n      await page.waitForTimeout(1000);\n      usernameElements = await page.$$('.thread-username');\n    }\n\n    // If still none, try alternative selector inside threads-feed\n    if (usernameElements.length === 0) {\n      usernameElements = await page.$$('#threads-feed .username');\n    }\n\n    // Extract usernames\n    const usernames = [];\n    for (const el of usernameElements) {\n      const text = (await el.textContent())?.trim();\n      if (text && !usernames.includes(text)) {\n        usernames.push(text);\n      }\n    }\n\n    // Take screenshot after extraction\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_usernames_collected.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_usernames_collected.png'));\n\n    return {\n      success: true,\n      action: \"Collected all usernames visible in the current thread feed and stored them in an array.\",\n      extractedData: {\n        usernames\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 10933,
      "timestamp": "2025-09-15T11:13:04.588Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the threads feed to appear\n    await page.waitForSelector('#threads-feed', { timeout: 5000 });\n\n    // Wait for at least one thread item to appear in the feed (robust for dynamic loading)\n    // Try to find a username by alternative strategies:\n    // - '.thread-username' inside '#threads-feed'\n    // - or look for [data-user] attributes within the threads feed\n    // - fallback: text nodes that are direct children of possible username containers\n\n    // Wait for any '.thread-username' (most likely selector)\n    await page.waitForSelector('#threads-feed .thread-username', { timeout: 3500 });\n\n    // Take screenshot after usernames are visible\n    const step2 = path.join(screenshotsDir, 'step_2_usernames_visible.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Extract usernames using multiple selector strategies\n\n    // 1. By '.thread-username' inside '#threads-feed'\n    const usernames1 = await page.$$eval(\n      '#threads-feed .thread-username',\n      nodes => nodes.map(n => n.textContent.trim()).filter(Boolean)\n    );\n\n    // 2. By '[data-user]' attribute inside '#threads-feed', but only if not already found\n    let usernames2 = [];\n    if (usernames1.length === 0) {\n      usernames2 = await page.$$eval(\n        '#threads-feed [data-user]',\n        nodes => nodes.map(n => n.getAttribute('data-user')).filter(Boolean)\n      );\n    }\n\n    // 3. As fallback, find any span or div with class containing \"username\" inside '#threads-feed'\n    let usernames3 = [];\n    if (usernames1.length === 0 && usernames2.length === 0) {\n      usernames3 = await page.$$eval(\n        '#threads-feed span[class*=\"username\"], #threads-feed div[class*=\"username\"]',\n        nodes => nodes.map(n => n.textContent.trim()).filter(Boolean)\n      );\n    }\n\n    // Use the non-empty list among the three strategies\n    const usernames = usernames1.length > 0\n      ? usernames1\n      : (usernames2.length > 0 ? usernames2 : usernames3);\n\n    // Remove duplicates and filter out empty strings\n    const uniqueUsernames = [...new Set(usernames)].filter(Boolean);\n\n    // Take a screenshot marking the usernames (for verification)\n    // Try to highlight the usernames in the DOM for the screenshot (if possible)\n    await page.evaluate(() => {\n      document.querySelectorAll('#threads-feed .thread-username').forEach(el => {\n        el.style.background = 'rgba(0,174,255,0.25)';\n        el.style.borderRadius = '4px';\n      });\n    });\n    const step3 = path.join(screenshotsDir, 'step_3_usernames_highlighted.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    return {\n      success: true,\n      action: \"Collected all visible thread usernames from the current feed using robust multi-strategy selectors.\",\n      extractedData: {\n        usernames: uniqueUsernames\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 29289,
      "timestamp": "2025-09-15T11:13:15.522Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for the threads feed to be visible\n    await page.waitForSelector('#threads-feed', { timeout: 5000 });\n\n    // Wait for at least one thread to load (thread items are likely children of #threads-feed)\n    await page.waitForFunction(() => {\n      const feed = document.querySelector('#threads-feed');\n      return feed && feed.children.length > 0;\n    }, { timeout: 6000 });\n\n    // Take screenshot after threads loaded\n    const loadedShot = path.join(screenshotsDir, 'step_2_threads_loaded.png');\n    await page.screenshot({ path: loadedShot });\n    screenshots.push(loadedShot);\n\n    // Try to find all usernames in the thread feed using multiple strategies\n\n    // Strategy 1: Look for elements with a class containing \"username\" inside #threads-feed\n    let usernames = await page.$$eval(\n      '#threads-feed [class*=\"username\"]',\n      nodes => nodes.map(n => n.textContent.trim()).filter(Boolean)\n    );\n\n    // Strategy 2: If none found, look for text nodes matching @username style\n    if (!usernames || usernames.length === 0) {\n      usernames = await page.$$eval(\n        '#threads-feed',\n        feeds => {\n          const usernamesSet = new Set();\n          function findHandles(node) {\n            if (node.nodeType === 1) {\n              // Element\n              if (node.textContent && /^@[\\w\\d_\\.]+$/.test(node.textContent.trim())) {\n                usernamesSet.add(node.textContent.trim().replace(/^@/, ''));\n              }\n              [...node.childNodes].forEach(findHandles);\n            }\n          }\n          feeds.forEach(feed => findHandles(feed));\n          return Array.from(usernamesSet);\n        }\n      );\n    }\n\n    // Strategy 3: Fallback - look for data-user attributes\n    if (!usernames || usernames.length === 0) {\n      usernames = await page.$$eval(\n        '#threads-feed [data-user]',\n        nodes => nodes.map(n => n.getAttribute('data-user')).filter(Boolean)\n      );\n    }\n\n    // Remove duplicates and filter out any empty usernames\n    usernames = Array.from(new Set(usernames)).filter(Boolean);\n\n    // Take screenshot after extraction\n    const extractedShot = path.join(screenshotsDir, 'step_3_usernames_extracted.png');\n    await page.screenshot({ path: extractedShot });\n    screenshots.push(extractedShot);\n\n    return {\n      success: true,\n      action: \"Collected all usernames visible in the current thread feed and stored them in an array using multiple selector strategies.\",\n      extractedData: {\n        usernames\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 14482,
      "timestamp": "2025-09-15T11:13:44.810Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 54704,
  "timestamp": "2025-09-15T11:13:04.588Z",
  "savedAt": "2025-09-15T11:13:59.292Z",
  "version": "1.0"
}