{
  "id": "instagram_Sheet1_1757928320263_ch1ul_1757940333663",
  "website": "instagram",
  "task": {
    "id": "Sheet1_1757928320263_ch1ul",
    "description": "IG_REG_010",
    "objective": "Regular",
    "expectedResult": "Open search modal and click remove button (×) on first recent search item",
    "difficulty": "Easy",
    "category": "#mainSearchInput, .search-item:first-child .remove-search",
    "tags": [
      "First search item disappears from recent searches list"
    ],
    "notes": "1. Click #mainSearchInput to open search 2. Click first .remove-search button 3. Verify search item is removed from DOM"
  },
  "websiteInfo": {
    "name": "instagram",
    "htmlFiles": [
      "index.html",
      "login.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Step 1: Focus the main search input to open the search modal\n    // Try both #mainSearchInput and header search bar fallback\n    let searchInputSelector = '#mainSearchInput';\n    let searchInput = await page.$(searchInputSelector);\n    if (!searchInput) {\n      // Fallback to the modal's input if not found in header\n      searchInputSelector = '#searchInput';\n    }\n    await page.waitForSelector(searchInputSelector, { state: 'visible', timeout: 3000 });\n    await page.click(searchInputSelector);\n\n    // Wait for the search modal to appear\n    await page.waitForSelector('#searchModal', { state: 'visible', timeout: 3000 });\n\n    // Take screenshot after modal opens\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_open.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_open.png'));\n\n    // Step 2: Wait for the first recent search item and its remove button\n    const firstRecentSearchSelector = '.recent-searches .search-item:first-child';\n    await page.waitForSelector(firstRecentSearchSelector, { state: 'visible', timeout: 3000 });\n\n    const removeBtnSelector = '.recent-searches .search-item:first-child .remove-search';\n    await page.waitForSelector(removeBtnSelector, { state: 'visible', timeout: 3000 });\n\n    // Extract username before removal for verification\n    const username = await page.$eval(\n      '.recent-searches .search-item:first-child .username',\n      el => el.textContent.trim()\n    );\n\n    // Take screenshot before removing\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_before_remove.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_before_remove.png'));\n\n    // Click the remove (×) button on the first recent search item\n    await page.click(removeBtnSelector);\n\n    // Wait for the item to be removed (either removed from DOM or hidden)\n    await page.waitForTimeout(500); // allow animation/DOM update\n    let itemStillPresent = true;\n    try {\n      itemStillPresent = await page.$eval(\n        '.recent-searches .search-item:first-child .username',\n        el => el.textContent.trim() === username\n      );\n    } catch (e) {\n      // If element not found, it's removed\n      itemStillPresent = false;\n    }\n\n    // Take screenshot after removal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_4_after_remove.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_4_after_remove.png'));\n\n    // Prepare extractedData for verification\n    const extractedData = {\n      removedUsername: username,\n      itemStillPresent: itemStillPresent\n    };\n\n    return {\n      success: !itemStillPresent,\n      action: \"Opened search modal and clicked remove button (×) on first recent search item\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 13998,
      "timestamp": "2025-09-15T12:45:33.663Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Step 1: Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Step 2: Open the search modal by focusing the main search input (in the header)\n    // Use multiple strategies to locate it: #mainSearchInput, input[placeholder=\"Search\"]\n    const mainSearchInput = await page.waitForSelector('#mainSearchInput, input[placeholder=\"Search\"]', { timeout: 4000 });\n    await mainSearchInput.click();\n    // Wait for the search modal to appear (by ID or modal class)\n    await page.waitForSelector('#searchModal.modal', { state: 'visible', timeout: 4000 });\n    await page.waitForTimeout(500); // Allow animation, if any\n\n    // Step 3: Take screenshot of the opened search modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_modal_opened.png'));\n\n    // Step 4: Locate the first recent search item and its remove (×) button\n    // Use .recent-searches .search-item:first-child .remove-search as selector\n    const removeBtn = await page.waitForSelector('.recent-searches .search-item:first-child .remove-search', { timeout: 4000 });\n    // Before clicking, extract the username for verification\n    const username = await page.$eval(\n      '.recent-searches .search-item:first-child .username',\n      el => el.textContent.trim()\n    );\n\n    // Step 5: Click the remove button (×)\n    await removeBtn.click();\n    // Wait for the item to be removed (wait for the username to be gone or search-item count to decrease)\n    await page.waitForFunction(\n      prevUsername => {\n        const first = document.querySelector('.recent-searches .search-item .username');\n        return !first || first.textContent.trim() !== prevUsername;\n      },\n      username,\n      { timeout: 3000 }\n    );\n\n    // Step 6: Take screenshot after removal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_recent_removed.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_recent_removed.png'));\n\n    // Step 7: Extract data to confirm removal\n    const remainingUsernames = await page.$$eval(\n      '.recent-searches .search-item .username',\n      nodes => nodes.map(n => n.textContent.trim())\n    );\n\n    return {\n      success: true,\n      action: \"Opened the search modal and clicked remove (×) on the first recent search item.\",\n      extractedData: {\n        removedUsername: username,\n        remainingRecentUsernames: remainingUsernames\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 14502,
      "timestamp": "2025-09-15T12:45:47.661Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Step 1: Focus on the main search input to open the search modal\n    // Use a combination of id and placeholder for robustness\n    const mainSearchSelector = 'input#mainSearchInput[placeholder=\"Search\"]';\n    await page.waitForSelector(mainSearchSelector, { timeout: 5000 });\n    await page.click(mainSearchSelector);\n\n    // Wait for the search modal to appear: it has id=\"searchModal\" and style should be visible\n    const searchModalSelector = '#searchModal.modal';\n    await page.waitForSelector(searchModalSelector, { state: 'visible', timeout: 5000 });\n\n    // Take screenshot of the opened modal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_modal_opened.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_modal_opened.png'));\n\n    // Step 2: Locate the first recent search item and its remove button\n    // Use a robust selector based on modal context and structure\n    // The first .search-item under .recent-searches inside the modal\n    const removeButtonSelector =\n      '#searchModal .recent-searches .search-item:first-child button.remove-search';\n\n    await page.waitForSelector(removeButtonSelector, { timeout: 5000, state: 'visible' });\n\n    // Extract username before removal for verification\n    const usernameSelector =\n      '#searchModal .recent-searches .search-item:first-child .username';\n    let removedUsername = null;\n    if (await page.$(usernameSelector)) {\n      removedUsername = await page.$eval(usernameSelector, el => el.textContent.trim());\n    }\n\n    // Click the remove (×) button of the first recent search item\n    await page.click(removeButtonSelector);\n\n    // Wait for the item to be removed from DOM (either removed or hidden)\n    await page.waitForFunction(\n      (sel, unameSel, uname) => {\n        const btn = document.querySelector(sel);\n        const unameEl = document.querySelector(unameSel);\n        // Button or username should not exist, or username should change\n        return !btn || !unameEl || (unameEl.textContent.trim() !== uname);\n      },\n      removeButtonSelector,\n      usernameSelector,\n      removedUsername,\n      { timeout: 5000 }\n    );\n\n    // Take screenshot after removal\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_removed.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_removed.png'));\n\n    // Verify the first search item was removed by checking username changed or gone\n    let newFirstUsername = null;\n    if (await page.$(usernameSelector)) {\n      newFirstUsername = await page.$eval(usernameSelector, el => el.textContent.trim());\n    }\n\n    return {\n      success: true,\n      action: 'Opened search modal and clicked remove (×) on first recent search item',\n      extractedData: {\n        removedUsername,\n        newFirstUsername,\n        wasRemoved: removedUsername !== newFirstUsername\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22295,
      "timestamp": "2025-09-15T12:46:02.163Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 50795,
  "timestamp": "2025-09-15T12:45:33.663Z",
  "savedAt": "2025-09-15T12:46:24.458Z",
  "version": "1.0"
}