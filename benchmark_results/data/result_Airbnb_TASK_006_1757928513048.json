{
  "id": "Airbnb_TASK_006_1757928513048",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing with data-listing-id='jun_1' to appear\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Wait for the favorite button inside the listing\n    const favBtnSelector = `${listingSelector} .listing-favorite`;\n    await page.waitForSelector(favBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get initial favorite button state (e.g., aria-pressed, class, or svg fill)\n    const initialFavState = await page.$eval(favBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        style: el.getAttribute('style')\n      };\n    });\n\n    // Get initial localStorage favorites (if available)\n    const initialLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        // Try common keys used for favorites\n        let favs = null;\n        if (window.localStorage.getItem('favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('favorites'));\n        } else if (window.localStorage.getItem('user_favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('user_favorites'));\n        } else if (window.localStorage.getItem('airbnb_favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('airbnb_favorites'));\n        }\n        return favs;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Click the favorite button\n    await page.click(favBtnSelector);\n\n    // Wait for button state to change (e.g., aria-pressed toggled, or class changes)\n    await page.waitForTimeout(800); // allow UI and storage to update\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get updated favorite button state\n    const updatedFavState = await page.$eval(favBtnSelector, el => {\n      return {\n        ariaPressed: el.getAttribute('aria-pressed'),\n        class: el.className,\n        text: el.textContent,\n        style: el.getAttribute('style')\n      };\n    });\n\n    // Get updated localStorage favorites\n    const updatedLocalStorageFavorites = await page.evaluate(() => {\n      try {\n        let favs = null;\n        if (window.localStorage.getItem('favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('favorites'));\n        } else if (window.localStorage.getItem('user_favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('user_favorites'));\n        } else if (window.localStorage.getItem('airbnb_favorites')) {\n          favs = JSON.parse(window.localStorage.getItem('airbnb_favorites'));\n        }\n        return favs;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    // Check if 'jun_1' is present or removed in favorites after toggle\n    let favoriteStatusChange = null;\n    if (initialLocalStorageFavorites && Array.isArray(initialLocalStorageFavorites)) {\n      const wasFav = initialLocalStorageFavorites.includes('jun_1');\n      const isFav = updatedLocalStorageFavorites && updatedLocalStorageFavorites.includes('jun_1');\n      favoriteStatusChange = { wasFav, isFav };\n    }\n\n    return {\n      success: true,\n      action: \"Clicked the favorite button for Jun의 첫 번째 숙소 (jun_1), verified button state change and localStorage favorites update.\",\n      extractedData: {\n        initialFavState,\n        updatedFavState,\n        initialLocalStorageFavorites,\n        updatedLocalStorageFavorites,\n        favoriteStatusChange\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 29983,
      "timestamp": "2025-09-15T09:28:33.048Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const initialScreenshot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialScreenshot });\n    screenshots.push(initialScreenshot);\n\n    // Wait for the listing for Jun's 첫 번째 숙소 (jun_1) to appear\n    // Use a robust selector: [data-listing-id=\"jun_1\"]\n    const junListingSelector = '[data-listing-id=\"jun_1\"]';\n    await page.waitForSelector(junListingSelector, { timeout: 5000 });\n\n    // Find the favorite button inside this listing using a different selector strategy:\n    // Try to select by aria-label or by icon, but since we don't have the HTML,\n    // fallback to a CSS class or direct child with .listing-favorite\n    const favoriteBtnSelector = `${junListingSelector} .listing-favorite`;\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 3000 });\n\n    // Take screenshot before clicking favorite button\n    const beforeFavScreenshot = path.join(screenshotsDir, 'step_2_before_favorite.png');\n    await page.screenshot({ path: beforeFavScreenshot });\n    screenshots.push(beforeFavScreenshot);\n\n    // Get the button element handle\n    const favoriteBtn = await page.$(favoriteBtnSelector);\n\n    // Extract button state BEFORE click (e.g., if it has 'active' or 'favorited' class)\n    const beforeState = await page.evaluate(el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed')\n      };\n    }, favoriteBtn);\n\n    // Click the favorite button (simulate user interaction)\n    await favoriteBtn.click();\n    // Wait a little for animation/state update\n    await page.waitForTimeout(600);\n\n    // Take screenshot after clicking favorite button\n    const afterFavScreenshot = path.join(screenshotsDir, 'step_3_after_favorite.png');\n    await page.screenshot({ path: afterFavScreenshot });\n    screenshots.push(afterFavScreenshot);\n\n    // Extract button state AFTER click\n    const afterState = await page.evaluate(el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed')\n      };\n    }, favoriteBtn);\n\n    // Check localStorage for favorites update\n    // Try several likely key names (e.g., 'favorites', 'airbnb.favorites', etc.)\n    const favoritesKeys = ['favorites', 'airbnb.favorites', '__favorites__'];\n    let localStorageFavorites = {};\n    for (const key of favoritesKeys) {\n      const value = await page.evaluate(k => window.localStorage.getItem(k), key);\n      if (value) {\n        localStorageFavorites[key] = value;\n      }\n    }\n\n    // Extract a parsed list of favorite IDs if possible\n    let parsedFavorites = null;\n    for (const key in localStorageFavorites) {\n      try {\n        const arr = JSON.parse(localStorageFavorites[key]);\n        if (Array.isArray(arr)) {\n          parsedFavorites = arr;\n          break;\n        }\n      } catch (e) {}\n    }\n\n    // Verify if 'jun_1' is present or absent after the click (toggle)\n    let jun1InFavorites = null;\n    if (parsedFavorites) {\n      jun1InFavorites = parsedFavorites.includes('jun_1');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state change and localStorage update.\",\n      extractedData: {\n        beforeButtonState: beforeState,\n        afterButtonState: afterState,\n        localStorageFavorites,\n        parsedFavorites,\n        jun1InFavorites\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19418,
      "timestamp": "2025-09-15T09:29:03.031Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the Jun's 첫 번째 숙소 listing card's favorite (즐겨찾기) button to appear\n    // Use data-listing-id attribute for precision, and fallback to CSS selector if needed\n    const favBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favBtnSelector, { timeout: 5000 });\n\n    // Take a screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Verify button state BEFORE click (get class or aria-pressed or text/icon)\n    const beforeState = await page.$eval(favBtnSelector, el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerText: el.innerText,\n        icon: el.querySelector('svg') ? el.querySelector('svg').outerHTML : null\n      };\n    });\n\n    // Click the 즐겨찾기 (favorite) button\n    await page.click(favBtnSelector);\n\n    // Wait for the button to change state (e.g., class toggle, aria-pressed change, icon change)\n    // Try multiple strategies: class, aria-pressed, and icon change\n    await page.waitForFunction(\n      (selector, prevClass, prevAria, prevIcon) => {\n        const el = document.querySelector(selector);\n        if (!el) return false;\n        const newClass = el.className;\n        const newAria = el.getAttribute('aria-pressed');\n        const icon = el.querySelector('svg') ? el.querySelector('svg').outerHTML : null;\n        return newClass !== prevClass || newAria !== prevAria || icon !== prevIcon;\n      },\n      favBtnSelector,\n      beforeState.class,\n      beforeState.ariaPressed,\n      beforeState.icon\n    );\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Check button state AFTER click\n    const afterState = await page.$eval(favBtnSelector, el => {\n      return {\n        class: el.className,\n        ariaPressed: el.getAttribute('aria-pressed'),\n        innerText: el.innerText,\n        icon: el.querySelector('svg') ? el.querySelector('svg').outerHTML : null\n      };\n    });\n\n    // Extract localStorage favorites for the current user using browser context\n    const localStorageFavorites = await page.evaluate(() => {\n      // Try to find all keys and see which one holds favorites\n      const keys = Object.keys(window.localStorage);\n      let favoritesKey = null;\n      for (const k of keys) {\n        if (k.toLowerCase().includes('favorite')) {\n          favoritesKey = k;\n          break;\n        }\n      }\n      let favoritesValue = null;\n      if (favoritesKey) {\n        try {\n          favoritesValue = JSON.parse(window.localStorage.getItem(favoritesKey));\n        } catch(e) {\n          favoritesValue = window.localStorage.getItem(favoritesKey);\n        }\n      }\n      // If not found, try airbnbData fallback\n      let airbnbFavs = null;\n      try {\n        if (window.airbnbData && window.airbnbData.currentUser && window.airbnbData.currentUser.favorites) {\n          airbnbFavs = window.airbnbData.currentUser.favorites;\n        }\n      } catch (e) {}\n      return {\n        favoritesKey,\n        favoritesValue,\n        airbnbFavs\n      };\n    });\n\n    // Compose extracted data for verification\n    const extractedData = {\n      beforeState,\n      afterState,\n      localStorageFavorites\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼, verified button state change and checked localStorage update.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 35307,
      "timestamp": "2025-09-15T09:29:22.449Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 84708,
  "timestamp": "2025-09-15T09:28:33.048Z",
  "savedAt": "2025-09-15T09:29:57.757Z",
  "version": "1.0"
}