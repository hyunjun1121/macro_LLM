{
  "id": "reddit_Sheet1_1757928345622_mzxys_1757935623839",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928345622_mzxys",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Start keyboard navigation using the Tab key\n    const interactiveElements = [\n      '#searchInput', // Search input\n      'button.theme-toggle-btn', // Theme toggle button\n      'button.create-post-btn', // Create post button\n      'button.community-link', // Community links\n      'button.quick-action-btn' // Quick action buttons\n    ];\n\n    for (const selector of interactiveElements) {\n      await page.focus(selector); // Focus on the element\n      await page.keyboard.press('Tab'); // Simulate Tab key press\n      await page.waitForTimeout(100); // Wait for a short duration to observe focus change\n      await page.screenshot({ path: path.join(screenshotsDir, `step_focus_${selector.replace(/[^a-zA-Z0-9]/g, '_')}.png`) });\n      screenshots.push(path.join(screenshotsDir, `step_focus_${selector.replace(/[^a-zA-Z0-9]/g, '_')}.png`));\n    }\n\n    // Verify focus on the last element\n    const focusedElement = await page.evaluate(() => document.activeElement);\n    const isFocused = await page.$eval(focusedElement, el => el.matches('button.quick-action-btn'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus.\",\n      extractedData: { isFocused },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 15459,
      "timestamp": "2025-09-15T11:27:03.839Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Use Tab key to navigate through interactive elements\n    const buttonSelectors = [\n      'button.theme-toggle-btn',\n      'button.create-post-btn',\n      '#searchInput',\n      '#postTitle',\n      'button.community-link',\n      'button.quick-action-btn'\n    ];\n\n    for (const selector of buttonSelectors) {\n      await page.focus(selector);\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(500); // Wait for the focus to be applied\n      const isFocused = await page.evaluate((sel) => {\n        const element = document.querySelector(sel);\n        return document.activeElement === element;\n      }, selector);\n      console.log(`Focused on ${selector}: ${isFocused}`);\n    }\n\n    // Take a screenshot after navigation\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_navigation.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_navigation.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements\",\n      extractedData: {},\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 16802,
      "timestamp": "2025-09-15T11:27:19.298Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4o-mini",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus on the search input field\n    await page.waitForSelector('#searchInput');\n    await page.focus('#searchInput');\n    await page.keyboard.press('Tab'); // Move to the next interactive element\n\n    // Verify focus on the theme toggle button\n    await page.waitForSelector('button.theme-toggle-btn');\n    const isThemeToggleFocused = await page.evaluate(() => document.querySelector('button.theme-toggle-btn') === document.activeElement);\n    if (!isThemeToggleFocused) throw new Error('Theme toggle button is not focused');\n\n    await page.keyboard.press('Tab'); // Move to the create post button\n\n    // Verify focus on the create post button\n    await page.waitForSelector('button.create-post-btn');\n    const isCreatePostFocused = await page.evaluate(() => document.querySelector('button.create-post-btn') === document.activeElement);\n    if (!isCreatePostFocused) throw new Error('Create post button is not focused');\n\n    await page.keyboard.press('Tab'); // Move to the first community link\n\n    // Verify focus on the first community link\n    await page.waitForSelector('button.community-link');\n    const isFirstCommunityFocused = await page.evaluate(() => document.querySelector('button.community-link') === document.activeElement);\n    if (!isFirstCommunityFocused) throw new Error('First community link is not focused');\n\n    // Take final screenshot after tab navigation\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_final.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_final.png'));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation through interactive elements and verified focus.\",\n      extractedData: {\n        themeToggleFocused: isThemeToggleFocused,\n        createPostFocused: isCreatePostFocused,\n        firstCommunityFocused: isFirstCommunityFocused\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 18339,
      "timestamp": "2025-09-15T11:27:36.101Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 50601,
  "timestamp": "2025-09-15T11:27:03.839Z",
  "savedAt": "2025-09-15T11:27:54.440Z",
  "version": "1.0"
}