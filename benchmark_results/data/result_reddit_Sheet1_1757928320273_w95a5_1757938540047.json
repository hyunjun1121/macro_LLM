{
  "id": "reddit_Sheet1_1757928320273_w95a5_1757938540047",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320273_w95a5",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus body to start keyboard navigation\n    await page.focus('body');\n\n    // Prepare to collect focus order and element info\n    const focusedElements = [];\n\n    // Helper to get info about the currently focused element\n    async function getFocusedInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        // Try to get a useful selector and label\n        let selector = '';\n        if (el.id) selector = `#${el.id}`;\n        else if (el.className && typeof el.className === 'string') selector = '.' + el.className.split(' ').join('.');\n        else selector = el.tagName.toLowerCase();\n        let label = el.getAttribute('aria-label') || el.getAttribute('placeholder') || el.innerText || el.value || el.name || el.type || '';\n        return {\n          tag: el.tagName,\n          selector,\n          label: label.trim(),\n          type: el.type || '',\n          name: el.name || '',\n          id: el.id || '',\n          className: el.className || ''\n        };\n      });\n    }\n\n    // List of expected tabbable selectors in order (based on HTML analysis)\n    // We'll check at least the first 8-10 for demonstration\n    // 1. Search input (#searchInput)\n    // 2. Theme toggle button (.theme-toggle-btn)\n    // 3. Create post button (.create-post-btn)\n    // 4. Community button r/programming (first .community-link)\n    // 5. Community button r/webdev (second .community-link)\n    // 6. Community button r/javascript (third .community-link)\n    // 7. Community button r/reactjs (fourth .community-link)\n    // 8. View Profile button (.quick-action-btn, first)\n    // 9. Create Post button (.quick-action-btn, second)\n    // 10. Saved Posts button (.quick-action-btn, third)\n    // 11. Post Community select (#postCommunity)\n    // 12. Post Title input (#postTitle)\n\n    // Start tabbing through interactive elements\n    for (let i = 0; i < 12; i++) {\n      // Press Tab (first tab will focus the first tabbable element)\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(150); // Wait a bit for focus to update\n\n      // Get info about the focused element\n      const info = await getFocusedInfo();\n      focusedElements.push(info);\n\n      // Take screenshot at each step\n      const shotName = `step_${i + 2}_tab_${i + 1}.png`;\n      await page.screenshot({ path: path.join(screenshotsDir, shotName) });\n      screenshots.push(path.join(screenshotsDir, shotName));\n    }\n\n    // Extracted data: focus order summary\n    const extractedData = {\n      focusOrder: focusedElements\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order with screenshots.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 17877,
      "timestamp": "2025-09-15T12:15:40.047Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Step 1: Initial screenshot\n    const initialShot = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: initialShot });\n    screenshots.push(initialShot);\n\n    // Wait for the header search input by aria-label (alternative selector)\n    await page.waitForSelector('input[aria-label=\"Search Reddit posts and communities\"]');\n\n    // Focus body to start tabbing from top of document\n    await page.evaluate(() => document.body.focus());\n\n    // Helper: track focused elements\n    const focusedElements = [];\n\n    // We'll tab through the first 8 interactive elements (search, theme toggle, create, community links)\n    for (let i = 0; i < 8; i++) {\n      await page.keyboard.press('Tab');\n      // Wait a little to let focus update\n      await page.waitForTimeout(100);\n\n      // Extract the currently focused element's role, tag, class, and placeholder/text\n      const info = await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        let label = \"\";\n        if (el.getAttribute('aria-label')) label = el.getAttribute('aria-label');\n        if (el.placeholder) label = el.placeholder;\n        if (el.innerText && !label) label = el.innerText.trim();\n        return {\n          tag: el.tagName,\n          class: el.className,\n          id: el.id,\n          role: el.getAttribute('role'),\n          ariaLabel: el.getAttribute('aria-label'),\n          placeholder: el.placeholder || null,\n          text: el.innerText ? el.innerText.trim() : null,\n          label,\n        };\n      });\n      focusedElements.push(info);\n\n      // Screenshot after each tab\n      const shotPath = path.join(screenshotsDir, `step_2_tab_${i + 1}.png`);\n      await page.screenshot({ path: shotPath });\n      screenshots.push(shotPath);\n    }\n\n    // For extra verification, collect all interactive elements in tab order using tabindex and visible\n    const allTabbable = await page.evaluate(() => {\n      // Basic filter for interactive elements\n      const selector = [\n        'a[href]:not([tabindex=\"-1\"])',\n        'button:not([disabled]):not([tabindex=\"-1\"])',\n        'input:not([disabled]):not([type=\"hidden\"]):not([tabindex=\"-1\"])',\n        'select:not([disabled]):not([tabindex=\"-1\"])',\n        '[tabindex]:not([tabindex=\"-1\"])'\n      ].join(',');\n\n      const elements = Array.from(document.querySelectorAll(selector))\n        .filter(el => !el.hasAttribute('disabled') && el.offsetParent !== null)\n        .map(el => ({\n          tag: el.tagName,\n          class: el.className,\n          id: el.id,\n          role: el.getAttribute('role'),\n          ariaLabel: el.getAttribute('aria-label'),\n          placeholder: el.placeholder || null,\n          text: el.innerText ? el.innerText.trim() : null\n        }));\n      return elements;\n    });\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation using Tab key. Focused elements sequentially and verified focus movement through interactive components (search, toggle, create post, community links, etc).\",\n      extractedData: {\n        tabFocusedElements: focusedElements,\n        allTabbableElements: allTabbable\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 31774,
      "timestamp": "2025-09-15T12:15:57.924Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    const screenshots = [];\n    // Initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Ensure page body is focused for keyboard navigation\n    await page.evaluate(() => document.body.focus());\n\n    // We'll collect the order of focusable elements as we tab\n    const focusedElements = [];\n\n    // Helper to get the currently focused element's info\n    async function getFocusedInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        let info = { tag: el.tagName, id: el.id, name: el.getAttribute('name'), class: el.className, placeholder: el.getAttribute('placeholder'), ariaLabel: el.getAttribute('aria-label'), role: el.getAttribute('role') };\n        // Try some text content for buttons\n        if (el.tagName === 'BUTTON') {\n          info.text = el.innerText.trim();\n        } else if (el.tagName === 'INPUT') {\n          info.type = el.type;\n        } else if (el.tagName === 'SELECT') {\n          info.options = Array.from(el.options).map(o => o.text);\n        }\n        return info;\n      });\n    }\n\n    // Wait for the first tabbable element to be present\n    // We'll use the search input as the first focusable element (by ID)\n    await page.waitForSelector('#searchInput');\n\n    // Focus the body to start\n    await page.focus('body');\n\n    // Tabbing sequence: We'll press Tab up to 10 times or until we cycle through at least 5 unique interactive elements\n    const maxTabs = 15;\n    let uniqueFocus = new Set();\n    let foundFields = [];\n    for (let i = 0; i < maxTabs; i++) {\n      await page.keyboard.press('Tab');\n      // Small delay to allow focus update\n      await page.waitForTimeout(150);\n\n      const info = await getFocusedInfo();\n      if (info) {\n        // For uniqueness, make a key\n        let key = `${info.tag}|${info.id}|${info.name}|${info.class}|${info.placeholder}|${info.ariaLabel}`;\n        if (!uniqueFocus.has(key)) {\n          uniqueFocus.add(key);\n          foundFields.push(info);\n\n          // Take a screenshot for each new focused element\n          await page.screenshot({ path: path.join(screenshotsDir, `step_focus_${i + 1}.png`) });\n          screenshots.push(path.join(screenshotsDir, `step_focus_${i + 1}.png`));\n        }\n      }\n\n      // Stop if we've cycled through 7 distinct interactive elements\n      if (uniqueFocus.size >= 7) break;\n    }\n\n    // Extracted data for verification: List of focused elements with their types, class, id, etc\n    const extractedData = {\n      focusSequence: foundFields\n    };\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus sequence with screenshots.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 19797,
      "timestamp": "2025-09-15T12:16:29.698Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 69448,
  "timestamp": "2025-09-15T12:15:40.047Z",
  "savedAt": "2025-09-15T12:16:49.495Z",
  "version": "1.0"
}