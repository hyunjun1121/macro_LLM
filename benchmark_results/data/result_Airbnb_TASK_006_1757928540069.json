{
  "id": "Airbnb_TASK_006_1757928540069",
  "website": "Airbnb",
  "task": {
    "id": "TASK_006",
    "description": "General",
    "objective": "Favorites Toggle Action",
    "expectedResult": "Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼을 클릭하고 버튼 상태 변화 및 localStorage 업데이트 확인하기",
    "difficulty": "Medium",
    "category": "[data-listing-id='jun_1'] .listing-favorite, localStorage",
    "tags": [
      "Favorite interaction",
      "storage validation"
    ],
    "notes": "즐겨찾기 상태 변화 ('active' 클래스 추가/제거) 및 localStorage의 favorites 배열"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for Jun's first listing's favorite button to appear\n    const favoriteBtnSelector = \"[data-listing-id='jun_1'] .listing-favorite\";\n    await page.waitForSelector(favoriteBtnSelector, { timeout: 5000 });\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get button state before click (e.g., aria-pressed, class, text)\n    const btnStateBefore = await page.$eval(favoriteBtnSelector, el => ({\n      ariaPressed: el.getAttribute('aria-pressed'),\n      class: el.className,\n      text: el.innerText\n    }));\n\n    // Click the favorite button\n    await page.click(favoriteBtnSelector);\n\n    // Wait for the button state to change (e.g., aria-pressed toggles, class changes)\n    await page.waitForFunction((selector, prev) => {\n      const el = document.querySelector(selector);\n      if (!el) return false;\n      return (\n        el.getAttribute('aria-pressed') !== prev.ariaPressed ||\n        el.className !== prev.class ||\n        el.innerText !== prev.text\n      );\n    }, {}, favoriteBtnSelector, btnStateBefore);\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get button state after click\n    const btnStateAfter = await page.$eval(favoriteBtnSelector, el => ({\n      ariaPressed: el.getAttribute('aria-pressed'),\n      class: el.className,\n      text: el.innerText\n    }));\n\n    // Check localStorage for favorites update (assuming favorites are stored as a JSON array under 'favorites')\n    const favoritesInStorage = await page.evaluate(() => {\n      try {\n        const fav = localStorage.getItem('favorites');\n        if (!fav) return null;\n        return JSON.parse(fav);\n      } catch {\n        return null;\n      }\n    });\n\n    // Was 'jun_1' added or removed?\n    let favoriteStatus = null;\n    if (favoritesInStorage && Array.isArray(favoritesInStorage)) {\n      favoriteStatus = favoritesInStorage.includes('jun_1');\n    }\n\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1)의 즐겨찾기 버튼, 버튼 상태 변화와 localStorage 업데이트를 확인함\",\n      extractedData: {\n        btnStateBefore,\n        btnStateAfter,\n        favoritesInStorage,\n        jun_1_is_favorited: favoriteStatus\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 14035,
      "timestamp": "2025-09-15T09:29:00.069Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Wait for the listing with data-listing-id='jun_1' to be present\n    const listingSelector = \"[data-listing-id='jun_1']\";\n    await page.waitForSelector(listingSelector, { timeout: 5000 });\n\n    // Find the favorite button inside this listing (using nested selector for robustness)\n    // Try both class and aria-label/text content for resilience\n    const favoriteBtnSelector =\n      \"[data-listing-id='jun_1'] .listing-favorite, [data-listing-id='jun_1'] button[aria-label*='favorite'], [data-listing-id='jun_1'] button:has(svg)\";\n\n    const favoriteBtn = await page.$(favoriteBtnSelector);\n\n    if (!favoriteBtn) {\n      throw new Error(\"Favorite button for Jun's first listing not found\");\n    }\n\n    // Scroll into view and get initial class/state\n    await favoriteBtn.scrollIntoViewIfNeeded();\n    const initialBtnClass = await favoriteBtn.getAttribute('class');\n    const initialBtnText = await favoriteBtn.textContent();\n\n    // Take screenshot before click\n    const step2 = path.join(screenshotsDir, 'step_2_before_click.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // Click the favorite button\n    await favoriteBtn.click();\n\n    // Wait for the button to reflect the new state (e.g., class or aria-pressed changes)\n    // Poll for class change or aria-pressed attribute change, or short delay if not instant\n    await page.waitForTimeout(500); // Give UI time to update\n\n    // Re-fetch the button (it may have been re-rendered)\n    const favoriteBtnAfter = await page.$(favoriteBtnSelector);\n\n    // Get updated state\n    const afterBtnClass = favoriteBtnAfter\n      ? await favoriteBtnAfter.getAttribute('class')\n      : null;\n    const afterBtnText = favoriteBtnAfter\n      ? await favoriteBtnAfter.textContent()\n      : null;\n    const afterAriaPressed = favoriteBtnAfter\n      ? await favoriteBtnAfter.getAttribute('aria-pressed')\n      : null;\n\n    // Take screenshot after click\n    const step3 = path.join(screenshotsDir, 'step_3_after_click.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // Check localStorage for favorite status (run in page context)\n    const localStorageData = await page.evaluate(() => {\n      // Try to find favorites in localStorage (key might be 'favorites' or similar)\n      let favorites = null;\n      for (const key of Object.keys(localStorage)) {\n        if (key.toLowerCase().includes('favorite')) {\n          try {\n            const parsed = JSON.parse(localStorage.getItem(key));\n            favorites = parsed;\n            break;\n          } catch {}\n        }\n      }\n      return {\n        favorites,\n        allKeys: Object.keys(localStorage).reduce((acc, k) => ({ ...acc, [k]: localStorage.getItem(k) }), {})\n      };\n    });\n\n    // Check if 'jun_1' is present or removed in the favorites array (after click)\n    let jun1InFavorites = false;\n    if (Array.isArray(localStorageData.favorites)) {\n      jun1InFavorites = localStorageData.favorites.includes('jun_1');\n    }\n\n    // Compose extractedData\n    const extractedData = {\n      initialBtnClass,\n      initialBtnText,\n      afterBtnClass,\n      afterBtnText,\n      afterAriaPressed,\n      jun1InFavorites,\n      localStorageKeys: Object.keys(localStorageData.allKeys),\n      favoritesArray: localStorageData.favorites\n    };\n\n    return {\n      success: true,\n      action: \"Clicked Jun's 첫 번째 숙소(jun_1) favorite button, checked button state change and confirmed localStorage update.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22501,
      "timestamp": "2025-09-15T09:29:14.104Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  const screenshots = [];\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for the listing with data-listing-id=\"jun_1\" to be visible\n    const listingSelector = '[data-listing-id=\"jun_1\"]';\n    await page.waitForSelector(listingSelector);\n\n    // Use a robust selector for the favorite button inside Jun's first listing\n    // Try: listing -> descendant .listing-favorite (may be button or clickable span/div)\n    // Try both css and xpath strategies for robustness\n    let favBtnHandle = await page.$(`${listingSelector} .listing-favorite`);\n    if (!favBtnHandle) {\n      favBtnHandle = await page.$(`xpath=//div[@data-listing-id=\"jun_1\"]//*[contains(@class,\"listing-favorite\")]`);\n    }\n    if (!favBtnHandle) {\n      throw new Error('Could not find favorite button for Jun\\'s first listing');\n    }\n\n    // Take screenshot before clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_before_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_before_favorite.png'));\n\n    // Get the button's initial state (e.g., aria-pressed, class, or icon state)\n    const beforeState = await page.evaluate((sel) => {\n      const btn = document.querySelector(sel + ' .listing-favorite');\n      if (!btn) return null;\n      return {\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        class: btn.className,\n        innerText: btn.innerText,\n        iconHtml: btn.innerHTML\n      };\n    }, listingSelector);\n\n    // Click the favorite button\n    await favBtnHandle.click();\n\n    // Wait for the button state to change (e.g., class, icon, aria-pressed)\n    // Wait up to 2 seconds for a state change\n    await page.waitForFunction(\n      (sel, prevAria, prevClass, prevIcon) => {\n        const btn = document.querySelector(sel + ' .listing-favorite');\n        if (!btn) return false;\n        return btn.getAttribute('aria-pressed') !== prevAria ||\n               btn.className !== prevClass ||\n               btn.innerHTML !== prevIcon;\n      },\n      { timeout: 2000 },\n      listingSelector,\n      beforeState ? beforeState.ariaPressed : null,\n      beforeState ? beforeState.class : null,\n      beforeState ? beforeState.iconHtml : null\n    ).catch(() => { /* continue anyway; may not use aria-pressed */ });\n\n    // Take screenshot after clicking favorite\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_favorite.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_favorite.png'));\n\n    // Get the button's state after clicking\n    const afterState = await page.evaluate((sel) => {\n      const btn = document.querySelector(sel + ' .listing-favorite');\n      if (!btn) return null;\n      return {\n        ariaPressed: btn.getAttribute('aria-pressed'),\n        class: btn.className,\n        innerText: btn.innerText,\n        iconHtml: btn.innerHTML\n      };\n    }, listingSelector);\n\n    // Check localStorage for favorites (try common keys: 'favorites', 'airbnb.favorites', etc)\n    const localStorageData = await page.evaluate(() => {\n      const keys = Object.keys(localStorage);\n      let foundKey = null;\n      let foundValue = null;\n      for (const key of keys) {\n        if (/fav/i.test(key)) {\n          foundKey = key;\n          foundValue = localStorage.getItem(key);\n          break;\n        }\n      }\n      // Try known keys if not auto-found\n      if (!foundKey && localStorage.getItem('favorites')) {\n        foundKey = 'favorites';\n        foundValue = localStorage.getItem('favorites');\n      }\n      if (!foundKey && localStorage.getItem('airbnb.favorites')) {\n        foundKey = 'airbnb.favorites';\n        foundValue = localStorage.getItem('airbnb.favorites');\n      }\n      return { key: foundKey, value: foundValue };\n    });\n\n    // Check if 'jun_1' is present in the favorites localStorage value (assuming it's an array or JSON string)\n    let isJun1Favorited = false;\n    if (localStorageData.value) {\n      try {\n        const favArr = JSON.parse(localStorageData.value);\n        if (Array.isArray(favArr) && favArr.includes('jun_1')) {\n          isJun1Favorited = true;\n        } else if (typeof favArr === 'object' && favArr !== null && Object.values(favArr).includes('jun_1')) {\n          isJun1Favorited = true;\n        }\n      } catch (e) {\n        // fallback: check substring\n        if (localStorageData.value.includes('jun_1')) isJun1Favorited = true;\n      }\n    }\n\n    // Compile results\n    return {\n      success: true,\n      action: \"Clicked Jun의 첫 번째 숙소(jun_1) 즐겨찾기 버튼 and verified button state & localStorage update\",\n      extractedData: {\n        beforeState,\n        afterState,\n        localStorageFavorites: localStorageData,\n        isJun1Favorited\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots,\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 23281,
      "timestamp": "2025-09-15T09:29:36.605Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 59817,
  "timestamp": "2025-09-15T09:29:00.069Z",
  "savedAt": "2025-09-15T09:29:59.886Z",
  "version": "1.0"
}