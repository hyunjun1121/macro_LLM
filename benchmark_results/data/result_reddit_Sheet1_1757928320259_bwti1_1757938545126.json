{
  "id": "reddit_Sheet1_1757928320259_bwti1_1757938545126",
  "website": "reddit",
  "task": {
    "id": "Sheet1_1757928320259_bwti1",
    "description": 12,
    "objective": "Regular",
    "expectedResult": "Test keyboard navigation",
    "difficulty": "Medium",
    "category": "Use Tab key to navigate through interactive elements and verify focus",
    "tags": [
      "focusable elements [tabindex] [role]"
    ],
    "notes": "setupKeyboardNavigation()"
  },
  "websiteInfo": {
    "name": "reddit",
    "htmlFiles": [
      "community.html",
      "index.html",
      "profile.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Focus tracking helper\n    async function getFocusedElementInfo() {\n      return await page.evaluate(() => {\n        const el = document.activeElement;\n        if (!el) return null;\n        let info = {\n          tag: el.tagName,\n          id: el.id || null,\n          name: el.getAttribute('name') || null,\n          class: el.className || null,\n          role: el.getAttribute('role') || null,\n          ariaLabel: el.getAttribute('aria-label') || null,\n          placeholder: el.getAttribute('placeholder') || null,\n          text: el.innerText || el.value || null\n        };\n        return info;\n      });\n    }\n\n    // Start keyboard navigation: focus the body and press Tab repeatedly\n    await page.focus('body');\n    const tabSteps = [];\n    let foundInteractive = 0;\n    let maxTabs = 15; // Limit to avoid infinite loop\n    let lastFocused = null;\n\n    for (let i = 0; i < maxTabs; i++) {\n      // Press Tab\n      await page.keyboard.press('Tab');\n      // Wait a moment for focus to update\n      await page.waitForTimeout(200);\n\n      // Get focused element info\n      const info = await getFocusedElementInfo();\n      tabSteps.push(info);\n\n      // Take a screenshot for this step\n      const shotName = `step_2_tab_${i + 1}.png`;\n      await page.screenshot({ path: path.join(screenshotsDir, shotName) });\n      screenshots.push(path.join(screenshotsDir, shotName));\n\n      // Stop if we start looping (focus returns to body or repeats)\n      if (lastFocused && info && JSON.stringify(info) === JSON.stringify(lastFocused)) {\n        break;\n      }\n      lastFocused = info;\n\n      // Stop if we've focused at least 6 interactive elements (search, theme, create, community, etc.)\n      if (\n        info &&\n        (\n          (info.tag === 'INPUT' && info.placeholder) ||\n          (info.tag === 'BUTTON') ||\n          (info.tag === 'SELECT')\n        )\n      ) {\n        foundInteractive++;\n      }\n      if (foundInteractive >= 6) break;\n    }\n\n    // Extract the sequence of focused elements for verification\n    const focusedSequence = tabSteps.map((info, idx) => ({\n      step: idx + 1,\n      tag: info ? info.tag : null,\n      id: info ? info.id : null,\n      class: info ? info.class : null,\n      role: info ? info.role : null,\n      ariaLabel: info ? info.ariaLabel : null,\n      placeholder: info ? info.placeholder : null,\n      text: info ? (info.text ? info.text.trim() : null) : null\n    }));\n\n    return {\n      success: true,\n      action: \"Tested keyboard navigation using Tab key; verified focus moves through interactive elements in order. Screenshots captured at each step.\",\n      extractedData: {\n        focusedSequence\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 21891,
      "timestamp": "2025-09-15T12:15:45.126Z"
    },
    {
      "attemptNumber": 2,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const shot1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: shot1 });\n    screenshots.push(shot1);\n\n    // Wait for the main header input to be present (Search Reddit)\n    await page.waitForSelector('input[placeholder=\"Search Reddit\"]');\n\n    // Focus the body and start keyboard navigation\n    await page.focus('body');\n\n    // Helper function to extract focused element meaningful info\n    async function extractFocusInfo() {\n      return await page.evaluate(() => {\n        const active = document.activeElement;\n        if (!active) return null;\n        const tag = active.tagName;\n        const type = active.type || '';\n        const name = active.getAttribute('name') || '';\n        const id = active.id || '';\n        const cls = active.className || '';\n        const placeholder = active.placeholder || '';\n        const text = active.innerText || '';\n        return { tag, type, name, id, cls, placeholder, text, ariaLabel: active.getAttribute('aria-label') };\n      });\n    }\n\n    // Store focus order info\n    const focusOrder = [];\n\n    // Press TAB repeatedly and record focus info for the first 8 interactive elements\n    for (let i = 0; i < 8; i++) {\n      await page.keyboard.press('Tab');\n      await page.waitForTimeout(100); // slight pause for focus move\n      const info = await extractFocusInfo();\n      focusOrder.push(info);\n\n      // Screenshot after each tab, for first 5 elements\n      if (i < 5) {\n        const shot = path.join(screenshotsDir, `step_2_tab_${i+1}.png`);\n        await page.screenshot({ path: shot });\n        screenshots.push(shot);\n      }\n    }\n\n    // Additionally, reverse tab to confirm shift+tab works\n    await page.keyboard.down('Shift');\n    await page.keyboard.press('Tab');\n    await page.keyboard.up('Shift');\n    await page.waitForTimeout(100);\n    const reverseFocus = await extractFocusInfo();\n    screenshots.push(path.join(screenshotsDir, 'step_3_reverse_tab.png'));\n    await page.screenshot({ path: screenshots[screenshots.length - 1] });\n\n    // Extract the aria-label or text of focused elements to verify navigation order\n    const focusSummary = focusOrder.map((f, idx) => ({\n      step: idx + 1,\n      tag: f && f.tag,\n      id: f && f.id,\n      class: f && f.cls,\n      placeholder: f && f.placeholder,\n      ariaLabel: f && f.ariaLabel,\n      text: f && f.text && f.text.trim()\n    }));\n\n    // Return all info\n    return {\n      success: true,\n      action: \"Tested keyboard navigation via Tab and Shift+Tab on Reddit demo, capturing focus order and screenshots.\",\n      extractedData: {\n        focusOrder: focusSummary,\n        reverseFocus\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22335,
      "timestamp": "2025-09-15T12:16:07.017Z"
    },
    {
      "attemptNumber": 3,
      "model": "openai/gpt-4.1",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    const step1 = path.join(screenshotsDir, 'step_1_initial.png');\n    await page.screenshot({ path: step1 });\n    screenshots.push(step1);\n\n    // Focus on body to start keyboard navigation\n    await page.focus('body');\n\n    // Helper function to get active element's descriptor\n    async function getActiveElementInfo() {\n      return await page.evaluate(() => {\n        const ae = document.activeElement;\n        if (!ae) return null;\n        let info = {\n          tag: ae.tagName,\n          id: ae.id || null,\n          class: ae.className || null,\n          name: ae.getAttribute('name'),\n          placeholder: ae.getAttribute('placeholder'),\n          ariaLabel: ae.getAttribute('aria-label'),\n          type: ae.type || null,\n          text: (ae.innerText || ae.value || '').trim()\n        };\n        return info;\n      });\n    }\n\n    // Store the sequence of keyboard focus\n    const focusSequence = [];\n\n    // Wait for the first tabbable element (search input) to be present\n    await page.waitForSelector('input[placeholder=\"Search Reddit\"]', { timeout: 4000 });\n\n    // TAB 1: Should focus Search Reddit input (#searchInput)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae1 = await getActiveElementInfo();\n    focusSequence.push(ae1);\n\n    // Screenshot after first TAB\n    const step2 = path.join(screenshotsDir, 'step_2_after_tab1.png');\n    await page.screenshot({ path: step2 });\n    screenshots.push(step2);\n\n    // TAB 2: Should focus \"User menu\" (div.user-info[tabindex=\"0\"])\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae2 = await getActiveElementInfo();\n    focusSequence.push(ae2);\n\n    // Screenshot after second TAB\n    const step3 = path.join(screenshotsDir, 'step_3_after_tab2.png');\n    await page.screenshot({ path: step3 });\n    screenshots.push(step3);\n\n    // TAB 3: Theme toggle button (button.theme-toggle-btn)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae3 = await getActiveElementInfo();\n    focusSequence.push(ae3);\n\n    // Screenshot after third TAB\n    const step4 = path.join(screenshotsDir, 'step_4_after_tab3.png');\n    await page.screenshot({ path: step4 });\n    screenshots.push(step4);\n\n    // TAB 4: \"Create\" post button (button.create-post-btn)\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae4 = await getActiveElementInfo();\n    focusSequence.push(ae4);\n\n    // Screenshot after fourth TAB\n    const step5 = path.join(screenshotsDir, 'step_5_after_tab4.png');\n    await page.screenshot({ path: step5 });\n    screenshots.push(step5);\n\n    // TAB 5: First sidebar community button (button.community-link, \"r/programming\")\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae5 = await getActiveElementInfo();\n    focusSequence.push(ae5);\n\n    // Screenshot after fifth TAB\n    const step6 = path.join(screenshotsDir, 'step_6_after_tab5.png');\n    await page.screenshot({ path: step6 });\n    screenshots.push(step6);\n\n    // TAB 6: Second sidebar community button (button.community-link, \"r/webdev\")\n    await page.keyboard.press('Tab');\n    await page.waitForTimeout(200);\n    let ae6 = await getActiveElementInfo();\n    focusSequence.push(ae6);\n\n    // Screenshot after sixth TAB\n    const step7 = path.join(screenshotsDir, 'step_7_after_tab6.png');\n    await page.screenshot({ path: step7 });\n    screenshots.push(step7);\n\n    // Gather which elements received focus in order\n    const extractedData = {\n      focusSequence\n    };\n\n    // Validate that focus follows expected navigation order by tag/class/placeholder/text\n    const expectedTabOrder = [\n      { tag: 'INPUT', id: 'searchInput', placeholder: 'Search Reddit' },\n      { tag: 'DIV', class: /user-info/, ariaLabel: /User menu/ },\n      { tag: 'BUTTON', class: /theme-toggle-btn/, ariaLabel: /Toggle/ },\n      { tag: 'BUTTON', class: /create-post-btn/, text: /Create/ },\n      { tag: 'BUTTON', class: /community-link/, text: /programming/ },\n      { tag: 'BUTTON', class: /community-link/, text: /webdev/ }\n    ];\n\n    // Simple validation summary\n    let tabOrderCorrect = true;\n    for (let i = 0; i < expectedTabOrder.length; ++i) {\n      const expected = expectedTabOrder[i];\n      const actual = focusSequence[i] || {};\n      if (expected.tag && actual.tag !== expected.tag) tabOrderCorrect = false;\n      if (expected.id && expected.id !== actual.id) tabOrderCorrect = false;\n      if (expected.class && !(actual.class && expected.class.test(actual.class))) tabOrderCorrect = false;\n      if (expected.placeholder && actual.placeholder !== expected.placeholder) tabOrderCorrect = false;\n      if (expected.ariaLabel && !(actual.ariaLabel && expected.ariaLabel.test(actual.ariaLabel))) tabOrderCorrect = false;\n      if (expected.text && !(actual.text && expected.text.match(expected.text))) tabOrderCorrect = false;\n    }\n\n    extractedData.tabOrderCorrect = tabOrderCorrect;\n\n    return {\n      success: true,\n      action: \"Tested keyboard Tab navigation through interactive elements and verified focus order and accessibility.\",\n      extractedData,\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 22255,
      "timestamp": "2025-09-15T12:16:29.352Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 66481,
  "timestamp": "2025-09-15T12:15:45.126Z",
  "savedAt": "2025-09-15T12:16:51.608Z",
  "version": "1.0"
}