{
  "id": "Airbnb_TASK_009_1757929757200",
  "website": "Airbnb",
  "task": {
    "id": "TASK_009",
    "description": "General",
    "objective": "Search History Storage",
    "expectedResult": "검색 수행 후 localStorage의 검색 기록이 업데이트되는지 확인하고 최신 검색어 추출하기",
    "difficulty": "Medium",
    "category": ".search-btn, localStorage",
    "tags": [
      "Search execution",
      "storage inspection"
    ],
    "notes": "localStorage의 airbnb_searches 배열에서 가장 최근 검색 기록"
  },
  "websiteInfo": {
    "name": "Airbnb",
    "htmlFiles": [
      "experiences.html",
      "host-dashboard.html",
      "index.html",
      "profile.html",
      "property.html",
      "trips.html"
    ],
    "hasIndex": true,
    "structure": {}
  },
  "attempts": [
    {
      "attemptNumber": 1,
      "model": "deepseek-ai/DeepSeek-V3.1-thinking-on",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Wait for search elements to load\n    await page.waitForSelector('#locationInput');\n    await page.waitForSelector('.search-btn');\n\n    // Perform search\n    await page.fill('#locationInput', 'Seoul');\n    await page.click('.search-btn');\n    \n    // Wait for search to complete\n    await page.waitForTimeout(2000);\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_after_search.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_after_search.png'));\n\n    // Check localStorage for search history\n    const searchHistory = await page.evaluate(() => {\n      return JSON.parse(localStorage.getItem('searchHistory') || '[]');\n    });\n\n    // Extract latest search term\n    const latestSearch = searchHistory.length > 0 ? searchHistory[searchHistory.length - 1] : null;\n\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_final.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_final.png'));\n\n    return {\n      success: true,\n      action: \"Performed search and extracted search history from localStorage\",\n      extractedData: {\n        searchHistory,\n        latestSearchTerm: latestSearch?.term || null\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete search and extract localStorage data\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 61973,
      "timestamp": "2025-09-15T09:49:17.200Z"
    },
    {
      "attemptNumber": 2,
      "model": "deepseek-ai/DeepSeek-V3.1-thinking-on",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Fill search form\n    await page.waitForSelector('#locationInput');\n    await page.fill('#locationInput', 'Paris, France');\n    \n    // Set future dates for check-in/check-out\n    const today = new Date();\n    const checkInDate = new Date(today);\n    checkInDate.setDate(today.getDate() + 7);\n    const checkOutDate = new Date(today);\n    checkOutDate.setDate(today.getDate() + 14);\n    \n    await page.fill('#checkinInput', checkInDate.toISOString().split('T')[0]);\n    await page.fill('#checkoutInput', checkOutDate.toISOString().split('T')[0]);\n\n    // Handle guest selection\n    await page.click('button.guest-selector');\n    await page.waitForSelector('#guestMenu', { state: 'visible' });\n    \n    // Add 2 adults\n    const adultPlusBtn = await page.$('div.guest-option:first-child button:has-text(\"+\")');\n    await adultPlusBtn.click();\n    await adultPlusBtn.click();\n\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_form_filled.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_form_filled.png'));\n\n    // Perform search using different selector strategy\n    const searchBtn = await page.$('button.search-btn');\n    await searchBtn.click();\n\n    // Wait for search to complete and localStorage to update\n    await page.waitForTimeout(2000);\n\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_search.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_search.png'));\n\n    // Extract search history from localStorage\n    const searchHistory = await page.evaluate(() => {\n      return JSON.parse(localStorage.getItem('searchHistory') || '[]');\n    });\n\n    // Get latest search term\n    const latestSearch = searchHistory.length > 0 ? searchHistory[searchHistory.length - 1] : null;\n\n    return {\n      success: true,\n      action: \"Performed search and extracted latest search term from localStorage\",\n      extractedData: {\n        searchHistory: searchHistory,\n        latestSearch: latestSearch\n      },\n      screenshots,\n      error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 134282,
      "timestamp": "2025-09-15T09:50:19.173Z"
    },
    {
      "attemptNumber": 3,
      "model": "deepseek-ai/DeepSeek-V3.1-thinking-on",
      "macroCode": "import path from 'path';\n\nexport default async function(page, fileUrl, screenshotsDir) {\n  try {\n    // Navigate to the HTML file\n    await page.goto(fileUrl);\n    await page.waitForLoadState('networkidle');\n\n    // Take initial screenshot\n    const screenshots = [];\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_1_initial.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_1_initial.png'));\n\n    // Fill search form\n    await page.waitForSelector('#locationInput');\n    await page.fill('#locationInput', 'Seoul');\n    \n    // Set check-in date (tomorrow)\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const checkinDate = tomorrow.toISOString().split('T')[0];\n    await page.fill('#checkinInput', checkinDate);\n    \n    // Set check-out date (2 days from now)\n    const dayAfterTomorrow = new Date();\n    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);\n    const checkoutDate = dayAfterTomorrow.toISOString().split('T')[0];\n    await page.fill('#checkoutInput', checkoutDate);\n\n    // Set guests\n    await page.click('button.guest-selector');\n    await page.waitForSelector('.guest-menu');\n    await page.click('button:has-text(\"+\")');\n    await page.click('button:has-text(\"+\")'); // Add 2 adults\n\n    // Take screenshot before search\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_2_search_form_filled.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_2_search_form_filled.png'));\n\n    // Find search button using multiple strategies\n    let searchButton = null;\n    try {\n        searchButton = await page.waitForSelector('.search-btn', { timeout: 2000 });\n    } catch {\n        searchButton = await page.waitForSelector('button:has-text(\"Search\")');\n    }\n\n    // Perform search\n    await searchButton.click();\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(2000); // Wait for localStorage update\n\n    // Take screenshot after search\n    await page.screenshot({ path: path.join(screenshotsDir, 'step_3_after_search.png') });\n    screenshots.push(path.join(screenshotsDir, 'step_3_after_search.png'));\n\n    // Extract search history from localStorage\n    const searchHistory = await page.evaluate(() => {\n        return JSON.parse(localStorage.getItem('searchHistory') || '[]');\n    });\n\n    // Get latest search term\n    const latestSearch = searchHistory.length > 0 ? searchHistory[searchHistory.length - 1] : null;\n\n    return {\n        success: true,\n        action: \"Performed search and extracted latest search term from localStorage\",\n        extractedData: {\n            searchHistory: searchHistory,\n            latestSearchTerm: latestSearch\n        },\n        screenshots,\n        error: null\n    };\n  } catch (error) {\n    return {\n      success: false,\n      action: \"Failed to complete task\",\n      extractedData: {},\n      screenshots: [],\n      error: error.message\n    };\n  }\n}",
      "executionResult": null,
      "success": false,
      "error": "isServerMode is not defined",
      "executionTime": 126426,
      "timestamp": "2025-09-15T09:52:33.455Z"
    }
  ],
  "success": false,
  "finalResult": null,
  "totalExecutionTime": 322681,
  "timestamp": "2025-09-15T09:49:17.200Z",
  "savedAt": "2025-09-15T09:54:39.881Z",
  "version": "1.0"
}